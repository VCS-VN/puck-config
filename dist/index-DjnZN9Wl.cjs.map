{"version":3,"file":"index-DjnZN9Wl.cjs","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/nonbreaking/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const isSimpleType = type => value => typeof value === type;\n    const isBoolean = isSimpleType('boolean');\n    const isNumber = isSimpleType('number');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('nonbreaking_force_tab', {\n        processor: value => {\n          if (isBoolean(value)) {\n            return {\n              value: value ? 3 : 0,\n              valid: true\n            };\n          } else if (isNumber(value)) {\n            return {\n              value,\n              valid: true\n            };\n          } else {\n            return {\n              valid: false,\n              message: 'Must be a boolean or number.'\n            };\n          }\n        },\n        default: false\n      });\n      registerOption('nonbreaking_wrap', {\n        processor: 'boolean',\n        default: true\n      });\n    };\n    const getKeyboardSpaces = option('nonbreaking_force_tab');\n    const wrapNbsps = option('nonbreaking_wrap');\n\n    const stringRepeat = (string, repeats) => {\n      let str = '';\n      for (let index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    const isVisualCharsEnabled = editor => editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    const insertNbsp = (editor, times) => {\n      const classes = () => isVisualCharsEnabled(editor) ? 'mce-nbsp-wrap mce-nbsp' : 'mce-nbsp-wrap';\n      const nbspSpan = () => `<span class=\"${ classes() }\" contenteditable=\"false\">${ stringRepeat('&nbsp;', times) }</span>`;\n      const shouldWrap = wrapNbsps(editor);\n      const html = shouldWrap || editor.plugins.visualchars ? nbspSpan() : stringRepeat('&nbsp;', times);\n      editor.undoManager.transact(() => editor.insertContent(html));\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceNonBreaking', () => {\n        insertNbsp(editor, 1);\n      });\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    const setup = editor => {\n      const spaces = getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', e => {\n          if (e.keyCode === global.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceNonBreaking');\n      editor.ui.registry.addButton('nonbreaking', {\n        icon: 'non-breaking',\n        tooltip: 'Nonbreaking space',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('nonbreaking', {\n        icon: 'non-breaking',\n        text: 'Nonbreaking space',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('nonbreaking', editor => {\n        register$2(editor);\n        register$1(editor);\n        register(editor);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","isSimpleType","type","value","isBoolean","isNumber","option","name","editor","register$2","registerOption","getKeyboardSpaces","wrapNbsps","stringRepeat","string","repeats","str","index","isVisualCharsEnabled","insertNbsp","times","classes","nbspSpan","html","register$1","global","setup","spaces","e","onSetupEditable","api","nodeChanged","register","onAction","Plugin"],"mappings":"6WAIC,UAAY,CAGT,IAAIA,EAAW,QAAQ,KAAK,MAAM,QAAQ,uBAAuB,EAEjE,MAAMC,EAAeC,GAAQC,GAAS,OAAOA,IAAUD,EACjDE,EAAYH,EAAa,SAAS,EAClCI,EAAWJ,EAAa,QAAQ,EAEhCK,EAASC,GAAQC,GAAUA,EAAO,QAAQ,IAAID,CAAI,EAClDE,EAAaD,GAAU,CAC3B,MAAME,EAAiBF,EAAO,QAAQ,SACtCE,EAAe,wBAAyB,CACtC,UAAWP,GACLC,EAAUD,CAAK,EACV,CACL,MAAOA,EAAQ,EAAI,EACnB,MAAO,EAAA,EAEAE,EAASF,CAAK,EAChB,CACL,MAAAA,EACA,MAAO,EAAA,EAGF,CACL,MAAO,GACP,QAAS,8BAAA,EAIf,QAAS,EAAA,CACV,EACDO,EAAe,mBAAoB,CACjC,UAAW,UACX,QAAS,EAAA,CACV,CAAA,EAEGC,EAAoBL,EAAO,uBAAuB,EAClDM,EAAYN,EAAO,kBAAkB,EAErCO,EAAe,CAACC,EAAQC,IAAY,CACxC,IAAIC,EAAM,GACV,QAASC,EAAQ,EAAGA,EAAQF,EAASE,IACnCD,GAAOF,EAET,OAAOE,CAAA,EAEHE,KAAiCV,EAAO,QAAQ,YAAcA,EAAO,QAAQ,YAAY,UAAA,EAAc,GACvGW,EAAa,CAACX,EAAQY,IAAU,CACpC,MAAMC,EAAU,IAAMH,EAAqBV,CAAM,EAAI,yBAA2B,gBAC1Ec,EAAW,IAAM,gBAAiBD,EAAA,CAAU,6BAA8BR,EAAa,SAAUO,CAAK,CAAE,UAExGG,EADaX,EAAUJ,CAAM,GACRA,EAAO,QAAQ,YAAcc,IAAaT,EAAa,SAAUO,CAAK,EACjGZ,EAAO,YAAY,SAAS,IAAMA,EAAO,cAAce,CAAI,CAAC,CAAA,EAGxDC,EAAahB,GAAU,CAC3BA,EAAO,WAAW,iBAAkB,IAAM,CACxCW,EAAWX,EAAQ,CAAC,CAAA,CACrB,CAAA,EAGH,IAAIiB,EAAS,QAAQ,KAAK,MAAM,QAAQ,iBAAiB,EAEzD,MAAMC,EAAQlB,GAAU,CACtB,MAAMmB,EAAShB,EAAkBH,CAAM,EACnCmB,EAAS,GACXnB,EAAO,GAAG,UAAWoB,GAAK,CACxB,GAAIA,EAAE,UAAYH,EAAO,KAAO,CAACG,EAAE,qBAAsB,CACvD,GAAIA,EAAE,SACJ,OAEFA,EAAE,eAAA,EACFA,EAAE,yBAAA,EACFT,EAAWX,EAAQmB,CAAM,CAAA,CAC3B,CACD,CACH,EAGIE,KAA4BC,GAAO,CACvC,MAAMC,EAAc,IAAM,CACxBD,EAAI,WAAWtB,EAAO,UAAU,WAAA,CAAY,CAAA,EAE9C,OAAAA,EAAO,GAAG,aAAcuB,CAAW,EACnCA,EAAA,EACO,IAAM,CACXvB,EAAO,IAAI,aAAcuB,CAAW,CAAA,CACtC,EAEIC,EAAWxB,GAAU,CACzB,MAAMyB,EAAW,IAAMzB,EAAO,YAAY,gBAAgB,EAC1DA,EAAO,GAAG,SAAS,UAAU,cAAe,CAC1C,KAAM,eACN,QAAS,oBACT,SAAAyB,EACA,QAASJ,EAAgBrB,CAAM,CAAA,CAChC,EACDA,EAAO,GAAG,SAAS,YAAY,cAAe,CAC5C,KAAM,eACN,KAAM,oBACN,SAAAyB,EACA,QAASJ,EAAgBrB,CAAM,CAAA,CAChC,CAAA,EAGH,IAAI0B,EAAS,IAAM,CACjBlC,EAAS,IAAI,cAAeQ,GAAU,CACpCC,EAAWD,CAAM,EACjBgB,EAAWhB,CAAM,EACjBwB,EAASxB,CAAM,EACfkB,EAAMlB,CAAM,CAAA,CACb,CAAA,EAGH0B,EAAA,CAEJ,GAAA","x_google_ignoreList":[0]}