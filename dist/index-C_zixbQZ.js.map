{"version":3,"file":"index-C_zixbQZ.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/nonbreaking/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const isSimpleType = type => value => typeof value === type;\n    const isBoolean = isSimpleType('boolean');\n    const isNumber = isSimpleType('number');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('nonbreaking_force_tab', {\n        processor: value => {\n          if (isBoolean(value)) {\n            return {\n              value: value ? 3 : 0,\n              valid: true\n            };\n          } else if (isNumber(value)) {\n            return {\n              value,\n              valid: true\n            };\n          } else {\n            return {\n              valid: false,\n              message: 'Must be a boolean or number.'\n            };\n          }\n        },\n        default: false\n      });\n      registerOption('nonbreaking_wrap', {\n        processor: 'boolean',\n        default: true\n      });\n    };\n    const getKeyboardSpaces = option('nonbreaking_force_tab');\n    const wrapNbsps = option('nonbreaking_wrap');\n\n    const stringRepeat = (string, repeats) => {\n      let str = '';\n      for (let index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    const isVisualCharsEnabled = editor => editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    const insertNbsp = (editor, times) => {\n      const classes = () => isVisualCharsEnabled(editor) ? 'mce-nbsp-wrap mce-nbsp' : 'mce-nbsp-wrap';\n      const nbspSpan = () => `<span class=\"${ classes() }\" contenteditable=\"false\">${ stringRepeat('&nbsp;', times) }</span>`;\n      const shouldWrap = wrapNbsps(editor);\n      const html = shouldWrap || editor.plugins.visualchars ? nbspSpan() : stringRepeat('&nbsp;', times);\n      editor.undoManager.transact(() => editor.insertContent(html));\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceNonBreaking', () => {\n        insertNbsp(editor, 1);\n      });\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    const setup = editor => {\n      const spaces = getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', e => {\n          if (e.keyCode === global.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceNonBreaking');\n      editor.ui.registry.addButton('nonbreaking', {\n        icon: 'non-breaking',\n        tooltip: 'Nonbreaking space',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('nonbreaking', {\n        icon: 'non-breaking',\n        text: 'Nonbreaking space',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('nonbreaking', editor => {\n        register$2(editor);\n        register$1(editor);\n        register(editor);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","isSimpleType","type","value","isBoolean","isNumber","option","name","editor","register$2","registerOption","getKeyboardSpaces","wrapNbsps","stringRepeat","string","repeats","str","index","isVisualCharsEnabled","insertNbsp","times","classes","nbspSpan","html","register$1","global","setup","spaces","e","onSetupEditable","api","nodeChanged","register","onAction","Plugin"],"mappings":"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","x_google_ignoreList":[0]}