{"version":3,"file":"index-BCypMMH9.cjs","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/emoticons/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const eq = t => a => t === a;\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n\n    const noop = () => {\n    };\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const map$1 = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const last = (fn, rate) => {\n      let timer = null;\n      const cancel = () => {\n        if (!isNull(timer)) {\n          clearTimeout(timer);\n          timer = null;\n        }\n      };\n      const throttle = (...args) => {\n        cancel();\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      };\n      return {\n        cancel,\n        throttle\n      };\n    };\n\n    const insertEmoticon = (editor, ch) => {\n      editor.insertContent(ch);\n    };\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const map = (obj, f) => {\n      return tupleMap(obj, (x, i) => ({\n        k: i,\n        v: f(x, i)\n      }));\n    };\n    const tupleMap = (obj, f) => {\n      const r = {};\n      each(obj, (x, i) => {\n        const tuple = f(x, i);\n        r[tuple.k] = tuple.v;\n      });\n      return r;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const shallow = (old, nu) => {\n      return nu;\n    };\n    const baseMerge = merger => {\n      return (...objects) => {\n        if (objects.length === 0) {\n          throw new Error(`Can't merge zero objects`);\n        }\n        const ret = {};\n        for (let j = 0; j < objects.length; j++) {\n          const curObject = objects[j];\n          for (const key in curObject) {\n            if (has(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n        return ret;\n      };\n    };\n    const merge = baseMerge(shallow);\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const value = () => {\n      const subject = singleton(noop);\n      const on = f => subject.get().each(f);\n      return {\n        ...subject,\n        on\n      };\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n      const idx = str.indexOf(substr, start);\n      if (idx !== -1) {\n        return isUndefined(end) ? true : idx + substr.length <= end;\n      } else {\n        return false;\n      }\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Resource');\n\n    const DEFAULT_ID = 'tinymce.plugins.emoticons';\n    const option = name => editor => editor.options.get(name);\n    const register$2 = (editor, pluginUrl) => {\n      const registerOption = editor.options.register;\n      registerOption('emoticons_database', {\n        processor: 'string',\n        default: 'emojis'\n      });\n      registerOption('emoticons_database_url', {\n        processor: 'string',\n        default: `${ pluginUrl }/js/${ getEmojiDatabase(editor) }${ editor.suffix }.js`\n      });\n      registerOption('emoticons_database_id', {\n        processor: 'string',\n        default: DEFAULT_ID\n      });\n      registerOption('emoticons_append', {\n        processor: 'object',\n        default: {}\n      });\n      registerOption('emoticons_images_url', {\n        processor: 'string',\n        default: 'https://twemoji.maxcdn.com/v/13.0.1/72x72/'\n      });\n    };\n    const getEmojiDatabase = option('emoticons_database');\n    const getEmojiDatabaseUrl = option('emoticons_database_url');\n    const getEmojiDatabaseId = option('emoticons_database_id');\n    const getAppendedEmoji = option('emoticons_append');\n    const getEmojiImageUrl = option('emoticons_images_url');\n\n    const ALL_CATEGORY = 'All';\n    const categoryNameMap = {\n      symbols: 'Symbols',\n      people: 'People',\n      animals_and_nature: 'Animals and Nature',\n      food_and_drink: 'Food and Drink',\n      activity: 'Activity',\n      travel_and_places: 'Travel and Places',\n      objects: 'Objects',\n      flags: 'Flags',\n      user: 'User Defined'\n    };\n    const translateCategory = (categories, name) => has(categories, name) ? categories[name] : name;\n    const getUserDefinedEmoji = editor => {\n      const userDefinedEmoticons = getAppendedEmoji(editor);\n      return map(userDefinedEmoticons, value => ({\n        keywords: [],\n        category: 'user',\n        ...value\n      }));\n    };\n    const initDatabase = (editor, databaseUrl, databaseId) => {\n      const categories = value();\n      const all = value();\n      const emojiImagesUrl = getEmojiImageUrl(editor);\n      const getEmoji = lib => {\n        if (startsWith(lib.char, '<img')) {\n          return lib.char.replace(/src=\"([^\"]+)\"/, (match, url) => `src=\"${ emojiImagesUrl }${ url }\"`);\n        } else {\n          return lib.char;\n        }\n      };\n      const processEmojis = emojis => {\n        const cats = {};\n        const everything = [];\n        each(emojis, (lib, title) => {\n          const entry = {\n            title,\n            keywords: lib.keywords,\n            char: getEmoji(lib),\n            category: translateCategory(categoryNameMap, lib.category)\n          };\n          const current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n          cats[entry.category] = current.concat([entry]);\n          everything.push(entry);\n        });\n        categories.set(cats);\n        all.set(everything);\n      };\n      editor.on('init', () => {\n        global.load(databaseId, databaseUrl).then(emojis => {\n          const userEmojis = getUserDefinedEmoji(editor);\n          processEmojis(merge(emojis, userEmojis));\n        }, err => {\n          console.log(`Failed to load emojis: ${ err }`);\n          categories.set({});\n          all.set([]);\n        });\n      });\n      const listCategory = category => {\n        if (category === ALL_CATEGORY) {\n          return listAll();\n        }\n        return categories.get().bind(cats => Optional.from(cats[category])).getOr([]);\n      };\n      const listAll = () => all.get().getOr([]);\n      const listCategories = () => [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n      const waitForLoad = () => {\n        if (hasLoaded()) {\n          return Promise.resolve(true);\n        } else {\n          return new Promise((resolve, reject) => {\n            let numRetries = 15;\n            const interval = setInterval(() => {\n              if (hasLoaded()) {\n                clearInterval(interval);\n                resolve(true);\n              } else {\n                numRetries--;\n                if (numRetries < 0) {\n                  console.log('Could not load emojis from url: ' + databaseUrl);\n                  clearInterval(interval);\n                  reject(false);\n                }\n              }\n            }, 100);\n          });\n        }\n      };\n      const hasLoaded = () => categories.isSet() && all.isSet();\n      return {\n        listCategories,\n        hasLoaded,\n        waitForLoad,\n        listAll,\n        listCategory\n      };\n    };\n\n    const emojiMatches = (emoji, lowerCasePattern) => contains(emoji.title.toLowerCase(), lowerCasePattern) || exists(emoji.keywords, k => contains(k.toLowerCase(), lowerCasePattern));\n    const emojisFrom = (list, pattern, maxResults) => {\n      const matches = [];\n      const lowerCasePattern = pattern.toLowerCase();\n      const reachedLimit = maxResults.fold(() => never, max => size => size >= max);\n      for (let i = 0; i < list.length; i++) {\n        if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n          matches.push({\n            value: list[i].char,\n            text: list[i].title,\n            icon: list[i].char\n          });\n          if (reachedLimit(matches.length)) {\n            break;\n          }\n        }\n      }\n      return matches;\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, database) => {\n      const initialState = {\n        pattern: '',\n        results: emojisFrom(database.listAll(), '', Optional.some(300))\n      };\n      const currentTab = Cell(ALL_CATEGORY);\n      const scan = dialogApi => {\n        const dialogData = dialogApi.getData();\n        const category = currentTab.get();\n        const candidates = database.listCategory(category);\n        const results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n        dialogApi.setData({ results });\n      };\n      const updateFilter = last(dialogApi => {\n        scan(dialogApi);\n      }, 200);\n      const searchField = {\n        label: 'Search',\n        type: 'input',\n        name: patternName\n      };\n      const resultsField = {\n        type: 'collection',\n        name: 'results'\n      };\n      const getInitialState = () => {\n        const body = {\n          type: 'tabpanel',\n          tabs: map$1(database.listCategories(), cat => ({\n            title: cat,\n            name: cat,\n            items: [\n              searchField,\n              resultsField\n            ]\n          }))\n        };\n        return {\n          title: 'Emojis',\n          size: 'normal',\n          body,\n          initialData: initialState,\n          onTabChange: (dialogApi, details) => {\n            currentTab.set(details.newTabName);\n            updateFilter.throttle(dialogApi);\n          },\n          onChange: updateFilter.throttle,\n          onAction: (dialogApi, actionData) => {\n            if (actionData.name === 'results') {\n              insertEmoticon(editor, actionData.value);\n              dialogApi.close();\n            }\n          },\n          buttons: [{\n              type: 'cancel',\n              text: 'Close',\n              primary: true\n            }]\n        };\n      };\n      const dialogApi = editor.windowManager.open(getInitialState());\n      dialogApi.focus(patternName);\n      if (!database.hasLoaded()) {\n        dialogApi.block('Loading emojis...');\n        database.waitForLoad().then(() => {\n          dialogApi.redial(getInitialState());\n          updateFilter.throttle(dialogApi);\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        }).catch(_err => {\n          dialogApi.redial({\n            title: 'Emojis',\n            body: {\n              type: 'panel',\n              items: [{\n                  type: 'alertbanner',\n                  level: 'error',\n                  icon: 'warning',\n                  text: 'Could not load emojis'\n                }]\n            },\n            buttons: [{\n                type: 'cancel',\n                text: 'Close',\n                primary: true\n              }],\n            initialData: {\n              pattern: '',\n              results: []\n            }\n          });\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        });\n      }\n    };\n\n    const register$1 = (editor, database) => {\n      editor.addCommand('mceEmoticons', () => open(editor, database));\n    };\n\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addAttributeFilter('data-emoticon', nodes => {\n          each$1(nodes, node => {\n            node.attr('data-mce-resize', 'false');\n            node.attr('data-mce-placeholder', '1');\n          });\n        });\n      });\n    };\n\n    const init = (editor, database) => {\n      editor.ui.registry.addAutocompleter('emoticons', {\n        trigger: ':',\n        columns: 'auto',\n        minChars: 2,\n        fetch: (pattern, maxResults) => database.waitForLoad().then(() => {\n          const candidates = database.listAll();\n          return emojisFrom(candidates, pattern, Optional.some(maxResults));\n        }),\n        onAction: (autocompleteApi, rng, value) => {\n          editor.selection.setRng(rng);\n          editor.insertContent(value);\n          autocompleteApi.hide();\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceEmoticons');\n      editor.ui.registry.addButton('emoticons', {\n        tooltip: 'Emojis',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('emoticons', {\n        text: 'Emojis...',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('emoticons', (editor, pluginUrl) => {\n        register$2(editor, pluginUrl);\n        const databaseUrl = getEmojiDatabaseUrl(editor);\n        const databaseId = getEmojiDatabaseId(editor);\n        const database = initDatabase(editor, databaseUrl, databaseId);\n        register$1(editor, database);\n        register(editor);\n        init(editor, database);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","eq","t","a","isNull","isUndefined","isNullable","isNonNullable","noop","never","value","Optional","tag","onNone","onSome","mapper","binder","predicate","replacement","thunk","message","worker","exists","xs","pred","i","len","x","map$1","f","r","each$1","Cell","initial","v","last","fn","rate","timer","cancel","args","insertEmoticon","editor","ch","keys","hasOwnProperty","each","obj","props","k","map","tupleMap","tuple","has","key","merge","merger","objects","ret","j","curObject","old","nu","singleton","doRevoke","subject","revoke","s","checkRange","str","substr","start","contains","end","idx","startsWith","prefix","global","DEFAULT_ID","option","name","register$2","pluginUrl","registerOption","getEmojiDatabase","getEmojiDatabaseUrl","getEmojiDatabaseId","getAppendedEmoji","getEmojiImageUrl","ALL_CATEGORY","categoryNameMap","translateCategory","categories","getUserDefinedEmoji","userDefinedEmoticons","initDatabase","databaseUrl","databaseId","all","emojiImagesUrl","getEmoji","lib","match","url","processEmojis","emojis","cats","everything","title","entry","current","userEmojis","err","listCategory","category","listAll","listCategories","waitForLoad","hasLoaded","resolve","reject","numRetries","interval","emojiMatches","emoji","lowerCasePattern","emojisFrom","list","pattern","maxResults","matches","reachedLimit","max","size","patternName","open","database","initialState","currentTab","scan","dialogApi","dialogData","candidates","results","updateFilter","searchField","resultsField","getInitialState","cat","details","actionData","_err","register$1","setup","nodes","node","init","autocompleteApi","rng","onSetupEditable","api","nodeChanged","register","onAction","Plugin"],"mappings":"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","x_google_ignoreList":[0]}