{"version":3,"file":"index-1jDOormX.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/insertdatetime/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('insertdatetime_dateformat', {\n        processor: 'string',\n        default: editor.translate('%Y-%m-%d')\n      });\n      registerOption('insertdatetime_timeformat', {\n        processor: 'string',\n        default: editor.translate('%H:%M:%S')\n      });\n      registerOption('insertdatetime_formats', {\n        processor: 'string[]',\n        default: [\n          '%H:%M:%S',\n          '%Y-%m-%d',\n          '%I:%M:%S %p',\n          '%D'\n        ]\n      });\n      registerOption('insertdatetime_element', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const getDateFormat = option('insertdatetime_dateformat');\n    const getTimeFormat = option('insertdatetime_timeformat');\n    const getFormats = option('insertdatetime_formats');\n    const shouldInsertTimeElement = option('insertdatetime_element');\n    const getDefaultDateTime = editor => {\n      const formats = getFormats(editor);\n      return formats.length > 0 ? formats[0] : getTimeFormat(editor);\n    };\n\n    const daysShort = 'Sun Mon Tue Wed Thu Fri Sat Sun'.split(' ');\n    const daysLong = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday'.split(' ');\n    const monthsShort = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\n    const monthsLong = 'January February March April May June July August September October November December'.split(' ');\n    const addZeros = (value, len) => {\n      value = '' + value;\n      if (value.length < len) {\n        for (let i = 0; i < len - value.length; i++) {\n          value = '0' + value;\n        }\n      }\n      return value;\n    };\n    const getDateTime = (editor, fmt, date = new Date()) => {\n      fmt = fmt.replace('%D', '%m/%d/%Y');\n      fmt = fmt.replace('%r', '%I:%M:%S %p');\n      fmt = fmt.replace('%Y', '' + date.getFullYear());\n      fmt = fmt.replace('%y', '' + date.getYear());\n      fmt = fmt.replace('%m', addZeros(date.getMonth() + 1, 2));\n      fmt = fmt.replace('%d', addZeros(date.getDate(), 2));\n      fmt = fmt.replace('%H', '' + addZeros(date.getHours(), 2));\n      fmt = fmt.replace('%M', '' + addZeros(date.getMinutes(), 2));\n      fmt = fmt.replace('%S', '' + addZeros(date.getSeconds(), 2));\n      fmt = fmt.replace('%I', '' + ((date.getHours() + 11) % 12 + 1));\n      fmt = fmt.replace('%p', '' + (date.getHours() < 12 ? 'AM' : 'PM'));\n      fmt = fmt.replace('%B', '' + editor.translate(monthsLong[date.getMonth()]));\n      fmt = fmt.replace('%b', '' + editor.translate(monthsShort[date.getMonth()]));\n      fmt = fmt.replace('%A', '' + editor.translate(daysLong[date.getDay()]));\n      fmt = fmt.replace('%a', '' + editor.translate(daysShort[date.getDay()]));\n      fmt = fmt.replace('%%', '%');\n      return fmt;\n    };\n    const updateElement = (editor, timeElm, computerTime, userTime) => {\n      const newTimeElm = editor.dom.create('time', { datetime: computerTime }, userTime);\n      editor.dom.replace(newTimeElm, timeElm);\n      editor.selection.select(newTimeElm, true);\n      editor.selection.collapse(false);\n    };\n    const insertDateTime = (editor, format) => {\n      if (shouldInsertTimeElement(editor)) {\n        const userTime = getDateTime(editor, format);\n        let computerTime;\n        if (/%[HMSIp]/.test(format)) {\n          computerTime = getDateTime(editor, '%Y-%m-%dT%H:%M');\n        } else {\n          computerTime = getDateTime(editor, '%Y-%m-%d');\n        }\n        const timeElm = editor.dom.getParent(editor.selection.getStart(), 'time');\n        if (timeElm) {\n          updateElement(editor, timeElm, computerTime, userTime);\n        } else {\n          editor.insertContent('<time datetime=\"' + computerTime + '\">' + userTime + '</time>');\n        }\n      } else {\n        editor.insertContent(getDateTime(editor, format));\n      }\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceInsertDate', (_ui, value) => {\n        insertDateTime(editor, value !== null && value !== void 0 ? value : getDateFormat(editor));\n      });\n      editor.addCommand('mceInsertTime', (_ui, value) => {\n        insertDateTime(editor, value !== null && value !== void 0 ? value : getTimeFormat(editor));\n      });\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const formats = getFormats(editor);\n      const defaultFormat = Cell(getDefaultDateTime(editor));\n      const insertDateTime = format => editor.execCommand('mceInsertDate', false, format);\n      editor.ui.registry.addSplitButton('insertdatetime', {\n        icon: 'insert-time',\n        tooltip: 'Insert date/time',\n        select: value => value === defaultFormat.get(),\n        fetch: done => {\n          done(global.map(formats, format => ({\n            type: 'choiceitem',\n            text: getDateTime(editor, format),\n            value: format\n          })));\n        },\n        onAction: _api => {\n          insertDateTime(defaultFormat.get());\n        },\n        onItemAction: (_api, value) => {\n          defaultFormat.set(value);\n          insertDateTime(value);\n        },\n        onSetup: onSetupEditable(editor)\n      });\n      const makeMenuItemHandler = format => () => {\n        defaultFormat.set(format);\n        insertDateTime(format);\n      };\n      editor.ui.registry.addNestedMenuItem('insertdatetime', {\n        icon: 'insert-time',\n        text: 'Date/time',\n        getSubmenuItems: () => global.map(formats, format => ({\n          type: 'menuitem',\n          text: getDateTime(editor, format),\n          onAction: makeMenuItemHandler(format)\n        })),\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('insertdatetime', editor => {\n        register$2(editor);\n        register$1(editor);\n        register(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","option","name","editor","register$2","registerOption","getDateFormat","getTimeFormat","getFormats","shouldInsertTimeElement","getDefaultDateTime","formats","daysShort","daysLong","monthsShort","monthsLong","addZeros","value","len","i","getDateTime","fmt","date","updateElement","timeElm","computerTime","userTime","newTimeElm","insertDateTime","format","register$1","_ui","Cell","initial","v","global","onSetupEditable","api","nodeChanged","register","defaultFormat","done","_api","makeMenuItemHandler","Plugin"],"mappings":"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","x_google_ignoreList":[0]}