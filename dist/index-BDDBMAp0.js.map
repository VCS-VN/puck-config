{"version":3,"file":"index-BDDBMAp0.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/table/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$3 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType$1 = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const eq$1 = t => a => t === a;\n    const isString = isType$1('string');\n    const isArray = isType$1('array');\n    const isBoolean = isSimpleType('boolean');\n    const isUndefined = eq$1(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n    const isNumber = isSimpleType('number');\n\n    const noop = () => {\n    };\n    const compose1 = (fbc, fab) => a => fbc(fab(a));\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const identity = x => {\n      return x;\n    };\n    const tripleEquals = (a, b) => {\n      return a === b;\n    };\n    function curry(fn, ...initialArgs) {\n      return (...restArgs) => {\n        const all = initialArgs.concat(restArgs);\n        return fn.apply(null, all);\n      };\n    }\n    const call = f => {\n      f();\n    };\n    const never = constant(false);\n    const always = constant(true);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each$1 = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const objAcc = r => (x, i) => {\n      r[i] = x;\n    };\n    const internalFilter = (obj, pred, onTrue, onFalse) => {\n      each$1(obj, (x, i) => {\n        (pred(x, i) ? onTrue : onFalse)(x, i);\n      });\n    };\n    const filter$1 = (obj, pred) => {\n      const t = {};\n      internalFilter(obj, pred, objAcc(t), noop);\n      return t;\n    };\n    const mapToArray = (obj, f) => {\n      const r = [];\n      each$1(obj, (value, name) => {\n        r.push(f(value, name));\n      });\n      return r;\n    };\n    const values = obj => {\n      return mapToArray(obj, identity);\n    };\n    const size = obj => {\n      return keys(obj).length;\n    };\n    const get$4 = (obj, key) => {\n      return has(obj, key) ? Optional.from(obj[key]) : Optional.none();\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n    const hasNonNullableKey = (obj, key) => has(obj, key) && obj[key] !== undefined && obj[key] !== null;\n    const isEmpty$1 = r => {\n      for (const x in r) {\n        if (hasOwnProperty.call(r, x)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    const nativeIndexOf = Array.prototype.indexOf;\n    const nativePush = Array.prototype.push;\n    const rawIndexOf = (ts, t) => nativeIndexOf.call(ts, t);\n    const contains = (xs, x) => rawIndexOf(xs, x) > -1;\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const range = (num, f) => {\n      const r = [];\n      for (let i = 0; i < num; i++) {\n        r.push(f(i));\n      }\n      return r;\n    };\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const eachr = (xs, f) => {\n      for (let i = xs.length - 1; i >= 0; i--) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const partition = (xs, pred) => {\n      const pass = [];\n      const fail = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        const arr = pred(x, i) ? pass : fail;\n        arr.push(x);\n      }\n      return {\n        pass,\n        fail\n      };\n    };\n    const filter = (xs, pred) => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          r.push(x);\n        }\n      }\n      return r;\n    };\n    const foldr = (xs, f, acc) => {\n      eachr(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const foldl = (xs, f, acc) => {\n      each(xs, (x, i) => {\n        acc = f(acc, x, i);\n      });\n      return acc;\n    };\n    const findUntil = (xs, pred, until) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const find = (xs, pred) => {\n      return findUntil(xs, pred, never);\n    };\n    const flatten$1 = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const bind = (xs, f) => flatten$1(map(xs, f));\n    const forall = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        const x = xs[i];\n        if (pred(x, i) !== true) {\n          return false;\n        }\n      }\n      return true;\n    };\n    const mapToObject = (xs, f) => {\n      const r = {};\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        r[String(x)] = f(x, i);\n      }\n      return r;\n    };\n    const get$3 = (xs, i) => i >= 0 && i < xs.length ? Optional.some(xs[i]) : Optional.none();\n    const head = xs => get$3(xs, 0);\n    const last = xs => get$3(xs, xs.length - 1);\n    const findMap = (arr, f) => {\n      for (let i = 0; i < arr.length; i++) {\n        const r = f(arr[i], i);\n        if (r.isSome()) {\n          return r;\n        }\n      }\n      return Optional.none();\n    };\n\n    const COMMENT = 8;\n    const DOCUMENT = 9;\n    const DOCUMENT_FRAGMENT = 11;\n    const ELEMENT = 1;\n    const TEXT = 3;\n\n    const fromHtml = (html, scope) => {\n      const doc = scope || document;\n      const div = doc.createElement('div');\n      div.innerHTML = html;\n      if (!div.hasChildNodes() || div.childNodes.length > 1) {\n        const message = 'HTML does not have a single root node';\n        console.error(message, html);\n        throw new Error(message);\n      }\n      return fromDom$1(div.childNodes[0]);\n    };\n    const fromTag = (tag, scope) => {\n      const doc = scope || document;\n      const node = doc.createElement(tag);\n      return fromDom$1(node);\n    };\n    const fromText = (text, scope) => {\n      const doc = scope || document;\n      const node = doc.createTextNode(text);\n      return fromDom$1(node);\n    };\n    const fromDom$1 = node => {\n      if (node === null || node === undefined) {\n        throw new Error('Node cannot be null or undefined');\n      }\n      return { dom: node };\n    };\n    const fromPoint = (docElm, x, y) => Optional.from(docElm.dom.elementFromPoint(x, y)).map(fromDom$1);\n    const SugarElement = {\n      fromHtml,\n      fromTag,\n      fromText,\n      fromDom: fromDom$1,\n      fromPoint\n    };\n\n    const is$2 = (element, selector) => {\n      const dom = element.dom;\n      if (dom.nodeType !== ELEMENT) {\n        return false;\n      } else {\n        const elem = dom;\n        if (elem.matches !== undefined) {\n          return elem.matches(selector);\n        } else if (elem.msMatchesSelector !== undefined) {\n          return elem.msMatchesSelector(selector);\n        } else if (elem.webkitMatchesSelector !== undefined) {\n          return elem.webkitMatchesSelector(selector);\n        } else if (elem.mozMatchesSelector !== undefined) {\n          return elem.mozMatchesSelector(selector);\n        } else {\n          throw new Error('Browser lacks native selectors');\n        }\n      }\n    };\n    const bypassSelector = dom => dom.nodeType !== ELEMENT && dom.nodeType !== DOCUMENT && dom.nodeType !== DOCUMENT_FRAGMENT || dom.childElementCount === 0;\n    const all$1 = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? [] : map(base.querySelectorAll(selector), SugarElement.fromDom);\n    };\n    const one = (selector, scope) => {\n      const base = scope === undefined ? document : scope.dom;\n      return bypassSelector(base) ? Optional.none() : Optional.from(base.querySelector(selector)).map(SugarElement.fromDom);\n    };\n\n    const eq = (e1, e2) => e1.dom === e2.dom;\n    const is$1 = is$2;\n\n    typeof window !== 'undefined' ? window : Function('return this;')();\n\n    const name = element => {\n      const r = element.dom.nodeName;\n      return r.toLowerCase();\n    };\n    const type = element => element.dom.nodeType;\n    const isType = t => element => type(element) === t;\n    const isComment = element => type(element) === COMMENT || name(element) === '#comment';\n    const isElement = isType(ELEMENT);\n    const isText = isType(TEXT);\n    const isDocument = isType(DOCUMENT);\n    const isDocumentFragment = isType(DOCUMENT_FRAGMENT);\n    const isTag = tag => e => isElement(e) && name(e) === tag;\n\n    const owner = element => SugarElement.fromDom(element.dom.ownerDocument);\n    const documentOrOwner = dos => isDocument(dos) ? dos : owner(dos);\n    const parent = element => Optional.from(element.dom.parentNode).map(SugarElement.fromDom);\n    const parents = (element, isRoot) => {\n      const stop = isFunction(isRoot) ? isRoot : never;\n      let dom = element.dom;\n      const ret = [];\n      while (dom.parentNode !== null && dom.parentNode !== undefined) {\n        const rawParent = dom.parentNode;\n        const p = SugarElement.fromDom(rawParent);\n        ret.push(p);\n        if (stop(p) === true) {\n          break;\n        } else {\n          dom = rawParent;\n        }\n      }\n      return ret;\n    };\n    const prevSibling = element => Optional.from(element.dom.previousSibling).map(SugarElement.fromDom);\n    const nextSibling = element => Optional.from(element.dom.nextSibling).map(SugarElement.fromDom);\n    const children$3 = element => map(element.dom.childNodes, SugarElement.fromDom);\n    const child$3 = (element, index) => {\n      const cs = element.dom.childNodes;\n      return Optional.from(cs[index]).map(SugarElement.fromDom);\n    };\n    const firstChild = element => child$3(element, 0);\n\n    const isShadowRoot = dos => isDocumentFragment(dos) && isNonNullable(dos.dom.host);\n    const supported = isFunction(Element.prototype.attachShadow) && isFunction(Node.prototype.getRootNode);\n    const getRootNode = supported ? e => SugarElement.fromDom(e.dom.getRootNode()) : documentOrOwner;\n    const getShadowRoot = e => {\n      const r = getRootNode(e);\n      return isShadowRoot(r) ? Optional.some(r) : Optional.none();\n    };\n    const getShadowHost = e => SugarElement.fromDom(e.dom.host);\n\n    const inBody = element => {\n      const dom = isText(element) ? element.dom.parentNode : element.dom;\n      if (dom === undefined || dom === null || dom.ownerDocument === null) {\n        return false;\n      }\n      const doc = dom.ownerDocument;\n      return getShadowRoot(SugarElement.fromDom(dom)).fold(() => doc.body.contains(dom), compose1(inBody, getShadowHost));\n    };\n\n    var ClosestOrAncestor = (is, ancestor, scope, a, isRoot) => {\n      if (is(scope, a)) {\n        return Optional.some(scope);\n      } else if (isFunction(isRoot) && isRoot(scope)) {\n        return Optional.none();\n      } else {\n        return ancestor(scope, a, isRoot);\n      }\n    };\n\n    const ancestor$1 = (scope, predicate, isRoot) => {\n      let element = scope.dom;\n      const stop = isFunction(isRoot) ? isRoot : never;\n      while (element.parentNode) {\n        element = element.parentNode;\n        const el = SugarElement.fromDom(element);\n        if (predicate(el)) {\n          return Optional.some(el);\n        } else if (stop(el)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const closest$2 = (scope, predicate, isRoot) => {\n      const is = (s, test) => test(s);\n      return ClosestOrAncestor(is, ancestor$1, scope, predicate, isRoot);\n    };\n    const child$2 = (scope, predicate) => {\n      const pred = node => predicate(SugarElement.fromDom(node));\n      const result = find(scope.dom.childNodes, pred);\n      return result.map(SugarElement.fromDom);\n    };\n\n    const ancestor = (scope, selector, isRoot) => ancestor$1(scope, e => is$2(e, selector), isRoot);\n    const child$1 = (scope, selector) => child$2(scope, e => is$2(e, selector));\n    const descendant = (scope, selector) => one(selector, scope);\n    const closest$1 = (scope, selector, isRoot) => {\n      const is = (element, selector) => is$2(element, selector);\n      return ClosestOrAncestor(is, ancestor, scope, selector, isRoot);\n    };\n\n    const closest = target => closest$1(target, '[contenteditable]');\n    const isEditable = (element, assumeEditable = false) => {\n      if (inBody(element)) {\n        return element.dom.isContentEditable;\n      } else {\n        return closest(element).fold(constant(assumeEditable), editable => getRaw$1(editable) === 'true');\n      }\n    };\n    const getRaw$1 = element => element.dom.contentEditable;\n\n    const getNodeName = elm => elm.nodeName.toLowerCase();\n    const getBody = editor => SugarElement.fromDom(editor.getBody());\n    const getIsRoot = editor => element => eq(element, getBody(editor));\n    const removePxSuffix = size => size ? size.replace(/px$/, '') : '';\n    const addPxSuffix = size => /^\\d+(\\.\\d+)?$/.test(size) ? size + 'px' : size;\n    const getSelectionStart = editor => SugarElement.fromDom(editor.selection.getStart());\n    const getSelectionEnd = editor => SugarElement.fromDom(editor.selection.getEnd());\n    const isInEditableContext = cell => closest$2(cell, isTag('table')).forall(isEditable);\n\n    const children$2 = (scope, predicate) => filter(children$3(scope), predicate);\n    const descendants$1 = (scope, predicate) => {\n      let result = [];\n      each(children$3(scope), x => {\n        if (predicate(x)) {\n          result = result.concat([x]);\n        }\n        result = result.concat(descendants$1(x, predicate));\n      });\n      return result;\n    };\n\n    const children$1 = (scope, selector) => children$2(scope, e => is$2(e, selector));\n    const descendants = (scope, selector) => all$1(selector, scope);\n\n    const rawSet = (dom, key, value) => {\n      if (isString(value) || isBoolean(value) || isNumber(value)) {\n        dom.setAttribute(key, value + '');\n      } else {\n        console.error('Invalid call to Attribute.set. Key ', key, ':: Value ', value, ':: Element ', dom);\n        throw new Error('Attribute value was not simple');\n      }\n    };\n    const set$2 = (element, key, value) => {\n      rawSet(element.dom, key, value);\n    };\n    const setAll = (element, attrs) => {\n      const dom = element.dom;\n      each$1(attrs, (v, k) => {\n        rawSet(dom, k, v);\n      });\n    };\n    const get$2 = (element, key) => {\n      const v = element.dom.getAttribute(key);\n      return v === null ? undefined : v;\n    };\n    const getOpt = (element, key) => Optional.from(get$2(element, key));\n    const remove$2 = (element, key) => {\n      element.dom.removeAttribute(key);\n    };\n    const clone = element => foldl(element.dom.attributes, (acc, attr) => {\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n\n    const is = (lhs, rhs, comparator = tripleEquals) => lhs.exists(left => comparator(left, rhs));\n    const cat = arr => {\n      const r = [];\n      const push = x => {\n        r.push(x);\n      };\n      for (let i = 0; i < arr.length; i++) {\n        arr[i].each(push);\n      }\n      return r;\n    };\n    const lift2 = (oa, ob, f) => oa.isSome() && ob.isSome() ? Optional.some(f(oa.getOrDie(), ob.getOrDie())) : Optional.none();\n    const flatten = oot => oot.bind(identity);\n    const someIf = (b, a) => b ? Optional.some(a) : Optional.none();\n\n    const removeFromStart = (str, numChars) => {\n      return str.substring(numChars);\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const removeLeading = (str, prefix) => {\n      return startsWith(str, prefix) ? removeFromStart(str, prefix.length) : str;\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n    const blank = r => s => s.replace(r, '');\n    const trim = blank(/^\\s+|\\s+$/g);\n    const isNotEmpty = s => s.length > 0;\n    const isEmpty = s => !isNotEmpty(s);\n    const toInt = (value, radix = 10) => {\n      const num = parseInt(value, radix);\n      return isNaN(num) ? Optional.none() : Optional.some(num);\n    };\n    const toFloat = value => {\n      const num = parseFloat(value);\n      return isNaN(num) ? Optional.none() : Optional.some(num);\n    };\n\n    const isSupported = dom => dom.style !== undefined && isFunction(dom.style.getPropertyValue);\n\n    const internalSet = (dom, property, value) => {\n      if (!isString(value)) {\n        console.error('Invalid call to CSS.set. Property ', property, ':: Value ', value, ':: Element ', dom);\n        throw new Error('CSS value must be a string: ' + value);\n      }\n      if (isSupported(dom)) {\n        dom.style.setProperty(property, value);\n      }\n    };\n    const internalRemove = (dom, property) => {\n      if (isSupported(dom)) {\n        dom.style.removeProperty(property);\n      }\n    };\n    const set$1 = (element, property, value) => {\n      const dom = element.dom;\n      internalSet(dom, property, value);\n    };\n    const get$1 = (element, property) => {\n      const dom = element.dom;\n      const styles = window.getComputedStyle(dom);\n      const r = styles.getPropertyValue(property);\n      return r === '' && !inBody(element) ? getUnsafeProperty(dom, property) : r;\n    };\n    const getUnsafeProperty = (dom, property) => isSupported(dom) ? dom.style.getPropertyValue(property) : '';\n    const getRaw = (element, property) => {\n      const dom = element.dom;\n      const raw = getUnsafeProperty(dom, property);\n      return Optional.from(raw).filter(r => r.length > 0);\n    };\n    const remove$1 = (element, property) => {\n      const dom = element.dom;\n      internalRemove(dom, property);\n      if (is(getOpt(element, 'style').map(trim), '')) {\n        remove$2(element, 'style');\n      }\n    };\n\n    const getAttrValue = (cell, name, fallback = 0) => getOpt(cell, name).map(value => parseInt(value, 10)).getOr(fallback);\n\n    const firstLayer = (scope, selector) => {\n      return filterFirstLayer(scope, selector, always);\n    };\n    const filterFirstLayer = (scope, selector, predicate) => {\n      return bind(children$3(scope), x => {\n        if (is$2(x, selector)) {\n          return predicate(x) ? [x] : [];\n        } else {\n          return filterFirstLayer(x, selector, predicate);\n        }\n      });\n    };\n\n    const validSectionList = [\n      'tfoot',\n      'thead',\n      'tbody',\n      'colgroup'\n    ];\n    const isValidSection = parentName => contains(validSectionList, parentName);\n    const grid = (rows, columns) => ({\n      rows,\n      columns\n    });\n    const detail = (element, rowspan, colspan) => ({\n      element,\n      rowspan,\n      colspan\n    });\n    const extended = (element, rowspan, colspan, row, column, isLocked) => ({\n      element,\n      rowspan,\n      colspan,\n      row,\n      column,\n      isLocked\n    });\n    const rowdetail = (element, cells, section) => ({\n      element,\n      cells,\n      section\n    });\n    const bounds = (startRow, startCol, finishRow, finishCol) => ({\n      startRow,\n      startCol,\n      finishRow,\n      finishCol\n    });\n    const columnext = (element, colspan, column) => ({\n      element,\n      colspan,\n      column\n    });\n    const colgroup = (element, columns) => ({\n      element,\n      columns\n    });\n\n    const lookup = (tags, element, isRoot = never) => {\n      if (isRoot(element)) {\n        return Optional.none();\n      }\n      if (contains(tags, name(element))) {\n        return Optional.some(element);\n      }\n      const isRootOrUpperTable = elm => is$2(elm, 'table') || isRoot(elm);\n      return ancestor(element, tags.join(','), isRootOrUpperTable);\n    };\n    const cell = (element, isRoot) => lookup([\n      'td',\n      'th'\n    ], element, isRoot);\n    const cells = ancestor => firstLayer(ancestor, 'th,td');\n    const columns = ancestor => {\n      if (is$2(ancestor, 'colgroup')) {\n        return children$1(ancestor, 'col');\n      } else {\n        return bind(columnGroups(ancestor), columnGroup => children$1(columnGroup, 'col'));\n      }\n    };\n    const table = (element, isRoot) => closest$1(element, 'table', isRoot);\n    const rows = ancestor => firstLayer(ancestor, 'tr');\n    const columnGroups = ancestor => table(ancestor).fold(constant([]), table => children$1(table, 'colgroup'));\n\n    const fromRowsOrColGroups = (elems, getSection) => map(elems, row => {\n      if (name(row) === 'colgroup') {\n        const cells = map(columns(row), column => {\n          const colspan = getAttrValue(column, 'span', 1);\n          return detail(column, 1, colspan);\n        });\n        return rowdetail(row, cells, 'colgroup');\n      } else {\n        const cells$1 = map(cells(row), cell => {\n          const rowspan = getAttrValue(cell, 'rowspan', 1);\n          const colspan = getAttrValue(cell, 'colspan', 1);\n          return detail(cell, rowspan, colspan);\n        });\n        return rowdetail(row, cells$1, getSection(row));\n      }\n    });\n    const getParentSection = group => parent(group).map(parent => {\n      const parentName = name(parent);\n      return isValidSection(parentName) ? parentName : 'tbody';\n    }).getOr('tbody');\n    const fromTable$1 = table => {\n      const rows$1 = rows(table);\n      const columnGroups$1 = columnGroups(table);\n      const elems = [\n        ...columnGroups$1,\n        ...rows$1\n      ];\n      return fromRowsOrColGroups(elems, getParentSection);\n    };\n\n    const LOCKED_COL_ATTR = 'data-snooker-locked-cols';\n    const getLockedColumnsFromTable = table => getOpt(table, LOCKED_COL_ATTR).bind(lockedColStr => Optional.from(lockedColStr.match(/\\d+/g))).map(lockedCols => mapToObject(lockedCols, always));\n\n    const key = (row, column) => {\n      return row + ',' + column;\n    };\n    const getAt = (warehouse, row, column) => Optional.from(warehouse.access[key(row, column)]);\n    const findItem = (warehouse, item, comparator) => {\n      const filtered = filterItems(warehouse, detail => {\n        return comparator(item, detail.element);\n      });\n      return filtered.length > 0 ? Optional.some(filtered[0]) : Optional.none();\n    };\n    const filterItems = (warehouse, predicate) => {\n      const all = bind(warehouse.all, r => {\n        return r.cells;\n      });\n      return filter(all, predicate);\n    };\n    const generateColumns = rowData => {\n      const columnsGroup = {};\n      let index = 0;\n      each(rowData.cells, column => {\n        const colspan = column.colspan;\n        range(colspan, columnIndex => {\n          const colIndex = index + columnIndex;\n          columnsGroup[colIndex] = columnext(column.element, colspan, colIndex);\n        });\n        index += colspan;\n      });\n      return columnsGroup;\n    };\n    const generate$1 = list => {\n      const access = {};\n      const cells = [];\n      const tableOpt = head(list).map(rowData => rowData.element).bind(table);\n      const lockedColumns = tableOpt.bind(getLockedColumnsFromTable).getOr({});\n      let maxRows = 0;\n      let maxColumns = 0;\n      let rowCount = 0;\n      const {\n        pass: colgroupRows,\n        fail: rows\n      } = partition(list, rowData => rowData.section === 'colgroup');\n      each(rows, rowData => {\n        const currentRow = [];\n        each(rowData.cells, rowCell => {\n          let start = 0;\n          while (access[key(rowCount, start)] !== undefined) {\n            start++;\n          }\n          const isLocked = hasNonNullableKey(lockedColumns, start.toString());\n          const current = extended(rowCell.element, rowCell.rowspan, rowCell.colspan, rowCount, start, isLocked);\n          for (let occupiedColumnPosition = 0; occupiedColumnPosition < rowCell.colspan; occupiedColumnPosition++) {\n            for (let occupiedRowPosition = 0; occupiedRowPosition < rowCell.rowspan; occupiedRowPosition++) {\n              const rowPosition = rowCount + occupiedRowPosition;\n              const columnPosition = start + occupiedColumnPosition;\n              const newpos = key(rowPosition, columnPosition);\n              access[newpos] = current;\n              maxColumns = Math.max(maxColumns, columnPosition + 1);\n            }\n          }\n          currentRow.push(current);\n        });\n        maxRows++;\n        cells.push(rowdetail(rowData.element, currentRow, rowData.section));\n        rowCount++;\n      });\n      const {columns, colgroups} = last(colgroupRows).map(rowData => {\n        const columns = generateColumns(rowData);\n        const colgroup$1 = colgroup(rowData.element, values(columns));\n        return {\n          colgroups: [colgroup$1],\n          columns\n        };\n      }).getOrThunk(() => ({\n        colgroups: [],\n        columns: {}\n      }));\n      const grid$1 = grid(maxRows, maxColumns);\n      return {\n        grid: grid$1,\n        access,\n        all: cells,\n        columns,\n        colgroups\n      };\n    };\n    const fromTable = table => {\n      const list = fromTable$1(table);\n      return generate$1(list);\n    };\n    const justCells = warehouse => bind(warehouse.all, w => w.cells);\n    const justColumns = warehouse => values(warehouse.columns);\n    const hasColumns = warehouse => keys(warehouse.columns).length > 0;\n    const getColumnAt = (warehouse, columnIndex) => Optional.from(warehouse.columns[columnIndex]);\n    const Warehouse = {\n      fromTable,\n      generate: generate$1,\n      getAt,\n      findItem,\n      filterItems,\n      justCells,\n      justColumns,\n      hasColumns,\n      getColumnAt\n    };\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const getTDTHOverallStyle = (dom, elm, name) => {\n      const cells = dom.select('td,th', elm);\n      let firstChildStyle;\n      for (let i = 0; i < cells.length; i++) {\n        const currentStyle = dom.getStyle(cells[i], name);\n        if (isUndefined(firstChildStyle)) {\n          firstChildStyle = currentStyle;\n        }\n        if (firstChildStyle !== currentStyle) {\n          return '';\n        }\n      }\n      return firstChildStyle;\n    };\n    const setAlign = (editor, elm, name) => {\n      global$2.each('left center right'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('align' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('align' + name, {}, elm);\n      }\n    };\n    const setVAlign = (editor, elm, name) => {\n      global$2.each('top middle bottom'.split(' '), align => {\n        if (align !== name) {\n          editor.formatter.remove('valign' + align, {}, elm);\n        }\n      });\n      if (name) {\n        editor.formatter.apply('valign' + name, {}, elm);\n      }\n    };\n\n    const fireTableModified = (editor, table, data) => {\n      editor.dispatch('TableModified', {\n        ...data,\n        table\n      });\n    };\n\n    const toNumber = (px, fallback) => toFloat(px).getOr(fallback);\n    const getProp = (element, name, fallback) => toNumber(get$1(element, name), fallback);\n    const calcContentBoxSize = (element, size, upper, lower) => {\n      const paddingUpper = getProp(element, `padding-${ upper }`, 0);\n      const paddingLower = getProp(element, `padding-${ lower }`, 0);\n      const borderUpper = getProp(element, `border-${ upper }-width`, 0);\n      const borderLower = getProp(element, `border-${ lower }-width`, 0);\n      return size - paddingUpper - paddingLower - borderUpper - borderLower;\n    };\n    const getCalculatedWidth = (element, boxSizing) => {\n      const dom = element.dom;\n      const width = dom.getBoundingClientRect().width || dom.offsetWidth;\n      return boxSizing === 'border-box' ? width : calcContentBoxSize(element, width, 'left', 'right');\n    };\n    const getInnerWidth = element => getCalculatedWidth(element, 'content-box');\n\n    const getInner = getInnerWidth;\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    const defaultTableToolbar = 'tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol';\n    const defaultCellBorderWidths = range(5, i => {\n      const size = `${ i + 1 }px`;\n      return {\n        title: size,\n        value: size\n      };\n    });\n    const defaultCellBorderStyles = map([\n      'Solid',\n      'Dotted',\n      'Dashed',\n      'Double',\n      'Groove',\n      'Ridge',\n      'Inset',\n      'Outset',\n      'None',\n      'Hidden'\n    ], type => {\n      return {\n        title: type,\n        value: type.toLowerCase()\n      };\n    });\n    const defaultWidth = '100%';\n    const getPixelForcedWidth = editor => {\n      var _a;\n      const dom = editor.dom;\n      const parentBlock = (_a = dom.getParent(editor.selection.getStart(), dom.isBlock)) !== null && _a !== void 0 ? _a : editor.getBody();\n      return getInner(SugarElement.fromDom(parentBlock)) + 'px';\n    };\n    const determineDefaultStyles = (editor, defaultStyles) => {\n      if (isResponsiveForced(editor) || !shouldStyleWithCss(editor)) {\n        return defaultStyles;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultStyles,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultStyles,\n          width: defaultWidth\n        };\n      }\n    };\n    const determineDefaultAttributes = (editor, defaultAttributes) => {\n      if (isResponsiveForced(editor) || shouldStyleWithCss(editor)) {\n        return defaultAttributes;\n      } else if (isPixelsForced(editor)) {\n        return {\n          ...defaultAttributes,\n          width: getPixelForcedWidth(editor)\n        };\n      } else {\n        return {\n          ...defaultAttributes,\n          width: defaultWidth\n        };\n      }\n    };\n    const option = name => editor => editor.options.get(name);\n    const register = editor => {\n      const registerOption = editor.options.register;\n      registerOption('table_border_widths', {\n        processor: 'object[]',\n        default: defaultCellBorderWidths\n      });\n      registerOption('table_border_styles', {\n        processor: 'object[]',\n        default: defaultCellBorderStyles\n      });\n      registerOption('table_cell_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_row_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_advtab', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_appearance_options', {\n        processor: 'boolean',\n        default: true\n      });\n      registerOption('table_grid', {\n        processor: 'boolean',\n        default: !global$1.deviceType.isTouch()\n      });\n      registerOption('table_cell_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_row_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_class_list', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_toolbar', {\n        processor: 'string',\n        default: defaultTableToolbar\n      });\n      registerOption('table_background_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n      registerOption('table_border_color_map', {\n        processor: 'object[]',\n        default: []\n      });\n    };\n    const getTableSizingMode = option('table_sizing_mode');\n    const getTableBorderWidths = option('table_border_widths');\n    const getTableBorderStyles = option('table_border_styles');\n    const hasAdvancedCellTab = option('table_cell_advtab');\n    const hasAdvancedRowTab = option('table_row_advtab');\n    const hasAdvancedTableTab = option('table_advtab');\n    const hasAppearanceOptions = option('table_appearance_options');\n    const hasTableGrid = option('table_grid');\n    const shouldStyleWithCss = option('table_style_by_css');\n    const getCellClassList = option('table_cell_class_list');\n    const getRowClassList = option('table_row_class_list');\n    const getTableClassList = option('table_class_list');\n    const getToolbar = option('table_toolbar');\n    const getTableBackgroundColorMap = option('table_background_color_map');\n    const getTableBorderColorMap = option('table_border_color_map');\n    const isPixelsForced = editor => getTableSizingMode(editor) === 'fixed';\n    const isResponsiveForced = editor => getTableSizingMode(editor) === 'responsive';\n    const getDefaultStyles = editor => {\n      const options = editor.options;\n      const defaultStyles = options.get('table_default_styles');\n      return options.isSet('table_default_styles') ? defaultStyles : determineDefaultStyles(editor, defaultStyles);\n    };\n    const getDefaultAttributes = editor => {\n      const options = editor.options;\n      const defaultAttributes = options.get('table_default_attributes');\n      return options.isSet('table_default_attributes') ? defaultAttributes : determineDefaultAttributes(editor, defaultAttributes);\n    };\n\n    const isWithin = (bounds, detail) => {\n      return detail.column >= bounds.startCol && detail.column + detail.colspan - 1 <= bounds.finishCol && detail.row >= bounds.startRow && detail.row + detail.rowspan - 1 <= bounds.finishRow;\n    };\n    const isRectangular = (warehouse, bounds) => {\n      let isRect = true;\n      const detailIsWithin = curry(isWithin, bounds);\n      for (let i = bounds.startRow; i <= bounds.finishRow; i++) {\n        for (let j = bounds.startCol; j <= bounds.finishCol; j++) {\n          isRect = isRect && Warehouse.getAt(warehouse, i, j).exists(detailIsWithin);\n        }\n      }\n      return isRect ? Optional.some(bounds) : Optional.none();\n    };\n\n    const getBounds = (detailA, detailB) => {\n      return bounds(Math.min(detailA.row, detailB.row), Math.min(detailA.column, detailB.column), Math.max(detailA.row + detailA.rowspan - 1, detailB.row + detailB.rowspan - 1), Math.max(detailA.column + detailA.colspan - 1, detailB.column + detailB.colspan - 1));\n    };\n    const getAnyBox = (warehouse, startCell, finishCell) => {\n      const startCoords = Warehouse.findItem(warehouse, startCell, eq);\n      const finishCoords = Warehouse.findItem(warehouse, finishCell, eq);\n      return startCoords.bind(sc => {\n        return finishCoords.map(fc => {\n          return getBounds(sc, fc);\n        });\n      });\n    };\n    const getBox$1 = (warehouse, startCell, finishCell) => {\n      return getAnyBox(warehouse, startCell, finishCell).bind(bounds => {\n        return isRectangular(warehouse, bounds);\n      });\n    };\n\n    const getBox = (table, first, last) => {\n      const warehouse = getWarehouse(table);\n      return getBox$1(warehouse, first, last);\n    };\n    const getWarehouse = Warehouse.fromTable;\n\n    const before = (marker, element) => {\n      const parent$1 = parent(marker);\n      parent$1.each(v => {\n        v.dom.insertBefore(element.dom, marker.dom);\n      });\n    };\n    const after$1 = (marker, element) => {\n      const sibling = nextSibling(marker);\n      sibling.fold(() => {\n        const parent$1 = parent(marker);\n        parent$1.each(v => {\n          append$1(v, element);\n        });\n      }, v => {\n        before(v, element);\n      });\n    };\n    const prepend = (parent, element) => {\n      const firstChild$1 = firstChild(parent);\n      firstChild$1.fold(() => {\n        append$1(parent, element);\n      }, v => {\n        parent.dom.insertBefore(element.dom, v.dom);\n      });\n    };\n    const append$1 = (parent, element) => {\n      parent.dom.appendChild(element.dom);\n    };\n    const wrap = (element, wrapper) => {\n      before(element, wrapper);\n      append$1(wrapper, element);\n    };\n\n    const after = (marker, elements) => {\n      each(elements, (x, i) => {\n        const e = i === 0 ? marker : elements[i - 1];\n        after$1(e, x);\n      });\n    };\n    const append = (parent, elements) => {\n      each(elements, x => {\n        append$1(parent, x);\n      });\n    };\n\n    const remove = element => {\n      const dom = element.dom;\n      if (dom.parentNode !== null) {\n        dom.parentNode.removeChild(dom);\n      }\n    };\n    const unwrap = wrapper => {\n      const children = children$3(wrapper);\n      if (children.length > 0) {\n        after(wrapper, children);\n      }\n      remove(wrapper);\n    };\n\n    const NodeValue = (is, name) => {\n      const get = element => {\n        if (!is(element)) {\n          throw new Error('Can only get ' + name + ' value of a ' + name + ' node');\n        }\n        return getOption(element).getOr('');\n      };\n      const getOption = element => is(element) ? Optional.from(element.dom.nodeValue) : Optional.none();\n      const set = (element, value) => {\n        if (!is(element)) {\n          throw new Error('Can only set raw ' + name + ' value of a ' + name + ' node');\n        }\n        element.dom.nodeValue = value;\n      };\n      return {\n        get,\n        getOption,\n        set\n      };\n    };\n\n    const api = NodeValue(isText, 'text');\n    const get = element => api.get(element);\n    const set = (element, value) => api.set(element, value);\n\n    var TagBoundaries = [\n      'body',\n      'p',\n      'div',\n      'article',\n      'aside',\n      'figcaption',\n      'figure',\n      'footer',\n      'header',\n      'nav',\n      'section',\n      'ol',\n      'ul',\n      'li',\n      'table',\n      'thead',\n      'tbody',\n      'tfoot',\n      'caption',\n      'tr',\n      'td',\n      'th',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'pre',\n      'address'\n    ];\n\n    var DomUniverse = () => {\n      const clone$1 = element => {\n        return SugarElement.fromDom(element.dom.cloneNode(false));\n      };\n      const document = element => documentOrOwner(element).dom;\n      const isBoundary = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        if (name(element) === 'body') {\n          return true;\n        }\n        return contains(TagBoundaries, name(element));\n      };\n      const isEmptyTag = element => {\n        if (!isElement(element)) {\n          return false;\n        }\n        return contains([\n          'br',\n          'img',\n          'hr',\n          'input'\n        ], name(element));\n      };\n      const isNonEditable = element => isElement(element) && get$2(element, 'contenteditable') === 'false';\n      const comparePosition = (element, other) => {\n        return element.dom.compareDocumentPosition(other.dom);\n      };\n      const copyAttributesTo = (source, destination) => {\n        const as = clone(source);\n        setAll(destination, as);\n      };\n      const isSpecial = element => {\n        const tag = name(element);\n        return contains([\n          'script',\n          'noscript',\n          'iframe',\n          'noframes',\n          'noembed',\n          'title',\n          'style',\n          'textarea',\n          'xmp'\n        ], tag);\n      };\n      const getLanguage = element => isElement(element) ? getOpt(element, 'lang') : Optional.none();\n      return {\n        up: constant({\n          selector: ancestor,\n          closest: closest$1,\n          predicate: ancestor$1,\n          all: parents\n        }),\n        down: constant({\n          selector: descendants,\n          predicate: descendants$1\n        }),\n        styles: constant({\n          get: get$1,\n          getRaw: getRaw,\n          set: set$1,\n          remove: remove$1\n        }),\n        attrs: constant({\n          get: get$2,\n          set: set$2,\n          remove: remove$2,\n          copyTo: copyAttributesTo\n        }),\n        insert: constant({\n          before: before,\n          after: after$1,\n          afterAll: after,\n          append: append$1,\n          appendAll: append,\n          prepend: prepend,\n          wrap: wrap\n        }),\n        remove: constant({\n          unwrap: unwrap,\n          remove: remove\n        }),\n        create: constant({\n          nu: SugarElement.fromTag,\n          clone: clone$1,\n          text: SugarElement.fromText\n        }),\n        query: constant({\n          comparePosition,\n          prevSibling: prevSibling,\n          nextSibling: nextSibling\n        }),\n        property: constant({\n          children: children$3,\n          name: name,\n          parent: parent,\n          document,\n          isText: isText,\n          isComment: isComment,\n          isElement: isElement,\n          isSpecial,\n          getLanguage,\n          getText: get,\n          setText: set,\n          isBoundary,\n          isEmptyTag,\n          isNonEditable\n        }),\n        eq: eq,\n        is: is$1\n      };\n    };\n\n    const all = (universe, look, elements, f) => {\n      const head = elements[0];\n      const tail = elements.slice(1);\n      return f(universe, look, head, tail);\n    };\n    const oneAll = (universe, look, elements) => {\n      return elements.length > 0 ? all(universe, look, elements, unsafeOne) : Optional.none();\n    };\n    const unsafeOne = (universe, look, head, tail) => {\n      const start = look(universe, head);\n      return foldr(tail, (b, a) => {\n        const current = look(universe, a);\n        return commonElement(universe, b, current);\n      }, start);\n    };\n    const commonElement = (universe, start, end) => {\n      return start.bind(s => {\n        return end.filter(curry(universe.eq, s));\n      });\n    };\n\n    const sharedOne$1 = oneAll;\n\n    const universe = DomUniverse();\n    const sharedOne = (look, elements) => {\n      return sharedOne$1(universe, (_universe, element) => {\n        return look(element);\n      }, elements);\n    };\n\n    const lookupTable = container => {\n      return ancestor(container, 'table');\n    };\n    const retrieve$1 = (container, selector) => {\n      const sels = descendants(container, selector);\n      return sels.length > 0 ? Optional.some(sels) : Optional.none();\n    };\n    const getEdges = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return descendant(container, firstSelectedSelector).bind(first => {\n        return descendant(container, lastSelectedSelector).bind(last => {\n          return sharedOne(lookupTable, [\n            first,\n            last\n          ]).map(table => {\n            return {\n              first,\n              last,\n              table\n            };\n          });\n        });\n      });\n    };\n\n    const retrieve = (container, selector) => {\n      return retrieve$1(container, selector);\n    };\n    const retrieveBox = (container, firstSelectedSelector, lastSelectedSelector) => {\n      return getEdges(container, firstSelectedSelector, lastSelectedSelector).bind(edges => {\n        const isRoot = ancestor => {\n          return eq(container, ancestor);\n        };\n        const sectionSelector = 'thead,tfoot,tbody,table';\n        const firstAncestor = ancestor(edges.first, sectionSelector, isRoot);\n        const lastAncestor = ancestor(edges.last, sectionSelector, isRoot);\n        return firstAncestor.bind(fA => {\n          return lastAncestor.bind(lA => {\n            return eq(fA, lA) ? getBox(edges.table, edges.first, edges.last) : Optional.none();\n          });\n        });\n      });\n    };\n\n    const fromDom = nodes => map(nodes, SugarElement.fromDom);\n\n    const strSelected = 'data-mce-selected';\n    const strSelectedSelector = 'td[' + strSelected + '],th[' + strSelected + ']';\n    const strFirstSelected = 'data-mce-first-selected';\n    const strFirstSelectedSelector = 'td[' + strFirstSelected + '],th[' + strFirstSelected + ']';\n    const strLastSelected = 'data-mce-last-selected';\n    const strLastSelectedSelector = 'td[' + strLastSelected + '],th[' + strLastSelected + ']';\n    const ephemera = {\n      selected: strSelected,\n      selectedSelector: strSelectedSelector,\n      firstSelected: strFirstSelected,\n      firstSelectedSelector: strFirstSelectedSelector,\n      lastSelected: strLastSelected,\n      lastSelectedSelector: strLastSelectedSelector\n    };\n\n    const getSelectionCellFallback = element => table(element).bind(table => retrieve(table, ephemera.firstSelectedSelector)).fold(constant(element), cells => cells[0]);\n    const getSelectionFromSelector = selector => (initCell, isRoot) => {\n      const cellName = name(initCell);\n      const cell = cellName === 'col' || cellName === 'colgroup' ? getSelectionCellFallback(initCell) : initCell;\n      return closest$1(cell, selector, isRoot);\n    };\n    const getSelectionCellOrCaption = getSelectionFromSelector('th,td,caption');\n    const getSelectionCell = getSelectionFromSelector('th,td');\n    const getCellsFromSelection = editor => fromDom(editor.model.table.getSelectedCells());\n    const getRowsFromSelection = (selected, selector) => {\n      const cellOpt = getSelectionCell(selected);\n      const rowsOpt = cellOpt.bind(cell => table(cell)).map(table => rows(table));\n      return lift2(cellOpt, rowsOpt, (cell, rows) => filter(rows, row => exists(fromDom(row.dom.cells), rowCell => get$2(rowCell, selector) === '1' || eq(rowCell, cell)))).getOr([]);\n    };\n\n    const verticalAlignValues = [\n      {\n        text: 'None',\n        value: ''\n      },\n      {\n        text: 'Top',\n        value: 'top'\n      },\n      {\n        text: 'Middle',\n        value: 'middle'\n      },\n      {\n        text: 'Bottom',\n        value: 'bottom'\n      }\n    ];\n\n    const hexColour = value => ({ value: normalizeHex(value) });\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    const longformRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n    const isHexString = hex => shorthandRegex.test(hex) || longformRegex.test(hex);\n    const normalizeHex = hex => removeLeading(hex, '#').toUpperCase();\n    const fromString$1 = hex => isHexString(hex) ? Optional.some({ value: normalizeHex(hex) }) : Optional.none();\n    const toHex = component => {\n      const hex = component.toString(16);\n      return (hex.length === 1 ? '0' + hex : hex).toUpperCase();\n    };\n    const fromRgba = rgbaColour => {\n      const value = toHex(rgbaColour.red) + toHex(rgbaColour.green) + toHex(rgbaColour.blue);\n      return hexColour(value);\n    };\n\n    const rgbRegex = /^\\s*rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)\\s*$/i;\n    const rgbaRegex = /^\\s*rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?(?:\\.\\d+)?)\\s*\\)\\s*$/i;\n    const rgbaColour = (red, green, blue, alpha) => ({\n      red,\n      green,\n      blue,\n      alpha\n    });\n    const fromStringValues = (red, green, blue, alpha) => {\n      const r = parseInt(red, 10);\n      const g = parseInt(green, 10);\n      const b = parseInt(blue, 10);\n      const a = parseFloat(alpha);\n      return rgbaColour(r, g, b, a);\n    };\n    const fromString = rgbaString => {\n      if (rgbaString === 'transparent') {\n        return Optional.some(rgbaColour(0, 0, 0, 0));\n      }\n      const rgbMatch = rgbRegex.exec(rgbaString);\n      if (rgbMatch !== null) {\n        return Optional.some(fromStringValues(rgbMatch[1], rgbMatch[2], rgbMatch[3], '1'));\n      }\n      const rgbaMatch = rgbaRegex.exec(rgbaString);\n      if (rgbaMatch !== null) {\n        return Optional.some(fromStringValues(rgbaMatch[1], rgbaMatch[2], rgbaMatch[3], rgbaMatch[4]));\n      }\n      return Optional.none();\n    };\n\n    const anyToHex = color => fromString$1(color).orThunk(() => fromString(color).map(fromRgba)).getOrThunk(() => {\n      const canvas = document.createElement('canvas');\n      canvas.height = 1;\n      canvas.width = 1;\n      const canvasContext = canvas.getContext('2d');\n      canvasContext.clearRect(0, 0, canvas.width, canvas.height);\n      canvasContext.fillStyle = '#FFFFFF';\n      canvasContext.fillStyle = color;\n      canvasContext.fillRect(0, 0, 1, 1);\n      const rgba = canvasContext.getImageData(0, 0, 1, 1).data;\n      const r = rgba[0];\n      const g = rgba[1];\n      const b = rgba[2];\n      const a = rgba[3];\n      return fromRgba(rgbaColour(r, g, b, a));\n    });\n    const rgbaToHexString = color => fromString(color).map(fromRgba).map(h => '#' + h.value).getOr(color);\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const unbindable = () => singleton(s => s.unbind());\n\n    const onSetupToggle = (editor, formatName, formatValue) => {\n      return api => {\n        const boundCallback = unbindable();\n        const isNone = isEmpty(formatValue);\n        const init = () => {\n          const selectedCells = getCellsFromSelection(editor);\n          const checkNode = cell => editor.formatter.match(formatName, { value: formatValue }, cell.dom, isNone);\n          if (isNone) {\n            api.setActive(!exists(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, match => api.setActive(!match), true));\n          } else {\n            api.setActive(forall(selectedCells, checkNode));\n            boundCallback.set(editor.formatter.formatChanged(formatName, api.setActive, false, { value: formatValue }));\n          }\n        };\n        editor.initialized ? init() : editor.on('init', init);\n        return boundCallback.clear;\n      };\n    };\n    const isListGroup = item => hasNonNullableKey(item, 'menu');\n    const buildListItems = items => map(items, item => {\n      const text = item.text || item.title || '';\n      if (isListGroup(item)) {\n        return {\n          text,\n          items: buildListItems(item.menu)\n        };\n      } else {\n        return {\n          text,\n          value: item.value\n        };\n      }\n    });\n    const buildMenuItems = (editor, items, format, onAction) => map(items, item => {\n      const text = item.text || item.title;\n      if (isListGroup(item)) {\n        return {\n          type: 'nestedmenuitem',\n          text,\n          getSubmenuItems: () => buildMenuItems(editor, item.menu, format, onAction)\n        };\n      } else {\n        return {\n          text,\n          type: 'togglemenuitem',\n          onAction: () => onAction(item.value),\n          onSetup: onSetupToggle(editor, format, item.value)\n        };\n      }\n    });\n    const applyTableCellStyle = (editor, style) => value => {\n      editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n    };\n    const filterNoneItem = list => bind(list, item => {\n      if (isListGroup(item)) {\n        return [{\n            ...item,\n            menu: filterNoneItem(item.menu)\n          }];\n      } else {\n        return isNotEmpty(item.value) ? [item] : [];\n      }\n    });\n    const generateMenuItemsCallback = (editor, items, format, onAction) => callback => callback(buildMenuItems(editor, items, format, onAction));\n    const buildColorMenu = (editor, colorList, style) => {\n      const colorMap = map(colorList, entry => ({\n        text: entry.title,\n        value: '#' + anyToHex(entry.value).value,\n        type: 'choiceitem'\n      }));\n      return [{\n          type: 'fancymenuitem',\n          fancytype: 'colorswatch',\n          initData: {\n            colors: colorMap.length > 0 ? colorMap : undefined,\n            allowCustomColors: false\n          },\n          onAction: data => {\n            const value = data.value === 'remove' ? '' : data.value;\n            editor.execCommand('mceTableApplyCellStyle', false, { [style]: value });\n          }\n        }];\n    };\n    const changeRowHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableRowType');\n      const newType = currentType === 'header' ? 'body' : 'header';\n      editor.execCommand('mceTableRowType', false, { type: newType });\n    };\n    const changeColumnHeader = editor => () => {\n      const currentType = editor.queryCommandValue('mceTableColType');\n      const newType = currentType === 'th' ? 'td' : 'th';\n      editor.execCommand('mceTableColType', false, { type: newType });\n    };\n\n    const getClassList$1 = editor => {\n      const classes = buildListItems(getCellClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const children = [\n      {\n        name: 'width',\n        type: 'input',\n        label: 'Width'\n      },\n      {\n        name: 'height',\n        type: 'input',\n        label: 'Height'\n      },\n      {\n        name: 'celltype',\n        type: 'listbox',\n        label: 'Cell type',\n        items: [\n          {\n            text: 'Cell',\n            value: 'td'\n          },\n          {\n            text: 'Header cell',\n            value: 'th'\n          }\n        ]\n      },\n      {\n        name: 'scope',\n        type: 'listbox',\n        label: 'Scope',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Row',\n            value: 'row'\n          },\n          {\n            text: 'Column',\n            value: 'col'\n          },\n          {\n            text: 'Row group',\n            value: 'rowgroup'\n          },\n          {\n            text: 'Column group',\n            value: 'colgroup'\n          }\n        ]\n      },\n      {\n        name: 'halign',\n        type: 'listbox',\n        label: 'Horizontal align',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        name: 'valign',\n        type: 'listbox',\n        label: 'Vertical align',\n        items: verticalAlignValues\n      }\n    ];\n    const getItems$2 = editor => children.concat(getClassList$1(editor).toArray());\n\n    const getAdvancedTab = (editor, dialogName) => {\n      const emptyBorderStyle = [{\n          text: 'Select...',\n          value: ''\n        }];\n      const advTabItems = [\n        {\n          name: 'borderstyle',\n          type: 'listbox',\n          label: 'Border style',\n          items: emptyBorderStyle.concat(buildListItems(getTableBorderStyles(editor)))\n        },\n        {\n          name: 'bordercolor',\n          type: 'colorinput',\n          label: 'Border color'\n        },\n        {\n          name: 'backgroundcolor',\n          type: 'colorinput',\n          label: 'Background color'\n        }\n      ];\n      const borderWidth = {\n        name: 'borderwidth',\n        type: 'input',\n        label: 'Border width'\n      };\n      const items = dialogName === 'cell' ? [borderWidth].concat(advTabItems) : advTabItems;\n      return {\n        title: 'Advanced',\n        name: 'advanced',\n        items\n      };\n    };\n\n    const normal = (editor, element) => {\n      const dom = editor.dom;\n      const setAttrib = (attr, value) => {\n        dom.setAttrib(element, attr, value);\n      };\n      const setStyle = (prop, value) => {\n        dom.setStyle(element, prop, value);\n      };\n      const setFormat = (formatName, value) => {\n        if (value === '') {\n          editor.formatter.remove(formatName, { value: null }, element, true);\n        } else {\n          editor.formatter.apply(formatName, { value }, element);\n        }\n      };\n      return {\n        setAttrib,\n        setStyle,\n        setFormat\n      };\n    };\n    const DomModifier = { normal };\n\n    const isHeaderCell = isTag('th');\n    const getRowHeaderType = (isHeaderRow, isHeaderCells) => {\n      if (isHeaderRow && isHeaderCells) {\n        return 'sectionCells';\n      } else if (isHeaderRow) {\n        return 'section';\n      } else {\n        return 'cells';\n      }\n    };\n    const getRowType$1 = row => {\n      const isHeaderRow = row.section === 'thead';\n      const isHeaderCells = is(findCommonCellType(row.cells), 'th');\n      if (row.section === 'tfoot') {\n        return { type: 'footer' };\n      } else if (isHeaderRow || isHeaderCells) {\n        return {\n          type: 'header',\n          subType: getRowHeaderType(isHeaderRow, isHeaderCells)\n        };\n      } else {\n        return { type: 'body' };\n      }\n    };\n    const findCommonCellType = cells => {\n      const headerCells = filter(cells, cell => isHeaderCell(cell.element));\n      if (headerCells.length === 0) {\n        return Optional.some('td');\n      } else if (headerCells.length === cells.length) {\n        return Optional.some('th');\n      } else {\n        return Optional.none();\n      }\n    };\n    const findCommonRowType = rows => {\n      const rowTypes = map(rows, row => getRowType$1(row).type);\n      const hasHeader = contains(rowTypes, 'header');\n      const hasFooter = contains(rowTypes, 'footer');\n      if (!hasHeader && !hasFooter) {\n        return Optional.some('body');\n      } else {\n        const hasBody = contains(rowTypes, 'body');\n        if (hasHeader && !hasBody && !hasFooter) {\n          return Optional.some('header');\n        } else if (!hasHeader && !hasBody && hasFooter) {\n          return Optional.some('footer');\n        } else {\n          return Optional.none();\n        }\n      }\n    };\n\n    const cached = f => {\n      let called = false;\n      let r;\n      return (...args) => {\n        if (!called) {\n          called = true;\n          r = f.apply(null, args);\n        }\n        return r;\n      };\n    };\n\n    const findInWarehouse = (warehouse, element) => findMap(warehouse.all, r => find(r.cells, e => eq(element, e.element)));\n    const extractCells = (warehouse, target, predicate) => {\n      const details = map(target.selection, cell$1 => {\n        return cell(cell$1).bind(lc => findInWarehouse(warehouse, lc)).filter(predicate);\n      });\n      const cells = cat(details);\n      return someIf(cells.length > 0, cells);\n    };\n    const onMergable = (_warehouse, target) => target.mergable;\n    const onUnmergable = (_warehouse, target) => target.unmergable;\n    const onCells = (warehouse, target) => extractCells(warehouse, target, always);\n    const isUnlockedTableCell = (warehouse, cell) => findInWarehouse(warehouse, cell).exists(detail => !detail.isLocked);\n    const allUnlocked = (warehouse, cells) => forall(cells, cell => isUnlockedTableCell(warehouse, cell));\n    const onUnlockedMergable = (warehouse, target) => onMergable(warehouse, target).filter(mergeable => allUnlocked(warehouse, mergeable.cells));\n    const onUnlockedUnmergable = (warehouse, target) => onUnmergable(warehouse, target).filter(cells => allUnlocked(warehouse, cells));\n\n    const generate = cases => {\n      if (!isArray(cases)) {\n        throw new Error('cases must be an array');\n      }\n      if (cases.length === 0) {\n        throw new Error('there must be at least one case');\n      }\n      const constructors = [];\n      const adt = {};\n      each(cases, (acase, count) => {\n        const keys$1 = keys(acase);\n        if (keys$1.length !== 1) {\n          throw new Error('one and only one name per case');\n        }\n        const key = keys$1[0];\n        const value = acase[key];\n        if (adt[key] !== undefined) {\n          throw new Error('duplicate key detected:' + key);\n        } else if (key === 'cata') {\n          throw new Error('cannot have a case named cata (sorry)');\n        } else if (!isArray(value)) {\n          throw new Error('case arguments must be an array');\n        }\n        constructors.push(key);\n        adt[key] = (...args) => {\n          const argLength = args.length;\n          if (argLength !== value.length) {\n            throw new Error('Wrong number of arguments to case ' + key + '. Expected ' + value.length + ' (' + value + '), got ' + argLength);\n          }\n          const match = branches => {\n            const branchKeys = keys(branches);\n            if (constructors.length !== branchKeys.length) {\n              throw new Error('Wrong number of arguments to match. Expected: ' + constructors.join(',') + '\\nActual: ' + branchKeys.join(','));\n            }\n            const allReqd = forall(constructors, reqKey => {\n              return contains(branchKeys, reqKey);\n            });\n            if (!allReqd) {\n              throw new Error('Not all branches were specified when using match. Specified: ' + branchKeys.join(', ') + '\\nRequired: ' + constructors.join(', '));\n            }\n            return branches[key].apply(null, args);\n          };\n          return {\n            fold: (...foldArgs) => {\n              if (foldArgs.length !== cases.length) {\n                throw new Error('Wrong number of arguments to fold. Expected ' + cases.length + ', got ' + foldArgs.length);\n              }\n              const target = foldArgs[count];\n              return target.apply(null, args);\n            },\n            match,\n            log: label => {\n              console.log(label, {\n                constructors,\n                constructor: key,\n                params: args\n              });\n            }\n          };\n        };\n      });\n      return adt;\n    };\n    const Adt = { generate };\n\n    const adt = Adt.generate([\n      { none: [] },\n      { only: ['index'] },\n      {\n        left: [\n          'index',\n          'next'\n        ]\n      },\n      {\n        middle: [\n          'prev',\n          'index',\n          'next'\n        ]\n      },\n      {\n        right: [\n          'prev',\n          'index'\n        ]\n      }\n    ]);\n    ({ ...adt });\n\n    const opGetRowsType = (table, target) => {\n      const house = Warehouse.fromTable(table);\n      const details = onCells(house, target);\n      return details.bind(selectedCells => {\n        const lastSelectedCell = selectedCells[selectedCells.length - 1];\n        const minRowRange = selectedCells[0].row;\n        const maxRowRange = lastSelectedCell.row + lastSelectedCell.rowspan;\n        const selectedRows = house.all.slice(minRowRange, maxRowRange);\n        return findCommonRowType(selectedRows);\n      }).getOr('');\n    };\n    const getRowsType = opGetRowsType;\n\n    const rgbToHex = value => startsWith(value, 'rgb') ? rgbaToHexString(value) : value;\n    const extractAdvancedStyles = elm => {\n      const element = SugarElement.fromDom(elm);\n      return {\n        borderwidth: getRaw(element, 'border-width').getOr(''),\n        borderstyle: getRaw(element, 'border-style').getOr(''),\n        bordercolor: getRaw(element, 'border-color').map(rgbToHex).getOr(''),\n        backgroundcolor: getRaw(element, 'background-color').map(rgbToHex).getOr('')\n      };\n    };\n    const getSharedValues = data => {\n      const baseData = data[0];\n      const comparisonData = data.slice(1);\n      each(comparisonData, items => {\n        each(keys(baseData), key => {\n          each$1(items, (itemValue, itemKey) => {\n            const comparisonValue = baseData[key];\n            if (comparisonValue !== '' && key === itemKey) {\n              if (comparisonValue !== itemValue) {\n                baseData[key] = '';\n              }\n            }\n          });\n        });\n      });\n      return baseData;\n    };\n    const getAlignment = (formats, formatName, editor, elm) => find(formats, name => !isUndefined(editor.formatter.matchNode(elm, formatName + name))).getOr('');\n    const getHAlignment = curry(getAlignment, [\n      'left',\n      'center',\n      'right'\n    ], 'align');\n    const getVAlignment = curry(getAlignment, [\n      'top',\n      'middle',\n      'bottom'\n    ], 'valign');\n    const extractDataFromSettings = (editor, hasAdvTableTab) => {\n      const style = getDefaultStyles(editor);\n      const attrs = getDefaultAttributes(editor);\n      const extractAdvancedStyleData = () => ({\n        borderstyle: get$4(style, 'border-style').getOr(''),\n        bordercolor: rgbToHex(get$4(style, 'border-color').getOr('')),\n        backgroundcolor: rgbToHex(get$4(style, 'background-color').getOr(''))\n      });\n      const defaultData = {\n        height: '',\n        width: '100%',\n        cellspacing: '',\n        cellpadding: '',\n        caption: false,\n        class: '',\n        align: '',\n        border: ''\n      };\n      const getBorder = () => {\n        const borderWidth = style['border-width'];\n        if (shouldStyleWithCss(editor) && borderWidth) {\n          return { border: borderWidth };\n        }\n        return get$4(attrs, 'border').fold(() => ({}), border => ({ border }));\n      };\n      const advStyle = hasAdvTableTab ? extractAdvancedStyleData() : {};\n      const getCellPaddingCellSpacing = () => {\n        const spacing = get$4(style, 'border-spacing').or(get$4(attrs, 'cellspacing')).fold(() => ({}), cellspacing => ({ cellspacing }));\n        const padding = get$4(style, 'border-padding').or(get$4(attrs, 'cellpadding')).fold(() => ({}), cellpadding => ({ cellpadding }));\n        return {\n          ...spacing,\n          ...padding\n        };\n      };\n      const data = {\n        ...defaultData,\n        ...style,\n        ...attrs,\n        ...advStyle,\n        ...getBorder(),\n        ...getCellPaddingCellSpacing()\n      };\n      return data;\n    };\n    const getRowType = elm => table(SugarElement.fromDom(elm)).map(table => {\n      const target = { selection: fromDom(elm.cells) };\n      return getRowsType(table, target);\n    }).getOr('');\n    const extractDataFromTableElement = (editor, elm, hasAdvTableTab) => {\n      const getBorder = (dom, elm) => {\n        const optBorderWidth = getRaw(SugarElement.fromDom(elm), 'border-width');\n        if (shouldStyleWithCss(editor) && optBorderWidth.isSome()) {\n          return optBorderWidth.getOr('');\n        }\n        return dom.getAttrib(elm, 'border') || getTDTHOverallStyle(editor.dom, elm, 'border-width') || getTDTHOverallStyle(editor.dom, elm, 'border') || '';\n      };\n      const dom = editor.dom;\n      const cellspacing = shouldStyleWithCss(editor) ? dom.getStyle(elm, 'border-spacing') || dom.getAttrib(elm, 'cellspacing') : dom.getAttrib(elm, 'cellspacing') || dom.getStyle(elm, 'border-spacing');\n      const cellpadding = shouldStyleWithCss(editor) ? getTDTHOverallStyle(dom, elm, 'padding') || dom.getAttrib(elm, 'cellpadding') : dom.getAttrib(elm, 'cellpadding') || getTDTHOverallStyle(dom, elm, 'padding');\n      return {\n        width: dom.getStyle(elm, 'width') || dom.getAttrib(elm, 'width'),\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        cellspacing: cellspacing !== null && cellspacing !== void 0 ? cellspacing : '',\n        cellpadding: cellpadding !== null && cellpadding !== void 0 ? cellpadding : '',\n        border: getBorder(dom, elm),\n        caption: !!dom.select('caption', elm)[0],\n        class: dom.getAttrib(elm, 'class', ''),\n        align: getHAlignment(editor, elm),\n        ...hasAdvTableTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromRowElement = (editor, elm, hasAdvancedRowTab) => {\n      const dom = editor.dom;\n      return {\n        height: dom.getStyle(elm, 'height') || dom.getAttrib(elm, 'height'),\n        class: dom.getAttrib(elm, 'class', ''),\n        type: getRowType(elm),\n        align: getHAlignment(editor, elm),\n        ...hasAdvancedRowTab ? extractAdvancedStyles(elm) : {}\n      };\n    };\n    const extractDataFromCellElement = (editor, cell, hasAdvancedCellTab, column) => {\n      const dom = editor.dom;\n      const colElm = column.getOr(cell);\n      const getStyle = (element, style) => dom.getStyle(element, style) || dom.getAttrib(element, style);\n      return {\n        width: getStyle(colElm, 'width'),\n        height: getStyle(cell, 'height'),\n        scope: dom.getAttrib(cell, 'scope'),\n        celltype: getNodeName(cell),\n        class: dom.getAttrib(cell, 'class', ''),\n        halign: getHAlignment(editor, cell),\n        valign: getVAlignment(editor, cell),\n        ...hasAdvancedCellTab ? extractAdvancedStyles(cell) : {}\n      };\n    };\n\n    const getSelectedCells = (table, cells) => {\n      const warehouse = Warehouse.fromTable(table);\n      const allCells = Warehouse.justCells(warehouse);\n      const filtered = filter(allCells, cellA => exists(cells, cellB => eq(cellA.element, cellB)));\n      return map(filtered, cell => ({\n        element: cell.element.dom,\n        column: Warehouse.getColumnAt(warehouse, cell.column).map(col => col.element.dom)\n      }));\n    };\n    const updateSimpleProps$1 = (modifier, colModifier, data, shouldUpdate) => {\n      if (shouldUpdate('scope')) {\n        modifier.setAttrib('scope', data.scope);\n      }\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n      if (shouldUpdate('width')) {\n        colModifier.setStyle('width', addPxSuffix(data.width));\n      }\n    };\n    const updateAdvancedProps$1 = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setFormat('tablecellbackgroundcolor', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setFormat('tablecellbordercolor', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setFormat('tablecellborderstyle', data.borderstyle);\n      }\n      if (shouldUpdate('borderwidth')) {\n        modifier.setFormat('tablecellborderwidth', addPxSuffix(data.borderwidth));\n      }\n    };\n    const applyStyleData$1 = (editor, cells, data, wasChanged) => {\n      const isSingleCell = cells.length === 1;\n      each(cells, item => {\n        const cellElm = item.element;\n        const shouldOverrideCurrentValue = isSingleCell ? always : wasChanged;\n        const modifier = DomModifier.normal(editor, cellElm);\n        const colModifier = item.column.map(col => DomModifier.normal(editor, col)).getOr(modifier);\n        updateSimpleProps$1(modifier, colModifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedCellTab(editor)) {\n          updateAdvancedProps$1(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('halign')) {\n          setAlign(editor, cellElm, data.halign);\n        }\n        if (wasChanged('valign')) {\n          setVAlign(editor, cellElm, data.valign);\n        }\n      });\n    };\n    const applyStructureData$1 = (editor, data) => {\n      editor.execCommand('mceTableCellType', false, {\n        type: data.celltype,\n        no_events: true\n      });\n    };\n    const applyCellData = (editor, cells, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0 && cells.length >= 1) {\n        table(cells[0]).each(table => {\n          const selectedCells = getSelectedCells(table, cells);\n          const styleModified = size(filter$1(modifiedData, (_value, key) => key !== 'scope' && key !== 'celltype')) > 0;\n          const structureModified = has(modifiedData, 'celltype');\n          if (styleModified || has(modifiedData, 'scope')) {\n            applyStyleData$1(editor, selectedCells, data, curry(has, modifiedData));\n          }\n          if (structureModified) {\n            applyStructureData$1(editor, data);\n          }\n          fireTableModified(editor, table.dom, {\n            structure: structureModified,\n            style: styleModified\n          });\n        });\n      }\n    };\n    const onSubmitCellForm = (editor, cells, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyCellData(editor, cells, oldData, data);\n        editor.focus();\n      });\n    };\n    const getData$1 = (editor, cells) => {\n      const cellsData = table(cells[0]).map(table => map(getSelectedCells(table, cells), item => extractDataFromCellElement(editor, item.element, hasAdvancedCellTab(editor), item.column)));\n      return getSharedValues(cellsData.getOrDie());\n    };\n    const open$2 = editor => {\n      const cells = getCellsFromSelection(editor);\n      if (cells.length === 0) {\n        return;\n      }\n      const data = getData$1(editor, cells);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$2(editor)\n          },\n          getAdvancedTab(editor, 'cell')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$2(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Cell Properties',\n        size: 'normal',\n        body: hasAdvancedCellTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitCellForm, editor, cells, data)\n      });\n    };\n\n    const getClassList = editor => {\n      const classes = buildListItems(getRowClassList(editor));\n      if (classes.length > 0) {\n        return Optional.some({\n          name: 'class',\n          type: 'listbox',\n          label: 'Class',\n          items: classes\n        });\n      }\n      return Optional.none();\n    };\n    const formChildren = [\n      {\n        type: 'listbox',\n        name: 'type',\n        label: 'Row type',\n        items: [\n          {\n            text: 'Header',\n            value: 'header'\n          },\n          {\n            text: 'Body',\n            value: 'body'\n          },\n          {\n            text: 'Footer',\n            value: 'footer'\n          }\n        ]\n      },\n      {\n        type: 'listbox',\n        name: 'align',\n        label: 'Alignment',\n        items: [\n          {\n            text: 'None',\n            value: ''\n          },\n          {\n            text: 'Left',\n            value: 'left'\n          },\n          {\n            text: 'Center',\n            value: 'center'\n          },\n          {\n            text: 'Right',\n            value: 'right'\n          }\n        ]\n      },\n      {\n        label: 'Height',\n        name: 'height',\n        type: 'input'\n      }\n    ];\n    const getItems$1 = editor => formChildren.concat(getClassList(editor).toArray());\n\n    const updateSimpleProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('class')) {\n        modifier.setAttrib('class', data.class);\n      }\n      if (shouldUpdate('height')) {\n        modifier.setStyle('height', addPxSuffix(data.height));\n      }\n    };\n    const updateAdvancedProps = (modifier, data, shouldUpdate) => {\n      if (shouldUpdate('backgroundcolor')) {\n        modifier.setStyle('background-color', data.backgroundcolor);\n      }\n      if (shouldUpdate('bordercolor')) {\n        modifier.setStyle('border-color', data.bordercolor);\n      }\n      if (shouldUpdate('borderstyle')) {\n        modifier.setStyle('border-style', data.borderstyle);\n      }\n    };\n    const applyStyleData = (editor, rows, data, wasChanged) => {\n      const isSingleRow = rows.length === 1;\n      const shouldOverrideCurrentValue = isSingleRow ? always : wasChanged;\n      each(rows, rowElm => {\n        const modifier = DomModifier.normal(editor, rowElm);\n        updateSimpleProps(modifier, data, shouldOverrideCurrentValue);\n        if (hasAdvancedRowTab(editor)) {\n          updateAdvancedProps(modifier, data, shouldOverrideCurrentValue);\n        }\n        if (wasChanged('align')) {\n          setAlign(editor, rowElm, data.align);\n        }\n      });\n    };\n    const applyStructureData = (editor, data) => {\n      editor.execCommand('mceTableRowType', false, {\n        type: data.type,\n        no_events: true\n      });\n    };\n    const applyRowData = (editor, rows, oldData, data) => {\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      if (size(modifiedData) > 0) {\n        const typeModified = has(modifiedData, 'type');\n        const styleModified = typeModified ? size(modifiedData) > 1 : true;\n        if (styleModified) {\n          applyStyleData(editor, rows, data, curry(has, modifiedData));\n        }\n        if (typeModified) {\n          applyStructureData(editor, data);\n        }\n        table(SugarElement.fromDom(rows[0])).each(table => fireTableModified(editor, table.dom, {\n          structure: typeModified,\n          style: styleModified\n        }));\n      }\n    };\n    const onSubmitRowForm = (editor, rows, oldData, api) => {\n      const data = api.getData();\n      api.close();\n      editor.undoManager.transact(() => {\n        applyRowData(editor, rows, oldData, data);\n        editor.focus();\n      });\n    };\n    const open$1 = editor => {\n      const rows = getRowsFromSelection(getSelectionStart(editor), ephemera.selected);\n      if (rows.length === 0) {\n        return;\n      }\n      const rowsData = map(rows, rowElm => extractDataFromRowElement(editor, rowElm.dom, hasAdvancedRowTab(editor)));\n      const data = getSharedValues(rowsData);\n      const dialogTabPanel = {\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: getItems$1(editor)\n          },\n          getAdvancedTab(editor, 'row')\n        ]\n      };\n      const dialogPanel = {\n        type: 'panel',\n        items: [{\n            type: 'grid',\n            columns: 2,\n            items: getItems$1(editor)\n          }]\n      };\n      editor.windowManager.open({\n        title: 'Row Properties',\n        size: 'normal',\n        body: hasAdvancedRowTab(editor) ? dialogTabPanel : dialogPanel,\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data,\n        onSubmit: curry(onSubmitRowForm, editor, map(rows, r => r.dom), data)\n      });\n    };\n\n    const getItems = (editor, classes, insertNewTable) => {\n      const rowColCountItems = !insertNewTable ? [] : [\n        {\n          type: 'input',\n          name: 'cols',\n          label: 'Cols',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'rows',\n          label: 'Rows',\n          inputMode: 'numeric'\n        }\n      ];\n      const alwaysItems = [\n        {\n          type: 'input',\n          name: 'width',\n          label: 'Width'\n        },\n        {\n          type: 'input',\n          name: 'height',\n          label: 'Height'\n        }\n      ];\n      const appearanceItems = hasAppearanceOptions(editor) ? [\n        {\n          type: 'input',\n          name: 'cellspacing',\n          label: 'Cell spacing',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'cellpadding',\n          label: 'Cell padding',\n          inputMode: 'numeric'\n        },\n        {\n          type: 'input',\n          name: 'border',\n          label: 'Border width'\n        },\n        {\n          type: 'label',\n          label: 'Caption',\n          items: [{\n              type: 'checkbox',\n              name: 'caption',\n              label: 'Show caption'\n            }]\n        }\n      ] : [];\n      const alignmentItem = [{\n          type: 'listbox',\n          name: 'align',\n          label: 'Alignment',\n          items: [\n            {\n              text: 'None',\n              value: ''\n            },\n            {\n              text: 'Left',\n              value: 'left'\n            },\n            {\n              text: 'Center',\n              value: 'center'\n            },\n            {\n              text: 'Right',\n              value: 'right'\n            }\n          ]\n        }];\n      const classListItem = classes.length > 0 ? [{\n          type: 'listbox',\n          name: 'class',\n          label: 'Class',\n          items: classes\n        }] : [];\n      return rowColCountItems.concat(alwaysItems).concat(appearanceItems).concat(alignmentItem).concat(classListItem);\n    };\n\n    const styleTDTH = (dom, elm, name, value) => {\n      if (elm.tagName === 'TD' || elm.tagName === 'TH') {\n        if (isString(name) && isNonNullable(value)) {\n          dom.setStyle(elm, name, value);\n        } else {\n          dom.setStyles(elm, name);\n        }\n      } else {\n        if (elm.children) {\n          for (let i = 0; i < elm.children.length; i++) {\n            styleTDTH(dom, elm.children[i], name, value);\n          }\n        }\n      }\n    };\n    const applyDataToElement = (editor, tableElm, data, shouldApplyOnCell) => {\n      const dom = editor.dom;\n      const attrs = {};\n      const styles = {};\n      const shouldStyleWithCss$1 = shouldStyleWithCss(editor);\n      const hasAdvancedTableTab$1 = hasAdvancedTableTab(editor);\n      if (!isUndefined(data.class)) {\n        attrs.class = data.class;\n      }\n      styles.height = addPxSuffix(data.height);\n      if (shouldStyleWithCss$1) {\n        styles.width = addPxSuffix(data.width);\n      } else if (dom.getAttrib(tableElm, 'width')) {\n        attrs.width = removePxSuffix(data.width);\n      }\n      if (shouldStyleWithCss$1) {\n        styles['border-width'] = addPxSuffix(data.border);\n        styles['border-spacing'] = addPxSuffix(data.cellspacing);\n      } else {\n        attrs.border = data.border;\n        attrs.cellpadding = data.cellpadding;\n        attrs.cellspacing = data.cellspacing;\n      }\n      if (shouldStyleWithCss$1 && tableElm.children) {\n        const cellStyles = {};\n        if (shouldApplyOnCell.border) {\n          cellStyles['border-width'] = addPxSuffix(data.border);\n        }\n        if (shouldApplyOnCell.cellpadding) {\n          cellStyles.padding = addPxSuffix(data.cellpadding);\n        }\n        if (hasAdvancedTableTab$1 && shouldApplyOnCell.bordercolor) {\n          cellStyles['border-color'] = data.bordercolor;\n        }\n        if (!isEmpty$1(cellStyles)) {\n          for (let i = 0; i < tableElm.children.length; i++) {\n            styleTDTH(dom, tableElm.children[i], cellStyles);\n          }\n        }\n      }\n      if (hasAdvancedTableTab$1) {\n        const advData = data;\n        styles['background-color'] = advData.backgroundcolor;\n        styles['border-color'] = advData.bordercolor;\n        styles['border-style'] = advData.borderstyle;\n      }\n      dom.setStyles(tableElm, {\n        ...getDefaultStyles(editor),\n        ...styles\n      });\n      dom.setAttribs(tableElm, {\n        ...getDefaultAttributes(editor),\n        ...attrs\n      });\n    };\n    const onSubmitTableForm = (editor, tableElm, oldData, api) => {\n      const dom = editor.dom;\n      const data = api.getData();\n      const modifiedData = filter$1(data, (value, key) => oldData[key] !== value);\n      api.close();\n      if (data.class === '') {\n        delete data.class;\n      }\n      editor.undoManager.transact(() => {\n        if (!tableElm) {\n          const cols = toInt(data.cols).getOr(1);\n          const rows = toInt(data.rows).getOr(1);\n          editor.execCommand('mceInsertTable', false, {\n            rows,\n            columns: cols\n          });\n          tableElm = getSelectionCell(getSelectionStart(editor), getIsRoot(editor)).bind(cell => table(cell, getIsRoot(editor))).map(table => table.dom).getOrDie();\n        }\n        if (size(modifiedData) > 0) {\n          const applicableCellProperties = {\n            border: has(modifiedData, 'border'),\n            bordercolor: has(modifiedData, 'bordercolor'),\n            cellpadding: has(modifiedData, 'cellpadding')\n          };\n          applyDataToElement(editor, tableElm, data, applicableCellProperties);\n          const captionElm = dom.select('caption', tableElm)[0];\n          if (captionElm && !data.caption || !captionElm && data.caption) {\n            editor.execCommand('mceTableToggleCaption');\n          }\n          setAlign(editor, tableElm, data.align);\n        }\n        editor.focus();\n        editor.addVisual();\n        if (size(modifiedData) > 0) {\n          const captionModified = has(modifiedData, 'caption');\n          const styleModified = captionModified ? size(modifiedData) > 1 : true;\n          fireTableModified(editor, tableElm, {\n            structure: captionModified,\n            style: styleModified\n          });\n        }\n      });\n    };\n    const open = (editor, insertNewTable) => {\n      const dom = editor.dom;\n      let tableElm;\n      let data = extractDataFromSettings(editor, hasAdvancedTableTab(editor));\n      if (insertNewTable) {\n        data.cols = '1';\n        data.rows = '1';\n        if (hasAdvancedTableTab(editor)) {\n          data.borderstyle = '';\n          data.bordercolor = '';\n          data.backgroundcolor = '';\n        }\n      } else {\n        tableElm = dom.getParent(editor.selection.getStart(), 'table', editor.getBody());\n        if (tableElm) {\n          data = extractDataFromTableElement(editor, tableElm, hasAdvancedTableTab(editor));\n        } else {\n          if (hasAdvancedTableTab(editor)) {\n            data.borderstyle = '';\n            data.bordercolor = '';\n            data.backgroundcolor = '';\n          }\n        }\n      }\n      const classes = buildListItems(getTableClassList(editor));\n      if (classes.length > 0) {\n        if (data.class) {\n          data.class = data.class.replace(/\\s*mce\\-item\\-table\\s*/g, '');\n        }\n      }\n      const generalPanel = {\n        type: 'grid',\n        columns: 2,\n        items: getItems(editor, classes, insertNewTable)\n      };\n      const nonAdvancedForm = () => ({\n        type: 'panel',\n        items: [generalPanel]\n      });\n      const advancedForm = () => ({\n        type: 'tabpanel',\n        tabs: [\n          {\n            title: 'General',\n            name: 'general',\n            items: [generalPanel]\n          },\n          getAdvancedTab(editor, 'table')\n        ]\n      });\n      const dialogBody = hasAdvancedTableTab(editor) ? advancedForm() : nonAdvancedForm();\n      editor.windowManager.open({\n        title: 'Table Properties',\n        size: 'normal',\n        body: dialogBody,\n        onSubmit: curry(onSubmitTableForm, editor, tableElm, data),\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: data\n      });\n    };\n\n    const registerCommands = editor => {\n      const runAction = f => {\n        if (isInEditableContext(getSelectionStart(editor))) {\n          f();\n        }\n      };\n      each$1({\n        mceTableProps: curry(open, editor, false),\n        mceTableRowProps: curry(open$1, editor),\n        mceTableCellProps: curry(open$2, editor),\n        mceInsertTableDialog: curry(open, editor, true)\n      }, (func, name) => editor.addCommand(name, () => runAction(func)));\n    };\n\n    const child = (scope, selector) => child$1(scope, selector).isSome();\n\n    const selection = identity;\n    const unmergable = selectedCells => {\n      const hasSpan = (elem, type) => getOpt(elem, type).exists(span => parseInt(span, 10) > 1);\n      const hasRowOrColSpan = elem => hasSpan(elem, 'rowspan') || hasSpan(elem, 'colspan');\n      return selectedCells.length > 0 && forall(selectedCells, hasRowOrColSpan) ? Optional.some(selectedCells) : Optional.none();\n    };\n    const mergable = (table, selectedCells, ephemera) => {\n      if (selectedCells.length <= 1) {\n        return Optional.none();\n      } else {\n        return retrieveBox(table, ephemera.firstSelectedSelector, ephemera.lastSelectedSelector).map(bounds => ({\n          bounds,\n          cells: selectedCells\n        }));\n      }\n    };\n\n    const noMenu = cell => ({\n      element: cell,\n      mergable: Optional.none(),\n      unmergable: Optional.none(),\n      selection: [cell]\n    });\n    const forMenu = (selectedCells, table, cell) => ({\n      element: cell,\n      mergable: mergable(table, selectedCells, ephemera),\n      unmergable: unmergable(selectedCells),\n      selection: selection(selectedCells)\n    });\n\n    const getSelectionTargets = editor => {\n      const targets = Cell(Optional.none());\n      const changeHandlers = Cell([]);\n      let selectionDetails = Optional.none();\n      const isCaption = isTag('caption');\n      const isDisabledForSelection = key => selectionDetails.forall(details => !details[key]);\n      const getStart = () => getSelectionCellOrCaption(getSelectionStart(editor), getIsRoot(editor));\n      const getEnd = () => getSelectionCellOrCaption(getSelectionEnd(editor), getIsRoot(editor));\n      const findTargets = () => getStart().bind(startCellOrCaption => flatten(lift2(table(startCellOrCaption), getEnd().bind(table), (startTable, endTable) => {\n        if (eq(startTable, endTable)) {\n          if (isCaption(startCellOrCaption)) {\n            return Optional.some(noMenu(startCellOrCaption));\n          } else {\n            return Optional.some(forMenu(getCellsFromSelection(editor), startTable, startCellOrCaption));\n          }\n        }\n        return Optional.none();\n      })));\n      const getExtractedDetails = targets => {\n        const tableOpt = table(targets.element);\n        return tableOpt.map(table => {\n          const warehouse = Warehouse.fromTable(table);\n          const selectedCells = onCells(warehouse, targets).getOr([]);\n          const locked = foldl(selectedCells, (acc, cell) => {\n            if (cell.isLocked) {\n              acc.onAny = true;\n              if (cell.column === 0) {\n                acc.onFirst = true;\n              } else if (cell.column + cell.colspan >= warehouse.grid.columns) {\n                acc.onLast = true;\n              }\n            }\n            return acc;\n          }, {\n            onAny: false,\n            onFirst: false,\n            onLast: false\n          });\n          return {\n            mergeable: onUnlockedMergable(warehouse, targets).isSome(),\n            unmergeable: onUnlockedUnmergable(warehouse, targets).isSome(),\n            locked\n          };\n        });\n      };\n      const resetTargets = () => {\n        targets.set(cached(findTargets)());\n        selectionDetails = targets.get().bind(getExtractedDetails);\n        each(changeHandlers.get(), call);\n      };\n      const setupHandler = handler => {\n        handler();\n        changeHandlers.set(changeHandlers.get().concat([handler]));\n        return () => {\n          changeHandlers.set(filter(changeHandlers.get(), h => h !== handler));\n        };\n      };\n      const onSetup = (api, isDisabled) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets) && editor.selection.isEditable());\n      }));\n      const onSetupWithToggle = (api, isDisabled, isActive) => setupHandler(() => targets.get().fold(() => {\n        api.setEnabled(false);\n        api.setActive(false);\n      }, targets => {\n        api.setEnabled(!isDisabled(targets) && editor.selection.isEditable());\n        api.setActive(isActive(targets));\n      }));\n      const isDisabledFromLocked = lockedDisable => selectionDetails.exists(details => details.locked[lockedDisable]);\n      const onSetupTable = api => onSetup(api, _ => false);\n      const onSetupCellOrRow = api => onSetup(api, targets => isCaption(targets.element));\n      const onSetupColumn = lockedDisable => api => onSetup(api, targets => isCaption(targets.element) || isDisabledFromLocked(lockedDisable));\n      const onSetupPasteable = getClipboardData => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone());\n      const onSetupPasteableColumn = (getClipboardData, lockedDisable) => api => onSetup(api, targets => isCaption(targets.element) || getClipboardData().isNone() || isDisabledFromLocked(lockedDisable));\n      const onSetupMergeable = api => onSetup(api, _targets => isDisabledForSelection('mergeable'));\n      const onSetupUnmergeable = api => onSetup(api, _targets => isDisabledForSelection('unmergeable'));\n      const onSetupTableWithCaption = api => {\n        return onSetupWithToggle(api, never, targets => {\n          const tableOpt = table(targets.element, getIsRoot(editor));\n          return tableOpt.exists(table => child(table, 'caption'));\n        });\n      };\n      const onSetupTableHeaders = (command, headerType) => api => {\n        return onSetupWithToggle(api, targets => isCaption(targets.element), () => editor.queryCommandValue(command) === headerType);\n      };\n      const onSetupTableRowHeaders = onSetupTableHeaders('mceTableRowType', 'header');\n      const onSetupTableColumnHeaders = onSetupTableHeaders('mceTableColType', 'th');\n      editor.on('NodeChange ExecCommand TableSelectorChange', resetTargets);\n      return {\n        onSetupTable,\n        onSetupCellOrRow,\n        onSetupColumn,\n        onSetupPasteable,\n        onSetupPasteableColumn,\n        onSetupMergeable,\n        onSetupUnmergeable,\n        resetTargets,\n        onSetupTableWithCaption,\n        onSetupTableRowHeaders,\n        onSetupTableColumnHeaders,\n        targets: targets.get\n      };\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.FakeClipboard');\n\n    const tableTypeBase = 'x-tinymce/dom-table-';\n    const tableTypeRow = tableTypeBase + 'rows';\n    const tableTypeColumn = tableTypeBase + 'columns';\n    const getData = type => {\n      var _a;\n      const items = (_a = global.read()) !== null && _a !== void 0 ? _a : [];\n      return findMap(items, item => Optional.from(item.getType(type)));\n    };\n    const getRows = () => getData(tableTypeRow);\n    const getColumns = () => getData(tableTypeColumn);\n\n    const onSetupEditable$1 = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const addButtons = (editor, selectionTargets) => {\n      editor.ui.registry.addMenuButton('table', {\n        tooltip: 'Table',\n        icon: 'table',\n        onSetup: onSetupEditable$1(editor),\n        fetch: callback => callback('inserttable | cell row column | advtablesort | tableprops deletetable')\n      });\n      const cmd = command => () => editor.execCommand(command);\n      const addButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const addToggleButtonIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleButton(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      addButtonIfRegistered('tableprops', {\n        tooltip: 'Table properties',\n        command: 'mceTableProps',\n        icon: 'table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tabledelete', {\n        tooltip: 'Delete table',\n        command: 'mceTableDelete',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable\n      });\n      addButtonIfRegistered('tablecellprops', {\n        tooltip: 'Cell properties',\n        command: 'mceTableCellProps',\n        icon: 'table-cell-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablemergecells', {\n        tooltip: 'Merge cells',\n        command: 'mceTableMergeCells',\n        icon: 'table-merge-cells',\n        onSetup: selectionTargets.onSetupMergeable\n      });\n      addButtonIfRegistered('tablesplitcells', {\n        tooltip: 'Split cell',\n        command: 'mceTableSplitCells',\n        icon: 'table-split-cells',\n        onSetup: selectionTargets.onSetupUnmergeable\n      });\n      addButtonIfRegistered('tableinsertrowbefore', {\n        tooltip: 'Insert row before',\n        command: 'mceTableInsertRowBefore',\n        icon: 'table-insert-row-above',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertrowafter', {\n        tooltip: 'Insert row after',\n        command: 'mceTableInsertRowAfter',\n        icon: 'table-insert-row-after',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tabledeleterow', {\n        tooltip: 'Delete row',\n        command: 'mceTableDeleteRow',\n        icon: 'table-delete-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablerowprops', {\n        tooltip: 'Row properties',\n        command: 'mceTableRowProps',\n        icon: 'table-row-properties',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tableinsertcolbefore', {\n        tooltip: 'Insert column before',\n        command: 'mceTableInsertColBefore',\n        icon: 'table-insert-column-before',\n        onSetup: selectionTargets.onSetupColumn('onFirst')\n      });\n      addButtonIfRegistered('tableinsertcolafter', {\n        tooltip: 'Insert column after',\n        command: 'mceTableInsertColAfter',\n        icon: 'table-insert-column-after',\n        onSetup: selectionTargets.onSetupColumn('onLast')\n      });\n      addButtonIfRegistered('tabledeletecol', {\n        tooltip: 'Delete column',\n        command: 'mceTableDeleteCol',\n        icon: 'table-delete-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecutrow', {\n        tooltip: 'Cut row',\n        command: 'mceTableCutRow',\n        icon: 'cut-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablecopyrow', {\n        tooltip: 'Copy row',\n        command: 'mceTableCopyRow',\n        icon: 'duplicate-row',\n        onSetup: selectionTargets.onSetupCellOrRow\n      });\n      addButtonIfRegistered('tablepasterowbefore', {\n        tooltip: 'Paste row before',\n        command: 'mceTablePasteRowBefore',\n        icon: 'paste-row-before',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablepasterowafter', {\n        tooltip: 'Paste row after',\n        command: 'mceTablePasteRowAfter',\n        icon: 'paste-row-after',\n        onSetup: selectionTargets.onSetupPasteable(getRows)\n      });\n      addButtonIfRegistered('tablecutcol', {\n        tooltip: 'Cut column',\n        command: 'mceTableCutCol',\n        icon: 'cut-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablecopycol', {\n        tooltip: 'Copy column',\n        command: 'mceTableCopyCol',\n        icon: 'duplicate-column',\n        onSetup: selectionTargets.onSetupColumn('onAny')\n      });\n      addButtonIfRegistered('tablepastecolbefore', {\n        tooltip: 'Paste column before',\n        command: 'mceTablePasteColBefore',\n        icon: 'paste-column-before',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n      });\n      addButtonIfRegistered('tablepastecolafter', {\n        tooltip: 'Paste column after',\n        command: 'mceTablePasteColAfter',\n        icon: 'paste-column-after',\n        onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n      });\n      addButtonIfRegistered('tableinsertdialog', {\n        tooltip: 'Insert table',\n        command: 'mceInsertTableDialog',\n        icon: 'table',\n        onSetup: onSetupEditable$1(editor)\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addMenuButton('tableclass', {\n          icon: 'table-classes',\n          tooltip: 'Table styles',\n          fetch: generateMenuItemsCallback(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addMenuButton('tablecellclass', {\n          icon: 'table-cell-classes',\n          tooltip: 'Cell styles',\n          fetch: generateMenuItemsCallback(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addMenuButton('tablecellvalign', {\n          icon: 'vertical-align',\n          tooltip: 'Vertical align',\n          fetch: generateMenuItemsCallback(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderwidth', {\n          icon: 'border-width',\n          tooltip: 'Border width',\n          fetch: generateMenuItemsCallback(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellborderstyle', {\n          icon: 'border-style',\n          tooltip: 'Border style',\n          fetch: generateMenuItemsCallback(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          tooltip: 'Background color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addMenuButton('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          tooltip: 'Border color',\n          fetch: callback => callback(buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleButtonIfRegistered('tablecaption', {\n        tooltip: 'Table caption',\n        icon: 'table-caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleButtonIfRegistered('tablerowheader', {\n        tooltip: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleButtonIfRegistered('tablecolheader', {\n        tooltip: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableColumnHeaders\n      });\n    };\n    const addToolbars = editor => {\n      const isEditableTable = table => editor.dom.is(table, 'table') && editor.getBody().contains(table) && editor.dom.isEditable(table.parentNode);\n      const toolbar = getToolbar(editor);\n      if (toolbar.length > 0) {\n        editor.ui.registry.addContextToolbar('table', {\n          predicate: isEditableTable,\n          items: toolbar,\n          scope: 'node',\n          position: 'node'\n        });\n      }\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const addMenuItems = (editor, selectionTargets) => {\n      const cmd = command => () => editor.execCommand(command);\n      const addMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n          return true;\n        } else {\n          return false;\n        }\n      };\n      const addToggleMenuIfRegistered = (name, spec) => {\n        if (editor.queryCommandSupported(spec.command)) {\n          editor.ui.registry.addToggleMenuItem(name, {\n            ...spec,\n            onAction: isFunction(spec.onAction) ? spec.onAction : cmd(spec.command)\n          });\n        }\n      };\n      const insertTableAction = data => {\n        editor.execCommand('mceInsertTable', false, {\n          rows: data.numRows,\n          columns: data.numColumns\n        });\n      };\n      const hasRowMenuItems = [\n        addMenuIfRegistered('tableinsertrowbefore', {\n          text: 'Insert row before',\n          icon: 'table-insert-row-above',\n          command: 'mceTableInsertRowBefore',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tableinsertrowafter', {\n          text: 'Insert row after',\n          icon: 'table-insert-row-after',\n          command: 'mceTableInsertRowAfter',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tabledeleterow', {\n          text: 'Delete row',\n          icon: 'table-delete-row',\n          command: 'mceTableDeleteRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablerowprops', {\n          text: 'Row properties',\n          icon: 'table-row-properties',\n          command: 'mceTableRowProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecutrow', {\n          text: 'Cut row',\n          icon: 'cut-row',\n          command: 'mceTableCutRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablecopyrow', {\n          text: 'Copy row',\n          icon: 'duplicate-row',\n          command: 'mceTableCopyRow',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablepasterowbefore', {\n          text: 'Paste row before',\n          icon: 'paste-row-before',\n          command: 'mceTablePasteRowBefore',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        }),\n        addMenuIfRegistered('tablepasterowafter', {\n          text: 'Paste row after',\n          icon: 'paste-row-after',\n          command: 'mceTablePasteRowAfter',\n          onSetup: selectionTargets.onSetupPasteable(getRows)\n        })\n      ];\n      const hasColumnMenuItems = [\n        addMenuIfRegistered('tableinsertcolumnbefore', {\n          text: 'Insert column before',\n          icon: 'table-insert-column-before',\n          command: 'mceTableInsertColBefore',\n          onSetup: selectionTargets.onSetupColumn('onFirst')\n        }),\n        addMenuIfRegistered('tableinsertcolumnafter', {\n          text: 'Insert column after',\n          icon: 'table-insert-column-after',\n          command: 'mceTableInsertColAfter',\n          onSetup: selectionTargets.onSetupColumn('onLast')\n        }),\n        addMenuIfRegistered('tabledeletecolumn', {\n          text: 'Delete column',\n          icon: 'table-delete-column',\n          command: 'mceTableDeleteCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecutcolumn', {\n          text: 'Cut column',\n          icon: 'cut-column',\n          command: 'mceTableCutCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablecopycolumn', {\n          text: 'Copy column',\n          icon: 'duplicate-column',\n          command: 'mceTableCopyCol',\n          onSetup: selectionTargets.onSetupColumn('onAny')\n        }),\n        addMenuIfRegistered('tablepastecolumnbefore', {\n          text: 'Paste column before',\n          icon: 'paste-column-before',\n          command: 'mceTablePasteColBefore',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onFirst')\n        }),\n        addMenuIfRegistered('tablepastecolumnafter', {\n          text: 'Paste column after',\n          icon: 'paste-column-after',\n          command: 'mceTablePasteColAfter',\n          onSetup: selectionTargets.onSetupPasteableColumn(getColumns, 'onLast')\n        })\n      ];\n      const hasCellMenuItems = [\n        addMenuIfRegistered('tablecellprops', {\n          text: 'Cell properties',\n          icon: 'table-cell-properties',\n          command: 'mceTableCellProps',\n          onSetup: selectionTargets.onSetupCellOrRow\n        }),\n        addMenuIfRegistered('tablemergecells', {\n          text: 'Merge cells',\n          icon: 'table-merge-cells',\n          command: 'mceTableMergeCells',\n          onSetup: selectionTargets.onSetupMergeable\n        }),\n        addMenuIfRegistered('tablesplitcells', {\n          text: 'Split cell',\n          icon: 'table-split-cells',\n          command: 'mceTableSplitCells',\n          onSetup: selectionTargets.onSetupUnmergeable\n        })\n      ];\n      if (!hasTableGrid(editor)) {\n        editor.ui.registry.addMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          onAction: cmd('mceInsertTableDialog'),\n          onSetup: onSetupEditable(editor)\n        });\n      } else {\n        editor.ui.registry.addNestedMenuItem('inserttable', {\n          text: 'Table',\n          icon: 'table',\n          getSubmenuItems: () => [{\n              type: 'fancymenuitem',\n              fancytype: 'inserttable',\n              onAction: insertTableAction\n            }],\n          onSetup: onSetupEditable(editor)\n        });\n      }\n      editor.ui.registry.addMenuItem('inserttabledialog', {\n        text: 'Insert table',\n        icon: 'table',\n        onAction: cmd('mceInsertTableDialog'),\n        onSetup: onSetupEditable(editor)\n      });\n      addMenuIfRegistered('tableprops', {\n        text: 'Table properties',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableProps'\n      });\n      addMenuIfRegistered('deletetable', {\n        text: 'Delete table',\n        icon: 'table-delete-table',\n        onSetup: selectionTargets.onSetupTable,\n        command: 'mceTableDelete'\n      });\n      if (contains(hasRowMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('row', {\n          type: 'nestedmenuitem',\n          text: 'Row',\n          getSubmenuItems: constant('tableinsertrowbefore tableinsertrowafter tabledeleterow tablerowprops | tablecutrow tablecopyrow tablepasterowbefore tablepasterowafter')\n        });\n      }\n      if (contains(hasColumnMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('column', {\n          type: 'nestedmenuitem',\n          text: 'Column',\n          getSubmenuItems: constant('tableinsertcolumnbefore tableinsertcolumnafter tabledeletecolumn | tablecutcolumn tablecopycolumn tablepastecolumnbefore tablepastecolumnafter')\n        });\n      }\n      if (contains(hasCellMenuItems, true)) {\n        editor.ui.registry.addNestedMenuItem('cell', {\n          type: 'nestedmenuitem',\n          text: 'Cell',\n          getSubmenuItems: constant('tablecellprops tablemergecells tablesplitcells')\n        });\n      }\n      editor.ui.registry.addContextMenu('table', {\n        update: () => {\n          selectionTargets.resetTargets();\n          return selectionTargets.targets().fold(constant(''), targets => {\n            if (name(targets.element) === 'caption') {\n              return 'tableprops deletetable';\n            } else {\n              return 'cell row column | advtablesort | tableprops deletetable';\n            }\n          });\n        }\n      });\n      const tableClassList = filterNoneItem(getTableClassList(editor));\n      if (tableClassList.length !== 0 && editor.queryCommandSupported('mceTableToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tableclass', {\n          icon: 'table-classes',\n          text: 'Table styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableClassList, 'tableclass', value => editor.execCommand('mceTableToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupTable\n        });\n      }\n      const tableCellClassList = filterNoneItem(getCellClassList(editor));\n      if (tableCellClassList.length !== 0 && editor.queryCommandSupported('mceTableCellToggleClass')) {\n        editor.ui.registry.addNestedMenuItem('tablecellclass', {\n          icon: 'table-cell-classes',\n          text: 'Cell styles',\n          getSubmenuItems: () => buildMenuItems(editor, tableCellClassList, 'tablecellclass', value => editor.execCommand('mceTableCellToggleClass', false, value)),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      if (editor.queryCommandSupported('mceTableApplyCellStyle')) {\n        editor.ui.registry.addNestedMenuItem('tablecellvalign', {\n          icon: 'vertical-align',\n          text: 'Vertical align',\n          getSubmenuItems: () => buildMenuItems(editor, verticalAlignValues, 'tablecellverticalalign', applyTableCellStyle(editor, 'vertical-align')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderwidth', {\n          icon: 'border-width',\n          text: 'Border width',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderWidths(editor), 'tablecellborderwidth', applyTableCellStyle(editor, 'border-width')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellborderstyle', {\n          icon: 'border-style',\n          text: 'Border style',\n          getSubmenuItems: () => buildMenuItems(editor, getTableBorderStyles(editor), 'tablecellborderstyle', applyTableCellStyle(editor, 'border-style')),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbackgroundcolor', {\n          icon: 'cell-background-color',\n          text: 'Background color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBackgroundColorMap(editor), 'background-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n        editor.ui.registry.addNestedMenuItem('tablecellbordercolor', {\n          icon: 'cell-border-color',\n          text: 'Border color',\n          getSubmenuItems: () => buildColorMenu(editor, getTableBorderColorMap(editor), 'border-color'),\n          onSetup: selectionTargets.onSetupCellOrRow\n        });\n      }\n      addToggleMenuIfRegistered('tablecaption', {\n        icon: 'table-caption',\n        text: 'Table caption',\n        command: 'mceTableToggleCaption',\n        onSetup: selectionTargets.onSetupTableWithCaption\n      });\n      addToggleMenuIfRegistered('tablerowheader', {\n        text: 'Row header',\n        icon: 'table-top-header',\n        command: 'mceTableRowType',\n        onAction: changeRowHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n      addToggleMenuIfRegistered('tablecolheader', {\n        text: 'Column header',\n        icon: 'table-left-header',\n        command: 'mceTableColType',\n        onAction: changeColumnHeader(editor),\n        onSetup: selectionTargets.onSetupTableRowHeaders\n      });\n    };\n\n    const Plugin = editor => {\n      const selectionTargets = getSelectionTargets(editor);\n      register(editor);\n      registerCommands(editor);\n      addMenuItems(editor, selectionTargets);\n      addButtons(editor, selectionTargets);\n      addToolbars(editor);\n    };\n    var Plugin$1 = () => {\n      global$3.add('table', Plugin);\n    };\n\n    Plugin$1();\n\n})();\n"],"names":["global$3","hasProto","v","constructor","predicate","_a","typeOf","x","proto","isType$1","type","value","isSimpleType","eq$1","t","a","isString","isArray","isBoolean","isUndefined","isNullable","isNonNullable","isFunction","isNumber","noop","compose1","fbc","fab","constant","identity","tripleEquals","b","curry","fn","initialArgs","restArgs","all","call","f","never","always","Optional","tag","onNone","onSome","mapper","binder","replacement","thunk","message","worker","keys","hasOwnProperty","each$1","obj","props","k","len","i","objAcc","r","internalFilter","pred","onTrue","onFalse","filter$1","mapToArray","name","values","size","get$4","key","has","hasNonNullableKey","isEmpty$1","nativeIndexOf","nativePush","rawIndexOf","ts","contains","xs","exists","range","num","map","each","eachr","partition","pass","fail","filter","foldr","acc","foldl","findUntil","until","find","flatten$1","bind","forall","mapToObject","get$3","head","last","findMap","arr","COMMENT","DOCUMENT","DOCUMENT_FRAGMENT","ELEMENT","TEXT","fromHtml","html","scope","div","fromDom$1","fromTag","node","fromText","text","SugarElement","docElm","y","is$2","element","selector","dom","elem","bypassSelector","all$1","base","one","eq","e1","e2","is$1","isType","isComment","isElement","isText","isDocument","isDocumentFragment","isTag","e","owner","documentOrOwner","dos","parent","parents","isRoot","stop","ret","rawParent","p","prevSibling","nextSibling","children$3","child$3","index","cs","firstChild","isShadowRoot","getRootNode","getShadowRoot","getShadowHost","inBody","doc","ClosestOrAncestor","is","ancestor","ancestor$1","el","closest$2","s","test","child$2","child$1","descendant","closest$1","closest","target","isEditable","assumeEditable","editable","getRaw$1","getNodeName","elm","getBody","editor","getIsRoot","removePxSuffix","addPxSuffix","getSelectionStart","getSelectionEnd","isInEditableContext","cell","children$2","descendants$1","result","children$1","descendants","rawSet","set$2","setAll","attrs","get$2","getOpt","remove$2","clone","attr","lhs","rhs","comparator","left","cat","push","lift2","oa","ob","flatten","oot","someIf","removeFromStart","str","numChars","checkRange","substr","start","removeLeading","prefix","startsWith","trim","isNotEmpty","isEmpty","toInt","radix","toFloat","isSupported","internalSet","property","internalRemove","set$1","get$1","getUnsafeProperty","getRaw","raw","remove$1","getAttrValue","fallback","firstLayer","filterFirstLayer","validSectionList","isValidSection","parentName","grid","rows","columns","detail","rowspan","colspan","extended","row","column","isLocked","rowdetail","cells","section","bounds","startRow","startCol","finishRow","finishCol","columnext","colgroup","lookup","tags","isRootOrUpperTable","columnGroups","columnGroup","table","fromRowsOrColGroups","elems","getSection","cells$1","getParentSection","group","fromTable$1","rows$1","LOCKED_COL_ATTR","getLockedColumnsFromTable","lockedColStr","lockedCols","getAt","warehouse","findItem","item","filtered","filterItems","generateColumns","rowData","columnsGroup","columnIndex","colIndex","generate$1","list","access","lockedColumns","maxRows","maxColumns","rowCount","colgroupRows","currentRow","rowCell","current","occupiedColumnPosition","occupiedRowPosition","rowPosition","columnPosition","newpos","colgroups","Warehouse","w","global$2","getTDTHOverallStyle","firstChildStyle","currentStyle","setAlign","align","setVAlign","fireTableModified","data","toNumber","px","getProp","calcContentBoxSize","upper","lower","paddingUpper","paddingLower","borderUpper","borderLower","getCalculatedWidth","boxSizing","width","getInner","global$1","defaultTableToolbar","defaultCellBorderWidths","defaultCellBorderStyles","defaultWidth","getPixelForcedWidth","parentBlock","determineDefaultStyles","defaultStyles","isResponsiveForced","shouldStyleWithCss","isPixelsForced","determineDefaultAttributes","defaultAttributes","option","register","registerOption","getTableSizingMode","getTableBorderWidths","getTableBorderStyles","hasAdvancedCellTab","hasAdvancedRowTab","hasAdvancedTableTab","hasAppearanceOptions","hasTableGrid","getCellClassList","getRowClassList","getTableClassList","getToolbar","getTableBackgroundColorMap","getTableBorderColorMap","getDefaultStyles","options","getDefaultAttributes","isWithin","isRectangular","isRect","detailIsWithin","j","getBounds","detailA","detailB","getAnyBox","startCell","finishCell","startCoords","finishCoords","sc","fc","getBox$1","getBox","first","getWarehouse","before","marker","after$1","append$1","prepend","wrap","wrapper","after","elements","append","remove","unwrap","children","api","get","getOption","set","TagBoundaries","DomUniverse","clone$1","document","isBoundary","isEmptyTag","isNonEditable","comparePosition","other","copyAttributesTo","source","destination","as","isSpecial","getLanguage","universe","look","tail","oneAll","unsafeOne","commonElement","end","sharedOne$1","sharedOne","_universe","lookupTable","container","retrieve$1","sels","getEdges","firstSelectedSelector","lastSelectedSelector","retrieve","retrieveBox","edges","sectionSelector","firstAncestor","lastAncestor","fA","lA","fromDom","nodes","strSelected","strFirstSelected","strFirstSelectedSelector","strLastSelected","strLastSelectedSelector","ephemera","getSelectionCellFallback","getSelectionFromSelector","initCell","cellName","getSelectionCellOrCaption","getSelectionCell","getCellsFromSelection","getRowsFromSelection","selected","cellOpt","rowsOpt","verticalAlignValues","hexColour","normalizeHex","shorthandRegex","longformRegex","isHexString","hex","fromString$1","toHex","component","fromRgba","rgbaColour","rgbRegex","rgbaRegex","red","green","blue","alpha","fromStringValues","g","fromString","rgbaString","rgbMatch","rgbaMatch","anyToHex","color","canvas","canvasContext","rgba","rgbaToHexString","h","Cell","initial","singleton","doRevoke","subject","revoke","unbindable","onSetupToggle","formatName","formatValue","boundCallback","isNone","init","selectedCells","checkNode","match","isListGroup","buildListItems","items","buildMenuItems","format","onAction","applyTableCellStyle","style","filterNoneItem","generateMenuItemsCallback","callback","buildColorMenu","colorList","colorMap","entry","changeRowHeader","newType","changeColumnHeader","getClassList$1","classes","getItems$2","getAdvancedTab","dialogName","advTabItems","DomModifier","prop","isHeaderCell","getRowHeaderType","isHeaderRow","isHeaderCells","getRowType$1","findCommonCellType","headerCells","findCommonRowType","rowTypes","hasHeader","hasFooter","hasBody","cached","called","args","findInWarehouse","extractCells","details","cell$1","lc","onMergable","_warehouse","onUnmergable","onCells","isUnlockedTableCell","allUnlocked","onUnlockedMergable","mergeable","onUnlockedUnmergable","cases","constructors","adt","acase","count","keys$1","argLength","foldArgs","branches","branchKeys","reqKey","label","getRowsType","house","lastSelectedCell","minRowRange","maxRowRange","selectedRows","rgbToHex","extractAdvancedStyles","getSharedValues","baseData","comparisonData","itemValue","itemKey","comparisonValue","getAlignment","formats","getHAlignment","getVAlignment","extractDataFromSettings","hasAdvTableTab","extractAdvancedStyleData","defaultData","getBorder","borderWidth","border","advStyle","getCellPaddingCellSpacing","spacing","cellspacing","padding","cellpadding","getRowType","extractDataFromTableElement","optBorderWidth","extractDataFromRowElement","extractDataFromCellElement","colElm","getStyle","getSelectedCells","allCells","cellA","cellB","col","updateSimpleProps$1","modifier","colModifier","shouldUpdate","updateAdvancedProps$1","applyStyleData$1","wasChanged","isSingleCell","cellElm","shouldOverrideCurrentValue","applyStructureData$1","applyCellData","oldData","modifiedData","styleModified","_value","structureModified","onSubmitCellForm","getData$1","cellsData","open$2","dialogTabPanel","dialogPanel","getClassList","formChildren","getItems$1","updateSimpleProps","updateAdvancedProps","applyStyleData","rowElm","applyStructureData","applyRowData","typeModified","onSubmitRowForm","open$1","rowsData","getItems","insertNewTable","rowColCountItems","alwaysItems","appearanceItems","alignmentItem","classListItem","styleTDTH","applyDataToElement","tableElm","shouldApplyOnCell","styles","shouldStyleWithCss$1","hasAdvancedTableTab$1","cellStyles","advData","onSubmitTableForm","cols","applicableCellProperties","captionElm","captionModified","open","generalPanel","nonAdvancedForm","advancedForm","dialogBody","registerCommands","runAction","func","child","selection","unmergable","hasSpan","span","hasRowOrColSpan","mergable","noMenu","forMenu","getSelectionTargets","targets","changeHandlers","selectionDetails","isCaption","isDisabledForSelection","getStart","getEnd","findTargets","startCellOrCaption","startTable","endTable","getExtractedDetails","locked","resetTargets","setupHandler","handler","onSetup","isDisabled","onSetupWithToggle","isActive","isDisabledFromLocked","lockedDisable","onSetupTable","onSetupCellOrRow","onSetupColumn","onSetupPasteable","getClipboardData","onSetupPasteableColumn","onSetupMergeable","_targets","onSetupUnmergeable","onSetupTableWithCaption","onSetupTableHeaders","command","headerType","onSetupTableRowHeaders","onSetupTableColumnHeaders","global","tableTypeBase","tableTypeRow","tableTypeColumn","getData","getRows","getColumns","onSetupEditable$1","nodeChanged","addButtons","selectionTargets","cmd","addButtonIfRegistered","spec","addToggleButtonIfRegistered","tableClassList","tableCellClassList","addToolbars","isEditableTable","toolbar","onSetupEditable","addMenuItems","addMenuIfRegistered","addToggleMenuIfRegistered","insertTableAction","hasRowMenuItems","hasColumnMenuItems","hasCellMenuItems","Plugin","Plugin$1"],"mappings":";;;;;;;;;;;;;;;;;CAIC,WAAY;AAGT,MAAIA,IAAW,QAAQ,KAAK,MAAM,QAAQ,uBAAuB;AAEjE,QAAMC,KAAW,CAACC,GAAGC,GAAaC,MAAc;AAC9C,QAAIC;AACJ,WAAID,EAAUF,GAAGC,EAAY,SAAS,IAC7B,OAEEE,IAAKH,EAAE,iBAAiB,QAAQG,MAAO,SAAS,SAASA,EAAG,UAAUF,EAAY;AAAA,EAC7F,GAEIG,IAAS,CAAAC,MAAK;AAClB,UAAM,IAAI,OAAOA;AACjB,WAAIA,MAAM,OACD,SACE,MAAM,YAAY,MAAM,QAAQA,CAAC,IACnC,UACE,MAAM,YAAYN,GAASM,GAAG,QAAQ,CAAC,GAAGC,MAAUA,EAAM,cAAc,CAAC,CAAC,IAC5E,WAEA;AAAA,EACT,GAEIC,IAAW,CAAAC,MAAQ,CAAAC,MAASL,EAAOK,CAAK,MAAMD,GAC9CE,IAAe,CAAAF,MAAQ,CAAAC,MAAS,OAAOA,MAAUD,GACjDG,IAAO,CAAAC,MAAK,CAAAC,MAAKD,MAAMC,GACvBC,KAAWP,EAAS,QAAQ,GAC5BQ,KAAUR,EAAS,OAAO,GAC1BS,KAAYN,EAAa,SAAS,GAClCO,KAAcN,EAAK,MAAS,GAC5BO,KAAa,CAAAL,MAAKA,KAAM,MACxBM,KAAgB,CAAAN,MAAK,CAACK,GAAWL,CAAC,GAClCO,IAAaV,EAAa,UAAU,GACpCW,KAAWX,EAAa,QAAQ,GAEhCY,KAAO,MAAM;AAAA,EAAA,GAEbC,KAAW,CAACC,GAAKC,MAAQ,OAAKD,EAAIC,EAAIZ,CAAC,CAAC,GACxCa,IAAW,CAAAjB,MACR,MACEA,GAGLkB,KAAW,CAAAtB,MACRA,GAEHuB,KAAe,CAACf,GAAGgB,MAChBhB,MAAMgB;AAEf,WAASC,EAAMC,MAAOC,GAAa;AACjC,WAAO,IAAIC,MAAa;AACtB,YAAMC,IAAMF,EAAY,OAAOC,CAAQ;AACvC,aAAOF,EAAG,MAAM,MAAMG,CAAG;AAAA,IAAA;AAAA,EAC3B;AAEF,QAAMC,KAAO,CAAAC,MAAK;AAChB,IAAAA,EAAA;AAAA,EAAE,GAEEC,IAAQX,EAAS,EAAK,GACtBY,KAASZ,EAAS,EAAI;AAAA,EAE5B,MAAMa,EAAS;AAAA,IACb,YAAYC,GAAK/B,GAAO;AACtB,WAAK,MAAM+B,GACX,KAAK,QAAQ/B;AAAA,IAAA;AAAA,IAEf,OAAO,KAAKA,GAAO;AACjB,aAAO,IAAI8B,EAAS,IAAM9B,CAAK;AAAA,IAAA;AAAA,IAEjC,OAAO,OAAO;AACZ,aAAO8B,EAAS;AAAA,IAAA;AAAA,IAElB,KAAKE,GAAQC,GAAQ;AACnB,aAAI,KAAK,MACAA,EAAO,KAAK,KAAK,IAEjBD,EAAA;AAAA,IACT;AAAA,IAEF,SAAS;AACP,aAAO,KAAK;AAAA,IAAA;AAAA,IAEd,SAAS;AACP,aAAO,CAAC,KAAK;AAAA,IAAA;AAAA,IAEf,IAAIE,GAAQ;AACV,aAAI,KAAK,MACAJ,EAAS,KAAKI,EAAO,KAAK,KAAK,CAAC,IAEhCJ,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,KAAKK,GAAQ;AACX,aAAI,KAAK,MACAA,EAAO,KAAK,KAAK,IAEjBL,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,OAAOrC,GAAW;AAChB,aAAO,KAAK,OAAOA,EAAU,KAAK,KAAK;AAAA,IAAA;AAAA,IAEzC,OAAOA,GAAW;AAChB,aAAO,CAAC,KAAK,OAAOA,EAAU,KAAK,KAAK;AAAA,IAAA;AAAA,IAE1C,OAAOA,GAAW;AAChB,aAAI,CAAC,KAAK,OAAOA,EAAU,KAAK,KAAK,IAC5B,OAEAqC,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,MAAMM,GAAa;AACjB,aAAO,KAAK,MAAM,KAAK,QAAQA;AAAA,IAAA;AAAA,IAEjC,GAAGA,GAAa;AACd,aAAO,KAAK,MAAM,OAAOA;AAAA,IAAA;AAAA,IAE3B,WAAWC,GAAO;AAChB,aAAO,KAAK,MAAM,KAAK,QAAQA,EAAA;AAAA,IAAM;AAAA,IAEvC,QAAQA,GAAO;AACb,aAAO,KAAK,MAAM,OAAOA,EAAA;AAAA,IAAM;AAAA,IAEjC,SAASC,GAAS;AAChB,UAAK,KAAK;AAGR,eAAO,KAAK;AAFZ,YAAM,IAAI,MAAMA,KAAmD,yBAAyB;AAAA,IAG9F;AAAA,IAEF,OAAO,KAAKtC,GAAO;AACjB,aAAOU,GAAcV,CAAK,IAAI8B,EAAS,KAAK9B,CAAK,IAAI8B,EAAS,KAAA;AAAA,IAAK;AAAA,IAErE,YAAY;AACV,aAAO,KAAK,MAAM,KAAK,QAAQ;AAAA,IAAA;AAAA,IAEjC,iBAAiB;AACf,aAAO,KAAK;AAAA,IAAA;AAAA,IAEd,KAAKS,GAAQ;AACX,MAAI,KAAK,OACPA,EAAO,KAAK,KAAK;AAAA,IACnB;AAAA,IAEF,UAAU;AACR,aAAO,KAAK,MAAM,CAAC,KAAK,KAAK,IAAI,CAAA;AAAA,IAAC;AAAA,IAEpC,WAAW;AACT,aAAO,KAAK,MAAM,QAAS,KAAK,KAAM,MAAM;AAAA,IAAA;AAAA,EAC9C;AAEF,EAAAT,EAAS,gBAAgB,IAAIA,EAAS,EAAK;AAE3C,QAAMU,IAAO,OAAO,MACdC,KAAiB,OAAO,gBACxBC,KAAS,CAACC,GAAKhB,MAAM;AACzB,UAAMiB,IAAQJ,EAAKG,CAAG;AACtB,aAASE,IAAI,GAAGC,IAAMF,EAAM,QAAQC,IAAIC,GAAKD,KAAK;AAChD,YAAME,IAAIH,EAAMC,CAAC,GACXjD,IAAI+C,EAAII,CAAC;AACf,MAAApB,EAAE/B,GAAGmD,CAAC;AAAA,IAAA;AAAA,EACR,GAEIC,KAAS,CAAAC,MAAK,CAACrD,GAAGmD,MAAM;AAC5B,IAAAE,EAAEF,CAAC,IAAInD;AAAA,EAAA,GAEHsD,KAAiB,CAACP,GAAKQ,GAAMC,GAAQC,MAAY;AACrD,IAAAX,GAAOC,GAAK,CAAC/C,GAAGmD,MAAM;AACpB,OAACI,EAAKvD,GAAGmD,CAAC,IAAIK,IAASC,GAASzD,GAAGmD,CAAC;AAAA,IAAA,CACrC;AAAA,EAAA,GAEGO,KAAW,CAACX,GAAKQ,MAAS;AAC9B,UAAMhD,IAAI,CAAA;AACV,WAAA+C,GAAeP,GAAKQ,GAAMH,GAAO7C,CAAC,GAAGU,EAAI,GAClCV;AAAA,EAAA,GAEHoD,KAAa,CAACZ,GAAKhB,MAAM;AAC7B,UAAMsB,IAAI,CAAA;AACV,WAAAP,GAAOC,GAAK,CAAC3C,GAAOwD,MAAS;AAC3B,MAAAP,EAAE,KAAKtB,EAAE3B,GAAOwD,CAAI,CAAC;AAAA,IAAA,CACtB,GACMP;AAAA,EAAA,GAEHQ,KAAS,CAAAd,MACNY,GAAWZ,GAAKzB,EAAQ,GAE3BwC,IAAO,CAAAf,MACJH,EAAKG,CAAG,EAAE,QAEbgB,IAAQ,CAAChB,GAAKiB,MACXC,EAAIlB,GAAKiB,CAAG,IAAI9B,EAAS,KAAKa,EAAIiB,CAAG,CAAC,IAAI9B,EAAS,KAAA,GAEtD+B,IAAM,CAAClB,GAAKiB,MAAQnB,GAAe,KAAKE,GAAKiB,CAAG,GAChDE,KAAoB,CAACnB,GAAKiB,MAAQC,EAAIlB,GAAKiB,CAAG,KAAKjB,EAAIiB,CAAG,MAAM,UAAajB,EAAIiB,CAAG,MAAM,MAC1FG,KAAY,CAAAd,MAAK;AACrB,eAAWrD,KAAKqD;AACd,UAAIR,GAAe,KAAKQ,GAAGrD,CAAC;AAC1B,eAAO;AAGX,WAAO;AAAA,EAAA,GAGHoE,KAAgB,MAAM,UAAU,SAChCC,KAAa,MAAM,UAAU,MAC7BC,KAAa,CAACC,GAAI,MAAMH,GAAc,KAAKG,GAAI,CAAC,GAChDC,IAAW,CAACC,GAAIzE,MAAMsE,GAAWG,GAAIzE,CAAC,IAAI,IAC1C0E,KAAS,CAACD,GAAIlB,MAAS;AAC3B,aAASJ,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,UAAII,EAAKvD,GAAGmD,CAAC;AACX,eAAO;AAAA,IACT;AAEF,WAAO;AAAA,EAAA,GAEHwB,KAAQ,CAACC,GAAK7C,MAAM;AACxB,UAAMsB,IAAI,CAAA;AACV,aAASF,IAAI,GAAGA,IAAIyB,GAAKzB;AACvB,MAAAE,EAAE,KAAKtB,EAAEoB,CAAC,CAAC;AAEb,WAAOE;AAAA,EAAA,GAEHwB,IAAM,CAACJ,GAAI1C,MAAM;AACrB,UAAMmB,IAAMuB,EAAG,QACTpB,IAAI,IAAI,MAAMH,CAAG;AACvB,aAASC,IAAI,GAAGA,IAAID,GAAKC,KAAK;AAC5B,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,MAAAE,EAAEF,CAAC,IAAIpB,EAAE/B,GAAGmD,CAAC;AAAA,IAAA;AAEf,WAAOE;AAAA,EAAA,GAEHyB,IAAO,CAACL,GAAI1C,MAAM;AACtB,aAASoB,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,MAAApB,EAAE/B,GAAGmD,CAAC;AAAA,IAAA;AAAA,EACR,GAEI4B,KAAQ,CAACN,GAAI1C,MAAM;AACvB,aAASoB,IAAIsB,EAAG,SAAS,GAAGtB,KAAK,GAAGA,KAAK;AACvC,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,MAAApB,EAAE/B,GAAGmD,CAAC;AAAA,IAAA;AAAA,EACR,GAEI6B,KAAY,CAACP,GAAIlB,MAAS;AAC9B,UAAM0B,IAAO,CAAA,GACPC,IAAO,CAAA;AACb,aAAS/B,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AAEd,OADYI,EAAKvD,GAAGmD,CAAC,IAAI8B,IAAOC,GAC5B,KAAKlF,CAAC;AAAA,IAAA;AAEZ,WAAO;AAAA,MACL,MAAAiF;AAAA,MACA,MAAAC;AAAA,IAAA;AAAA,EACF,GAEIC,IAAS,CAACV,GAAIlB,MAAS;AAC3B,UAAMF,IAAI,CAAA;AACV,aAASF,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,MAAII,EAAKvD,GAAGmD,CAAC,KACXE,EAAE,KAAKrD,CAAC;AAAA,IACV;AAEF,WAAOqD;AAAA,EAAA,GAEH+B,KAAQ,CAACX,GAAI1C,GAAGsD,OACpBN,GAAMN,GAAI,CAACzE,GAAGmD,MAAM;AAClB,IAAAkC,IAAMtD,EAAEsD,GAAKrF,GAAGmD,CAAC;AAAA,EAAA,CAClB,GACMkC,IAEHC,KAAQ,CAACb,GAAI1C,GAAGsD,OACpBP,EAAKL,GAAI,CAACzE,GAAGmD,MAAM;AACjB,IAAAkC,IAAMtD,EAAEsD,GAAKrF,GAAGmD,CAAC;AAAA,EAAA,CAClB,GACMkC,IAEHE,KAAY,CAACd,GAAIlB,GAAMiC,MAAU;AACrC,aAASrC,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,UAAII,EAAKvD,GAAGmD,CAAC;AACX,eAAOjB,EAAS,KAAKlC,CAAC;AACxB,UAAWwF,EAAMxF,GAAGmD,CAAC;AACnB;AAAA,IACF;AAEF,WAAOjB,EAAS,KAAA;AAAA,EAAK,GAEjBuD,KAAO,CAAChB,GAAIlB,MACTgC,GAAUd,GAAIlB,GAAMvB,CAAK,GAE5B0D,KAAY,CAAAjB,MAAM;AACtB,UAAMpB,IAAI,CAAA;AACV,aAASF,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAK,EAAEC,GAAG;AAC7C,UAAI,CAACzC,GAAQ+D,EAAGtB,CAAC,CAAC;AAChB,cAAM,IAAI,MAAM,sBAAsBA,IAAI,+BAA+BsB,CAAE;AAE7E,MAAAJ,GAAW,MAAMhB,GAAGoB,EAAGtB,CAAC,CAAC;AAAA,IAAA;AAE3B,WAAOE;AAAA,EAAA,GAEHsC,KAAO,CAAClB,GAAI1C,MAAM2D,GAAUb,EAAIJ,GAAI1C,CAAC,CAAC,GACtC6D,KAAS,CAACnB,GAAIlB,MAAS;AAC3B,aAASJ,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAK,EAAEC,GAAG;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,UAAII,EAAKvD,GAAGmD,CAAC,MAAM;AACjB,eAAO;AAAA,IACT;AAEF,WAAO;AAAA,EAAA,GAEH0C,KAAc,CAACpB,GAAI1C,MAAM;AAC7B,UAAMsB,IAAI,CAAA;AACV,aAASF,IAAI,GAAGD,IAAMuB,EAAG,QAAQtB,IAAID,GAAKC,KAAK;AAC7C,YAAMnD,IAAIyE,EAAGtB,CAAC;AACd,MAAAE,EAAE,OAAOrD,CAAC,CAAC,IAAI+B,EAAE/B,GAAGmD,CAAC;AAAA,IAAA;AAEvB,WAAOE;AAAA,EAAA,GAEHyC,KAAQ,CAACrB,GAAItB,MAAMA,KAAK,KAAKA,IAAIsB,EAAG,SAASvC,EAAS,KAAKuC,EAAGtB,CAAC,CAAC,IAAIjB,EAAS,KAAA,GAC7E6D,KAAO,CAAAtB,MAAMqB,GAAMrB,GAAI,CAAC,GACxBuB,KAAO,CAAAvB,MAAMqB,GAAMrB,GAAIA,EAAG,SAAS,CAAC,GACpCwB,KAAU,CAACC,GAAKnE,MAAM;AAC1B,aAASoB,IAAI,GAAGA,IAAI+C,EAAI,QAAQ/C,KAAK;AACnC,YAAME,IAAItB,EAAEmE,EAAI/C,CAAC,GAAGA,CAAC;AACrB,UAAIE,EAAE;AACJ,eAAOA;AAAA,IACT;AAEF,WAAOnB,EAAS,KAAA;AAAA,EAAK,GAGjBiE,KAAU,GACVC,KAAW,GACXC,KAAoB,IACpBC,KAAU,GACVC,KAAO,GAEPC,KAAW,CAACC,GAAMC,MAAU;AAEhC,UAAMC,KADMD,KAAS,UACL,cAAc,KAAK;AAEnC,QADAC,EAAI,YAAYF,GACZ,CAACE,EAAI,cAAA,KAAmBA,EAAI,WAAW,SAAS,GAAG;AACrD,YAAMjE,IAAU;AAChB,oBAAQ,MAAMA,GAAS+D,CAAI,GACrB,IAAI,MAAM/D,CAAO;AAAA,IAAA;AAEzB,WAAOkE,GAAUD,EAAI,WAAW,CAAC,CAAC;AAAA,EAAA,GAE9BE,KAAU,CAAC1E,GAAKuE,MAAU;AAE9B,UAAMI,KADMJ,KAAS,UACJ,cAAcvE,CAAG;AAClC,WAAOyE,GAAUE,CAAI;AAAA,EAAA,GAEjBC,KAAW,CAACC,GAAMN,MAAU;AAEhC,UAAMI,KADMJ,KAAS,UACJ,eAAeM,CAAI;AACpC,WAAOJ,GAAUE,CAAI;AAAA,EAAA,GAEjBF,KAAY,CAAAE,MAAQ;AACxB,QAAIA,KAAS;AACX,YAAM,IAAI,MAAM,kCAAkC;AAEpD,WAAO,EAAE,KAAKA,EAAA;AAAA,EAAK,GAGfG,IAAe;AAAA,IACnB,UAAAT;AAAA,IACA,SAAAK;AAAA,IACA,UAAAE;AAAA,IACA,SAASH;AAAA,IACT,WANgB,CAACM,GAAQlH,GAAGmH,MAAMjF,EAAS,KAAKgF,EAAO,IAAI,iBAAiBlH,GAAGmH,CAAC,CAAC,EAAE,IAAIP,EAAS;AAAA,EAMhG,GAGIQ,IAAO,CAACC,GAASC,MAAa;AAClC,UAAMC,IAAMF,EAAQ;AACpB,QAAIE,EAAI,aAAajB;AACnB,aAAO;AACF;AACL,YAAMkB,IAAOD;AACb,UAAIC,EAAK,YAAY;AACnB,eAAOA,EAAK,QAAQF,CAAQ;AAC9B,UAAWE,EAAK,sBAAsB;AACpC,eAAOA,EAAK,kBAAkBF,CAAQ;AACxC,UAAWE,EAAK,0BAA0B;AACxC,eAAOA,EAAK,sBAAsBF,CAAQ;AAC5C,UAAWE,EAAK,uBAAuB;AACrC,eAAOA,EAAK,mBAAmBF,CAAQ;AAEvC,YAAM,IAAI,MAAM,gCAAgC;AAAA,IAClD;AAAA,EACF,GAEIG,KAAiB,CAAAF,MAAOA,EAAI,aAAajB,MAAWiB,EAAI,aAAanB,MAAYmB,EAAI,aAAalB,MAAqBkB,EAAI,sBAAsB,GACjJG,KAAQ,CAACJ,GAAUZ,MAAU;AACjC,UAAMiB,IAAOjB,MAAU,SAAY,WAAWA,EAAM;AACpD,WAAOe,GAAeE,CAAI,IAAI,CAAA,IAAK9C,EAAI8C,EAAK,iBAAiBL,CAAQ,GAAGL,EAAa,OAAO;AAAA,EAAA,GAExFW,KAAM,CAACN,GAAUZ,MAAU;AAC/B,UAAMiB,IAAOjB,MAAU,SAAY,WAAWA,EAAM;AACpD,WAAOe,GAAeE,CAAI,IAAIzF,EAAS,SAASA,EAAS,KAAKyF,EAAK,cAAcL,CAAQ,CAAC,EAAE,IAAIL,EAAa,OAAO;AAAA,EAAA,GAGhHY,IAAK,CAACC,GAAIC,MAAOD,EAAG,QAAQC,EAAG,KAC/BC,KAAOZ;AAEb,SAAO,SAAW,OAAuB,SAAS,cAAc,EAAA;AAEhE,QAAMxD,IAAO,CAAAyD,MACDA,EAAQ,IAAI,SACb,YAAA,GAELlH,KAAO,CAAAkH,MAAWA,EAAQ,IAAI,UAC9BY,KAAS,CAAA1H,MAAK,CAAA8G,MAAWlH,GAAKkH,CAAO,MAAM9G,GAC3C2H,KAAY,OAAW/H,GAAKkH,CAAO,MAAMlB,MAAWvC,EAAKyD,CAAO,MAAM,YACtEc,IAAYF,GAAO3B,EAAO,GAC1B8B,KAASH,GAAO1B,EAAI,GACpB8B,KAAaJ,GAAO7B,EAAQ,GAC5BkC,KAAqBL,GAAO5B,EAAiB,GAC7CkC,KAAQ,OAAO,CAAAC,MAAKL,EAAUK,CAAC,KAAK5E,EAAK4E,CAAC,MAAMrG,GAEhDsG,KAAQ,CAAApB,MAAWJ,EAAa,QAAQI,EAAQ,IAAI,aAAa,GACjEqB,KAAkB,CAAAC,MAAON,GAAWM,CAAG,IAAIA,IAAMF,GAAME,CAAG,GAC1DC,KAAS,CAAAvB,MAAWnF,EAAS,KAAKmF,EAAQ,IAAI,UAAU,EAAE,IAAIJ,EAAa,OAAO,GAClF4B,KAAU,CAACxB,GAASyB,MAAW;AACnC,UAAMC,IAAOhI,EAAW+H,CAAM,IAAIA,IAAS9G;AAC3C,QAAIuF,IAAMF,EAAQ;AAClB,UAAM2B,IAAM,CAAA;AACZ,WAAOzB,EAAI,eAAe,QAAQA,EAAI,eAAe,UAAW;AAC9D,YAAM0B,IAAY1B,EAAI,YAChB2B,IAAIjC,EAAa,QAAQgC,CAAS;AAExC,UADAD,EAAI,KAAKE,CAAC,GACNH,EAAKG,CAAC,MAAM;AACd;AAEA,MAAA3B,IAAM0B;AAAA,IACR;AAEF,WAAOD;AAAA,EAAA,GAEHG,KAAc,CAAA9B,MAAWnF,EAAS,KAAKmF,EAAQ,IAAI,eAAe,EAAE,IAAIJ,EAAa,OAAO,GAC5FmC,KAAc,CAAA/B,MAAWnF,EAAS,KAAKmF,EAAQ,IAAI,WAAW,EAAE,IAAIJ,EAAa,OAAO,GACxFoC,KAAa,CAAAhC,MAAWxC,EAAIwC,EAAQ,IAAI,YAAYJ,EAAa,OAAO,GACxEqC,KAAU,CAACjC,GAASkC,MAAU;AAClC,UAAMC,IAAKnC,EAAQ,IAAI;AACvB,WAAOnF,EAAS,KAAKsH,EAAGD,CAAK,CAAC,EAAE,IAAItC,EAAa,OAAO;AAAA,EAAA,GAEpDwC,KAAa,CAAApC,MAAWiC,GAAQjC,GAAS,CAAC,GAE1CqC,KAAe,OAAOpB,GAAmBK,CAAG,KAAK7H,GAAc6H,EAAI,IAAI,IAAI,GAE3EgB,KADY5I,EAAW,QAAQ,UAAU,YAAY,KAAKA,EAAW,KAAK,UAAU,WAAW,IACrE,CAAA,MAAKkG,EAAa,QAAQ,EAAE,IAAI,YAAA,CAAa,IAAIyB,IAC3EkB,KAAgB,CAAA,MAAK;AACzB,UAAMvG,IAAIsG,GAAY,CAAC;AACvB,WAAOD,GAAarG,CAAC,IAAInB,EAAS,KAAKmB,CAAC,IAAInB,EAAS,KAAA;AAAA,EAAK,GAEtD2H,KAAgB,CAAA,MAAK5C,EAAa,QAAQ,EAAE,IAAI,IAAI,GAEpD6C,KAAS,CAAAzC,MAAW;AACxB,UAAME,IAAMa,GAAOf,CAAO,IAAIA,EAAQ,IAAI,aAAaA,EAAQ;AAC/D,QAAyBE,KAAQ,QAAQA,EAAI,kBAAkB;AAC7D,aAAO;AAET,UAAMwC,IAAMxC,EAAI;AAChB,WAAOqC,GAAc3C,EAAa,QAAQM,CAAG,CAAC,EAAE,KAAK,MAAMwC,EAAI,KAAK,SAASxC,CAAG,GAAGrG,GAAS4I,IAAQD,EAAa,CAAC;AAAA,EAAA;AAGpH,MAAIG,KAAoB,CAACC,GAAIC,GAAUxD,GAAOlG,GAAGsI,MAC3CmB,EAAGvD,GAAOlG,CAAC,IACN0B,EAAS,KAAKwE,CAAK,IACjB3F,EAAW+H,CAAM,KAAKA,EAAOpC,CAAK,IACpCxE,EAAS,KAAA,IAETgI,EAASxD,GAAOlG,GAAGsI,CAAM;AAIpC,QAAMqB,KAAa,CAACzD,GAAO7G,GAAWiJ,MAAW;AAC/C,QAAIzB,IAAUX,EAAM;AACpB,UAAMqC,IAAOhI,EAAW+H,CAAM,IAAIA,IAAS9G;AAC3C,WAAOqF,EAAQ,cAAY;AACzB,MAAAA,IAAUA,EAAQ;AAClB,YAAM+C,IAAKnD,EAAa,QAAQI,CAAO;AACvC,UAAIxH,EAAUuK,CAAE;AACd,eAAOlI,EAAS,KAAKkI,CAAE;AACzB,UAAWrB,EAAKqB,CAAE;AAChB;AAAA,IACF;AAEF,WAAOlI,EAAS,KAAA;AAAA,EAAK,GAEjBmI,KAAY,CAAC3D,GAAO7G,GAAWiJ,MAE5BkB,GADI,CAACM,GAAGC,MAASA,EAAKD,CAAC,GACDH,IAAYzD,GAAO7G,GAAWiJ,CAAM,GAE7D0B,KAAU,CAAC9D,GAAO7G,MAAc;AACpC,UAAM0D,IAAO,CAAAuD,MAAQjH,EAAUoH,EAAa,QAAQH,CAAI,CAAC;AAEzD,WADerB,GAAKiB,EAAM,IAAI,YAAYnD,CAAI,EAChC,IAAI0D,EAAa,OAAO;AAAA,EAAA,GAGlCiD,IAAW,CAACxD,GAAOY,GAAUwB,MAAWqB,GAAWzD,GAAO,CAAA8B,MAAKpB,EAAKoB,GAAGlB,CAAQ,GAAGwB,CAAM,GACxF2B,KAAU,CAAC/D,GAAOY,MAAakD,GAAQ9D,GAAO,CAAA8B,MAAKpB,EAAKoB,GAAGlB,CAAQ,CAAC,GACpEoD,KAAa,CAAChE,GAAOY,MAAaM,GAAIN,GAAUZ,CAAK,GACrDiE,KAAY,CAACjE,GAAOY,GAAUwB,MAE3BkB,GADI,CAAC3C,GAASC,MAAaF,EAAKC,GAASC,CAAQ,GAC3B4C,GAAUxD,GAAOY,GAAUwB,CAAM,GAG1D8B,KAAU,CAAAC,MAAUF,GAAUE,GAAQ,mBAAmB,GACzDC,KAAa,CAACzD,GAAS0D,IAAiB,OACxCjB,GAAOzC,CAAO,IACTA,EAAQ,IAAI,oBAEZuD,GAAQvD,CAAO,EAAE,KAAKhG,EAAS0J,CAAc,GAAG,CAAAC,MAAYC,GAASD,CAAQ,MAAM,MAAM,GAG9FC,KAAW,CAAA5D,MAAWA,EAAQ,IAAI,iBAElC6D,KAAc,CAAAC,MAAOA,EAAI,SAAS,YAAA,GAClCC,KAAU,CAAAC,MAAUpE,EAAa,QAAQoE,EAAO,SAAS,GACzDC,KAAY,CAAAD,MAAU,CAAAhE,MAAWQ,EAAGR,GAAS+D,GAAQC,CAAM,CAAC,GAC5DE,KAAiB,CAAAzH,MAAQA,IAAOA,EAAK,QAAQ,OAAO,EAAE,IAAI,IAC1D0H,IAAc,CAAA1H,MAAQ,gBAAgB,KAAKA,CAAI,IAAIA,IAAO,OAAOA,GACjE2H,KAAoB,CAAAJ,MAAUpE,EAAa,QAAQoE,EAAO,UAAU,UAAU,GAC9EK,KAAkB,CAAAL,MAAUpE,EAAa,QAAQoE,EAAO,UAAU,QAAQ,GAC1EM,KAAsB,CAAAC,MAAQvB,GAAUuB,GAAMrD,GAAM,OAAO,CAAC,EAAE,OAAOuC,EAAU,GAE/Ee,KAAa,CAACnF,GAAO7G,MAAcsF,EAAOkE,GAAW3C,CAAK,GAAG7G,CAAS,GACtEiM,KAAgB,CAACpF,GAAO7G,MAAc;AAC1C,QAAIkM,IAAS,CAAA;AACb,WAAAjH,EAAKuE,GAAW3C,CAAK,GAAG,CAAA1G,MAAK;AAC3B,MAAIH,EAAUG,CAAC,MACb+L,IAASA,EAAO,OAAO,CAAC/L,CAAC,CAAC,IAE5B+L,IAASA,EAAO,OAAOD,GAAc9L,GAAGH,CAAS,CAAC;AAAA,IAAA,CACnD,GACMkM;AAAA,EAAA,GAGHC,KAAa,CAACtF,GAAOY,MAAauE,GAAWnF,GAAO,CAAA8B,MAAKpB,EAAKoB,GAAGlB,CAAQ,CAAC,GAC1E2E,KAAc,CAACvF,GAAOY,MAAaI,GAAMJ,GAAUZ,CAAK,GAExDwF,KAAS,CAAC3E,GAAKvD,GAAK5D,MAAU;AAClC,QAAIK,GAASL,CAAK,KAAKO,GAAUP,CAAK,KAAKY,GAASZ,CAAK;AACvD,MAAAmH,EAAI,aAAavD,GAAK5D,IAAQ,EAAE;AAAA;AAEhC,oBAAQ,MAAM,uCAAuC4D,GAAK,aAAa5D,GAAO,eAAemH,CAAG,GAC1F,IAAI,MAAM,gCAAgC;AAAA,EAClD,GAEI4E,KAAQ,CAAC9E,GAASrD,GAAK5D,MAAU;AACrC,IAAA8L,GAAO7E,EAAQ,KAAKrD,GAAK5D,CAAK;AAAA,EAAA,GAE1BgM,KAAS,CAAC/E,GAASgF,MAAU;AACjC,UAAM9E,IAAMF,EAAQ;AACpB,IAAAvE,GAAOuJ,GAAO,CAAC1M,GAAGsD,MAAM;AACtB,MAAAiJ,GAAO3E,GAAKtE,GAAGtD,CAAC;AAAA,IAAA,CACjB;AAAA,EAAA,GAEG2M,KAAQ,CAACjF,GAASrD,MAAQ;AAC9B,UAAMrE,IAAI0H,EAAQ,IAAI,aAAarD,CAAG;AACtC,WAAOrE,MAAM,OAAO,SAAYA;AAAA,EAAA,GAE5B4M,KAAS,CAAClF,GAASrD,MAAQ9B,EAAS,KAAKoK,GAAMjF,GAASrD,CAAG,CAAC,GAC5DwI,KAAW,CAACnF,GAASrD,MAAQ;AACjC,IAAAqD,EAAQ,IAAI,gBAAgBrD,CAAG;AAAA,EAAA,GAE3ByI,KAAQ,OAAWnH,GAAM+B,EAAQ,IAAI,YAAY,CAAChC,GAAKqH,OAC3DrH,EAAIqH,EAAK,IAAI,IAAIA,EAAK,OACfrH,IACN,CAAA,CAAE,GAEC4E,KAAK,CAAC0C,GAAKC,GAAKC,IAAatL,OAAiBoL,EAAI,OAAO,CAAAG,MAAQD,EAAWC,GAAMF,CAAG,CAAC,GACtFG,KAAM,CAAA7G,MAAO;AACjB,UAAM7C,IAAI,CAAA,GACJ2J,IAAO,CAAAhN,MAAK;AAChB,MAAAqD,EAAE,KAAKrD,CAAC;AAAA,IAAA;AAEV,aAASmD,IAAI,GAAGA,IAAI+C,EAAI,QAAQ/C;AAC9B,MAAA+C,EAAI/C,CAAC,EAAE,KAAK6J,CAAI;AAElB,WAAO3J;AAAA,EAAA,GAEH4J,KAAQ,CAACC,GAAIC,GAAIpL,MAAMmL,EAAG,OAAA,KAAYC,EAAG,OAAA,IAAWjL,EAAS,KAAKH,EAAEmL,EAAG,SAAA,GAAYC,EAAG,UAAU,CAAC,IAAIjL,EAAS,KAAA,GAC9GkL,KAAU,CAAAC,MAAOA,EAAI,KAAK/L,EAAQ,GAClCgM,KAAS,CAAC9L,GAAGhB,MAAMgB,IAAIU,EAAS,KAAK1B,CAAC,IAAI0B,EAAS,KAAA,GAEnDqL,KAAkB,CAACC,GAAKC,MACrBD,EAAI,UAAUC,CAAQ,GAGzBC,KAAa,CAACF,GAAKG,GAAQC,MAAUD,MAAW,MAAMH,EAAI,UAAUG,EAAO,UAAUH,EAAI,OAAOI,GAAOA,IAAQD,EAAO,MAAM,MAAMA,GAClIE,KAAgB,CAACL,GAAKM,MACnBC,GAAWP,GAAKM,CAAM,IAAIP,GAAgBC,GAAKM,EAAO,MAAM,IAAIN,GAEnEO,KAAa,CAACP,GAAKM,MAChBJ,GAAWF,GAAKM,GAAQ,CAAC,GAG5BE,MADQ,CAAA3K,MAAK,CAAAiH,MAAKA,EAAE,QAAQjH,GAAG,EAAE,GACpB,YAAY,GACzB4K,KAAa,CAAA3D,MAAKA,EAAE,SAAS,GAC7B4D,KAAU,CAAA5D,MAAK,CAAC2D,GAAW3D,CAAC,GAC5B6D,KAAQ,CAAC/N,GAAOgO,IAAQ,OAAO;AACnC,UAAMxJ,IAAM,SAASxE,GAAOgO,CAAK;AACjC,WAAO,MAAMxJ,CAAG,IAAI1C,EAAS,SAASA,EAAS,KAAK0C,CAAG;AAAA,EAAA,GAEnDyJ,KAAU,CAAAjO,MAAS;AACvB,UAAMwE,IAAM,WAAWxE,CAAK;AAC5B,WAAO,MAAMwE,CAAG,IAAI1C,EAAS,SAASA,EAAS,KAAK0C,CAAG;AAAA,EAAA,GAGnD0J,KAAc,OAAO/G,EAAI,UAAU,UAAaxG,EAAWwG,EAAI,MAAM,gBAAgB,GAErFgH,KAAc,CAAChH,GAAKiH,GAAUpO,MAAU;AAC5C,QAAI,CAACK,GAASL,CAAK;AACjB,oBAAQ,MAAM,sCAAsCoO,GAAU,aAAapO,GAAO,eAAemH,CAAG,GAC9F,IAAI,MAAM,iCAAiCnH,CAAK;AAExD,IAAIkO,GAAY/G,CAAG,KACjBA,EAAI,MAAM,YAAYiH,GAAUpO,CAAK;AAAA,EACvC,GAEIqO,KAAiB,CAAClH,GAAKiH,MAAa;AACxC,IAAIF,GAAY/G,CAAG,KACjBA,EAAI,MAAM,eAAeiH,CAAQ;AAAA,EACnC,GAEIE,KAAQ,CAACrH,GAASmH,GAAUpO,MAAU;AAC1C,UAAMmH,IAAMF,EAAQ;AACpB,IAAAkH,GAAYhH,GAAKiH,GAAUpO,CAAK;AAAA,EAAA,GAE5BuO,KAAQ,CAACtH,GAASmH,MAAa;AACnC,UAAMjH,IAAMF,EAAQ,KAEdhE,IADS,OAAO,iBAAiBkE,CAAG,EACzB,iBAAiBiH,CAAQ;AAC1C,WAAOnL,MAAM,MAAM,CAACyG,GAAOzC,CAAO,IAAIuH,GAAkBrH,GAAKiH,CAAQ,IAAInL;AAAA,EAAA,GAErEuL,KAAoB,CAACrH,GAAKiH,MAAaF,GAAY/G,CAAG,IAAIA,EAAI,MAAM,iBAAiBiH,CAAQ,IAAI,IACjGK,IAAS,CAACxH,GAASmH,MAAa;AACpC,UAAMjH,IAAMF,EAAQ,KACdyH,IAAMF,GAAkBrH,GAAKiH,CAAQ;AAC3C,WAAOtM,EAAS,KAAK4M,CAAG,EAAE,OAAO,CAAAzL,MAAKA,EAAE,SAAS,CAAC;AAAA,EAAA,GAE9C0L,KAAW,CAAC1H,GAASmH,MAAa;AACtC,UAAMjH,IAAMF,EAAQ;AACpB,IAAAoH,GAAelH,GAAKiH,CAAQ,GACxBvE,GAAGsC,GAAOlF,GAAS,OAAO,EAAE,IAAI2G,EAAI,GAAG,EAAE,KAC3CxB,GAASnF,GAAS,OAAO;AAAA,EAC3B,GAGI2H,KAAe,CAACpD,GAAMhI,GAAMqL,IAAW,MAAM1C,GAAOX,GAAMhI,CAAI,EAAE,IAAI,OAAS,SAASxD,GAAO,EAAE,CAAC,EAAE,MAAM6O,CAAQ,GAEhHC,KAAa,CAACxI,GAAOY,MAClB6H,GAAiBzI,GAAOY,GAAUrF,EAAM,GAE3CkN,KAAmB,CAACzI,GAAOY,GAAUzH,MAClC8F,GAAK0D,GAAW3C,CAAK,GAAG,CAAA1G,MACzBoH,EAAKpH,GAAGsH,CAAQ,IACXzH,EAAUG,CAAC,IAAI,CAACA,CAAC,IAAI,CAAA,IAErBmP,GAAiBnP,GAAGsH,GAAUzH,CAAS,CAEjD,GAGGuP,KAAmB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAEIC,KAAiB,CAAAC,MAAc9K,EAAS4K,IAAkBE,CAAU,GACpEC,KAAO,CAACC,GAAMC,OAAa;AAAA,IAC/B,MAAAD;AAAAA,IACA,SAAAC;AAAAA,EAAA,IAEIC,KAAS,CAACrI,GAASsI,GAASC,OAAa;AAAA,IAC7C,SAAAvI;AAAA,IACA,SAAAsI;AAAA,IACA,SAAAC;AAAA,EAAA,IAEIC,KAAW,CAACxI,GAASsI,GAASC,GAASE,GAAKC,GAAQC,OAAc;AAAA,IACtE,SAAA3I;AAAA,IACA,SAAAsI;AAAA,IACA,SAAAC;AAAA,IACA,KAAAE;AAAA,IACA,QAAAC;AAAA,IACA,UAAAC;AAAA,EAAA,IAEIC,KAAY,CAAC5I,GAAS6I,GAAOC,OAAa;AAAA,IAC9C,SAAA9I;AAAA,IACA,OAAA6I;AAAAA,IACA,SAAAC;AAAA,EAAA,IAEIC,KAAS,CAACC,GAAUC,GAAUC,GAAWC,OAAe;AAAA,IAC5D,UAAAH;AAAA,IACA,UAAAC;AAAA,IACA,WAAAC;AAAA,IACA,WAAAC;AAAA,EAAA,IAEIC,KAAY,CAACpJ,GAASuI,GAASG,OAAY;AAAA,IAC/C,SAAA1I;AAAA,IACA,SAAAuI;AAAA,IACA,QAAAG;AAAA,EAAA,IAEIW,KAAW,CAACrJ,GAASoI,OAAa;AAAA,IACtC,SAAApI;AAAA,IACA,SAAAoI;AAAAA,EAAA,IAGIkB,KAAS,CAACC,GAAMvJ,GAASyB,IAAS9G,MAAU;AAChD,QAAI8G,EAAOzB,CAAO;AAChB,aAAOnF,EAAS,KAAA;AAElB,QAAIsC,EAASoM,GAAMhN,EAAKyD,CAAO,CAAC;AAC9B,aAAOnF,EAAS,KAAKmF,CAAO;AAE9B,UAAMwJ,IAAqB,CAAA1F,MAAO/D,EAAK+D,GAAK,OAAO,KAAKrC,EAAOqC,CAAG;AAClE,WAAOjB,EAAS7C,GAASuJ,EAAK,KAAK,GAAG,GAAGC,CAAkB;AAAA,EAAA,GAEvDjF,KAAO,CAACvE,GAASyB,MAAW6H,GAAO;AAAA,IACvC;AAAA,IACA;AAAA,EAAA,GACCtJ,GAASyB,CAAM,GACZoH,KAAQ,CAAAhG,MAAYgF,GAAWhF,GAAU,OAAO,GAChDuF,KAAU,CAAAvF,MACV9C,EAAK8C,GAAU,UAAU,IACpB8B,GAAW9B,GAAU,KAAK,IAE1BvE,GAAKmL,GAAa5G,CAAQ,GAAG,OAAe8B,GAAW+E,GAAa,KAAK,CAAC,GAG/EC,IAAQ,CAAC3J,GAASyB,MAAW6B,GAAUtD,GAAS,SAASyB,CAAM,GAC/D0G,KAAO,CAAAtF,MAAYgF,GAAWhF,GAAU,IAAI,GAC5C4G,KAAe,CAAA5G,MAAY8G,EAAM9G,CAAQ,EAAE,KAAK7I,EAAS,CAAA,CAAE,GAAG,CAAA2P,MAAShF,GAAWgF,GAAO,UAAU,CAAC,GAEpGC,KAAsB,CAACC,GAAOC,MAAetM,EAAIqM,GAAO,CAAApB,MAAO;AACnE,QAAIlM,EAAKkM,CAAG,MAAM,YAAY;AAC5B,YAAMI,IAAQrL,EAAI4K,GAAQK,CAAG,GAAG,CAAAC,MAAU;AACxC,cAAMH,IAAUZ,GAAae,GAAQ,QAAQ,CAAC;AAC9C,eAAOL,GAAOK,GAAQ,GAAGH,CAAO;AAAA,MAAA,CACjC;AACD,aAAOK,GAAUH,GAAKI,GAAO,UAAU;AAAA,IAAA,OAClC;AACL,YAAMkB,IAAUvM,EAAIqL,GAAMJ,CAAG,GAAG,CAAAlE,MAAQ;AACtC,cAAM+D,IAAUX,GAAapD,GAAM,WAAW,CAAC,GACzCgE,IAAUZ,GAAapD,GAAM,WAAW,CAAC;AAC/C,eAAO8D,GAAO9D,GAAM+D,GAASC,CAAO;AAAA,MAAA,CACrC;AACD,aAAOK,GAAUH,GAAKsB,GAASD,EAAWrB,CAAG,CAAC;AAAA,IAAA;AAAA,EAChD,CACD,GACKuB,KAAmB,CAAAC,MAAS1I,GAAO0I,CAAK,EAAE,IAAI,CAAA1I,MAAU;AAC5D,UAAM0G,IAAa1L,EAAKgF,CAAM;AAC9B,WAAOyG,GAAeC,CAAU,IAAIA,IAAa;AAAA,EAAA,CAClD,EAAE,MAAM,OAAO,GACViC,KAAc,CAAAP,MAAS;AAC3B,UAAMQ,IAAShC,GAAKwB,CAAK,GAEnBE,IAAQ;AAAA,MACZ,GAFqBJ,GAAaE,CAAK;AAAA,MAGvC,GAAGQ;AAAA,IAAA;AAEL,WAAOP,GAAoBC,GAAOG,EAAgB;AAAA,EAAA,GAG9CI,KAAkB,4BAClBC,KAA4B,CAAAV,MAASzE,GAAOyE,GAAOS,EAAe,EAAE,KAAK,CAAAE,MAAgBzP,EAAS,KAAKyP,EAAa,MAAM,MAAM,CAAC,CAAC,EAAE,IAAI,CAAAC,MAAc/L,GAAY+L,GAAY3P,EAAM,CAAC,GAErL+B,KAAM,CAAC8L,GAAKC,MACTD,IAAM,MAAMC,GAEf8B,KAAQ,CAACC,GAAWhC,GAAKC,MAAW7N,EAAS,KAAK4P,EAAU,OAAO9N,GAAI8L,GAAKC,CAAM,CAAC,CAAC,GACpFgC,KAAW,CAACD,GAAWE,GAAMnF,MAAe;AAChD,UAAMoF,IAAWC,GAAYJ,GAAW,CAAApC,MAC/B7C,EAAWmF,GAAMtC,EAAO,OAAO,CACvC;AACD,WAAOuC,EAAS,SAAS,IAAI/P,EAAS,KAAK+P,EAAS,CAAC,CAAC,IAAI/P,EAAS,KAAA;AAAA,EAAK,GAEpEgQ,KAAc,CAACJ,GAAWjS,MAAc;AAC5C,UAAMgC,IAAM8D,GAAKmM,EAAU,KAAK,CAAAzO,MACvBA,EAAE,KACV;AACD,WAAO8B,EAAOtD,GAAKhC,CAAS;AAAA,EAAA,GAExBsS,KAAkB,CAAAC,MAAW;AACjC,UAAMC,IAAe,CAAA;AACrB,QAAI9I,IAAQ;AACZ,WAAAzE,EAAKsN,EAAQ,OAAO,CAAArC,MAAU;AAC5B,YAAMH,IAAUG,EAAO;AACvB,MAAApL,GAAMiL,GAAS,CAAA0C,MAAe;AAC5B,cAAMC,IAAWhJ,IAAQ+I;AACzB,QAAAD,EAAaE,CAAQ,IAAI9B,GAAUV,EAAO,SAASH,GAAS2C,CAAQ;AAAA,MAAA,CACrE,GACDhJ,KAASqG;AAAA,IAAA,CACV,GACMyC;AAAA,EAAA,GAEHG,KAAa,CAAAC,MAAQ;AACzB,UAAMC,IAAS,CAAA,GACTxC,IAAQ,CAAA,GAERyC,IADW5M,GAAK0M,CAAI,EAAE,IAAI,OAAWL,EAAQ,OAAO,EAAE,KAAKpB,CAAK,EACvC,KAAKU,EAAyB,EAAE,MAAM,EAAE;AACvE,QAAIkB,IAAU,GACVC,IAAa,GACbC,IAAW;AACf,UAAM;AAAA,MACJ,MAAMC;AAAA,MACN,MAAMvD;AAAAA,IAAA,IACJxK,GAAUyN,GAAM,CAAAL,MAAWA,EAAQ,YAAY,UAAU;AAC7D,IAAAtN,EAAK0K,GAAM,CAAA4C,MAAW;AACpB,YAAMY,IAAa,CAAA;AACnB,MAAAlO,EAAKsN,EAAQ,OAAO,CAAAa,MAAW;AAC7B,YAAIrF,IAAQ;AACZ,eAAO8E,EAAO1O,GAAI8O,GAAUlF,CAAK,CAAC,MAAM;AACtC,UAAAA;AAEF,cAAMoC,KAAW9L,GAAkByO,GAAe/E,EAAM,UAAU,GAC5DsF,KAAUrD,GAASoD,EAAQ,SAASA,EAAQ,SAASA,EAAQ,SAASH,GAAUlF,GAAOoC,EAAQ;AACrG,iBAASmD,KAAyB,GAAGA,KAAyBF,EAAQ,SAASE;AAC7E,mBAASC,KAAsB,GAAGA,KAAsBH,EAAQ,SAASG,MAAuB;AAC9F,kBAAMC,KAAcP,IAAWM,IACzBE,KAAiB1F,IAAQuF,IACzBI,KAASvP,GAAIqP,IAAaC,EAAc;AAC9C,YAAAZ,EAAOa,EAAM,IAAIL,IACjBL,IAAa,KAAK,IAAIA,GAAYS,KAAiB,CAAC;AAAA,UAAA;AAGxD,QAAAN,EAAW,KAAKE,EAAO;AAAA,MAAA,CACxB,GACDN,KACA1C,EAAM,KAAKD,GAAUmC,EAAQ,SAASY,GAAYZ,EAAQ,OAAO,CAAC,GAClEU;AAAA,IAAA,CACD;AACD,UAAM,EAAC,SAAArD,GAAS,WAAA+D,EAAA,IAAaxN,GAAK+M,CAAY,EAAE,IAAI,CAAAX,MAAW;AAC7D,YAAM3C,IAAU0C,GAAgBC,CAAO;AAEvC,aAAO;AAAA,QACL,WAAW,CAFM1B,GAAS0B,EAAQ,SAASvO,GAAO4L,CAAO,CAAC,CAEpC;AAAA,QACtB,SAAAA;AAAAA,MAAA;AAAA,IACF,CACD,EAAE,WAAW,OAAO;AAAA,MACnB,WAAW,CAAA;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,EACV;AAEF,WAAO;AAAA,MACL,MAFaF,GAAKqD,GAASC,CAAU;AAAA,MAGrC,QAAAH;AAAA,MACA,KAAKxC;AAAAA,MACL,SAAAT;AAAAA,MACA,WAAA+D;AAAA,IAAA;AAAA,EACF,GAUIC,IAAY;AAAA,IAChB,WATgB,CAAAzC,MAAS;AACzB,YAAMyB,IAAOlB,GAAYP,CAAK;AAC9B,aAAOwB,GAAWC,CAAI;AAAA,IAAA;AAAA,IAQtB,UAAUD;AAAA,IACV,OAAAX;AAAA,IACA,UAAAE;AAAA,IACA,aAAAG;AAAA,IACA,WAVgB,CAAAJ,MAAanM,GAAKmM,EAAU,KAAK,CAAA4B,MAAKA,EAAE,KAAK;AAAA,IAW7D,aAVkB,CAAA5B,MAAajO,GAAOiO,EAAU,OAAO;AAAA,IAWvD,YAViB,CAAAA,MAAalP,EAAKkP,EAAU,OAAO,EAAE,SAAS;AAAA,IAW/D,aAVkB,CAACA,GAAWQ,MAAgBpQ,EAAS,KAAK4P,EAAU,QAAQQ,CAAW,CAAC;AAAA,EAU1F;AAGF,MAAIqB,KAAW,QAAQ,KAAK,MAAM,QAAQ,oBAAoB;AAE9D,QAAMC,KAAsB,CAACrM,GAAK4D,GAAKvH,MAAS;AAC9C,UAAMsM,IAAQ3I,EAAI,OAAO,SAAS4D,CAAG;AACrC,QAAI0I;AACJ,aAAS1Q,IAAI,GAAGA,IAAI+M,EAAM,QAAQ/M,KAAK;AACrC,YAAM2Q,IAAevM,EAAI,SAAS2I,EAAM/M,CAAC,GAAGS,CAAI;AAIhD,UAHIhD,GAAYiT,CAAe,MAC7BA,IAAkBC,IAEhBD,MAAoBC;AACtB,eAAO;AAAA,IACT;AAEF,WAAOD;AAAA,EAAA,GAEHE,KAAW,CAAC1I,GAAQF,GAAKvH,MAAS;AACtC,IAAA+P,GAAS,KAAK,oBAAoB,MAAM,GAAG,GAAG,CAAAK,MAAS;AACrD,MAAIA,MAAUpQ,KACZyH,EAAO,UAAU,OAAO,UAAU2I,GAAO,CAAA,GAAI7I,CAAG;AAAA,IAClD,CACD,GACGvH,KACFyH,EAAO,UAAU,MAAM,UAAUzH,GAAM,CAAA,GAAIuH,CAAG;AAAA,EAChD,GAEI8I,KAAY,CAAC5I,GAAQF,GAAKvH,MAAS;AACvC,IAAA+P,GAAS,KAAK,oBAAoB,MAAM,GAAG,GAAG,CAAAK,MAAS;AACrD,MAAIA,MAAUpQ,KACZyH,EAAO,UAAU,OAAO,WAAW2I,GAAO,CAAA,GAAI7I,CAAG;AAAA,IACnD,CACD,GACGvH,KACFyH,EAAO,UAAU,MAAM,WAAWzH,GAAM,CAAA,GAAIuH,CAAG;AAAA,EACjD,GAGI+I,KAAoB,CAAC7I,GAAQ2F,GAAOmD,MAAS;AACjD,IAAA9I,EAAO,SAAS,iBAAiB;AAAA,MAC/B,GAAG8I;AAAA,MACH,OAAAnD;AAAAA,IAAA,CACD;AAAA,EAAA,GAGGoD,KAAW,CAACC,GAAIpF,MAAaZ,GAAQgG,CAAE,EAAE,MAAMpF,CAAQ,GACvDqF,KAAU,CAACjN,GAASzD,GAAMqL,MAAamF,GAASzF,GAAMtH,GAASzD,CAAI,GAAGqL,CAAQ,GAC9EsF,KAAqB,CAAClN,GAASvD,GAAM0Q,GAAOC,MAAU;AAC1D,UAAMC,IAAeJ,GAAQjN,GAAS,WAAYmN,CAAM,IAAI,CAAC,GACvDG,IAAeL,GAAQjN,GAAS,WAAYoN,CAAM,IAAI,CAAC,GACvDG,IAAcN,GAAQjN,GAAS,UAAWmN,CAAM,UAAU,CAAC,GAC3DK,IAAcP,GAAQjN,GAAS,UAAWoN,CAAM,UAAU,CAAC;AACjE,WAAO3Q,IAAO4Q,IAAeC,IAAeC,IAAcC;AAAA,EAAA,GAEtDC,KAAqB,CAACzN,GAAS0N,MAAc;AACjD,UAAMxN,IAAMF,EAAQ,KACd2N,IAAQzN,EAAI,sBAAA,EAAwB,SAASA,EAAI;AACvD,WAA4CgN,GAAmBlN,GAAS2N,GAAO,QAAQ,OAAO;AAAA,EAAA,GAI1FC,KAFgB,CAAA5N,MAAWyN,GAAmBzN,CAAsB;AAI1E,MAAI6N,KAAW,QAAQ,KAAK,MAAM,QAAQ,aAAa;AAEvD,QAAMC,KAAsB,8IACtBC,KAA0BzQ,GAAM,GAAG,CAAAxB,MAAK;AAC5C,UAAMW,IAAO,GAAIX,IAAI,CAAE;AACvB,WAAO;AAAA,MACL,OAAOW;AAAAA,MACP,OAAOA;AAAAA,IAAA;AAAA,EACT,CACD,GACKuR,KAA0BxQ,EAAI;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GACC,CAAA1E,OACM;AAAA,IACL,OAAOA;AAAAA,IACP,OAAOA,EAAK,YAAA;AAAA,EAAY,EAE3B,GACKmV,KAAe,QACfC,KAAsB,CAAAlK,MAAU;AACpC,QAAIvL;AACJ,UAAMyH,IAAM8D,EAAO,KACbmK,KAAe1V,IAAKyH,EAAI,UAAU8D,EAAO,UAAU,SAAA,GAAY9D,EAAI,OAAO,OAAO,QAAQzH,MAAO,SAASA,IAAKuL,EAAO,QAAA;AAC3H,WAAO4J,GAAShO,EAAa,QAAQuO,CAAW,CAAC,IAAI;AAAA,EAAA,GAEjDC,KAAyB,CAACpK,GAAQqK,MAClCC,GAAmBtK,CAAM,KAAK,CAACuK,EAAmBvK,CAAM,IACnDqK,IACEG,GAAexK,CAAM,IACvB;AAAA,IACL,GAAGqK;AAAA,IACH,OAAOH,GAAoBlK,CAAM;AAAA,EAAA,IAG5B;AAAA,IACL,GAAGqK;AAAA,IACH,OAAOJ;AAAA,EAAA,GAIPQ,KAA6B,CAACzK,GAAQ0K,MACtCJ,GAAmBtK,CAAM,KAAKuK,EAAmBvK,CAAM,IAClD0K,IACEF,GAAexK,CAAM,IACvB;AAAA,IACL,GAAG0K;AAAA,IACH,OAAOR,GAAoBlK,CAAM;AAAA,EAAA,IAG5B;AAAA,IACL,GAAG0K;AAAA,IACH,OAAOT;AAAA,EAAA,GAIPU,IAAS,CAAApS,MAAQ,OAAUyH,EAAO,QAAQ,IAAIzH,CAAI,GAClDqS,KAAW,CAAA5K,MAAU;AACzB,UAAM6K,IAAiB7K,EAAO,QAAQ;AACtC,IAAA6K,EAAe,uBAAuB;AAAA,MACpC,WAAW;AAAA,MACX,SAASd;AAAA,IAAA,CACV,GACDc,EAAe,uBAAuB;AAAA,MACpC,WAAW;AAAA,MACX,SAASb;AAAA,IAAA,CACV,GACDa,EAAe,qBAAqB;AAAA,MAClC,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV,GACDA,EAAe,oBAAoB;AAAA,MACjC,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV,GACDA,EAAe,gBAAgB;AAAA,MAC7B,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV,GACDA,EAAe,4BAA4B;AAAA,MACzC,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV,GACDA,EAAe,cAAc;AAAA,MAC3B,WAAW;AAAA,MACX,SAAS,CAAChB,GAAS,WAAW,QAAA;AAAA,IAAQ,CACvC,GACDgB,EAAe,yBAAyB;AAAA,MACtC,WAAW;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,CACX,GACDA,EAAe,wBAAwB;AAAA,MACrC,WAAW;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,CACX,GACDA,EAAe,oBAAoB;AAAA,MACjC,WAAW;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,CACX,GACDA,EAAe,iBAAiB;AAAA,MAC9B,WAAW;AAAA,MACX,SAASf;AAAA,IAAA,CACV,GACDe,EAAe,8BAA8B;AAAA,MAC3C,WAAW;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,CACX,GACDA,EAAe,0BAA0B;AAAA,MACvC,WAAW;AAAA,MACX,SAAS,CAAA;AAAA,IAAC,CACX;AAAA,EAAA,GAEGC,KAAqBH,EAAO,mBAAmB,GAC/CI,KAAuBJ,EAAO,qBAAqB,GACnDK,KAAuBL,EAAO,qBAAqB,GACnDM,KAAqBN,EAAO,mBAAmB,GAC/CO,KAAoBP,EAAO,kBAAkB,GAC7CQ,IAAsBR,EAAO,cAAc,GAC3CS,KAAuBT,EAAO,0BAA0B,GACxDU,KAAeV,EAAO,YAAY,GAClCJ,IAAqBI,EAAO,oBAAoB,GAChDW,KAAmBX,EAAO,uBAAuB,GACjDY,KAAkBZ,EAAO,sBAAsB,GAC/Ca,KAAoBb,EAAO,kBAAkB,GAC7Cc,KAAad,EAAO,eAAe,GACnCe,KAA6Bf,EAAO,4BAA4B,GAChEgB,KAAyBhB,EAAO,wBAAwB,GACxDH,KAAiB,CAAAxK,MAAU8K,GAAmB9K,CAAM,MAAM,SAC1DsK,KAAqB,CAAAtK,MAAU8K,GAAmB9K,CAAM,MAAM,cAC9D4L,KAAmB,CAAA5L,MAAU;AACjC,UAAM6L,IAAU7L,EAAO,SACjBqK,IAAgBwB,EAAQ,IAAI,sBAAsB;AACxD,WAAOA,EAAQ,MAAM,sBAAsB,IAAIxB,IAAgBD,GAAuBpK,GAAQqK,CAAa;AAAA,EAAA,GAEvGyB,KAAuB,CAAA9L,MAAU;AACrC,UAAM6L,IAAU7L,EAAO,SACjB0K,IAAoBmB,EAAQ,IAAI,0BAA0B;AAChE,WAAOA,EAAQ,MAAM,0BAA0B,IAAInB,IAAoBD,GAA2BzK,GAAQ0K,CAAiB;AAAA,EAAA,GAGvHqB,KAAW,CAAChH,GAAQV,MACjBA,EAAO,UAAUU,EAAO,YAAYV,EAAO,SAASA,EAAO,UAAU,KAAKU,EAAO,aAAaV,EAAO,OAAOU,EAAO,YAAYV,EAAO,MAAMA,EAAO,UAAU,KAAKU,EAAO,WAE5KiH,KAAgB,CAACvF,GAAW1B,MAAW;AAC3C,QAAIkH,IAAS;AACb,UAAMC,IAAiB9V,EAAM2V,IAAUhH,CAAM;AAC7C,aAASjN,IAAIiN,EAAO,UAAUjN,KAAKiN,EAAO,WAAWjN;AACnD,eAASqU,IAAIpH,EAAO,UAAUoH,KAAKpH,EAAO,WAAWoH;AACnD,QAAAF,IAASA,KAAU7D,EAAU,MAAM3B,GAAW3O,GAAGqU,CAAC,EAAE,OAAOD,CAAc;AAG7E,WAAOD,IAASpV,EAAS,KAAKkO,CAAM,IAAIlO,EAAS,KAAA;AAAA,EAAK,GAGlDuV,KAAY,CAACC,GAASC,MACnBvH,GAAO,KAAK,IAAIsH,EAAQ,KAAKC,EAAQ,GAAG,GAAG,KAAK,IAAID,EAAQ,QAAQC,EAAQ,MAAM,GAAG,KAAK,IAAID,EAAQ,MAAMA,EAAQ,UAAU,GAAGC,EAAQ,MAAMA,EAAQ,UAAU,CAAC,GAAG,KAAK,IAAID,EAAQ,SAASA,EAAQ,UAAU,GAAGC,EAAQ,SAASA,EAAQ,UAAU,CAAC,CAAC,GAE5PC,KAAY,CAAC9F,GAAW+F,GAAWC,MAAe;AACtD,UAAMC,IAActE,EAAU,SAAS3B,GAAW+F,GAAWhQ,CAAE,GACzDmQ,IAAevE,EAAU,SAAS3B,GAAWgG,GAAYjQ,CAAE;AACjE,WAAOkQ,EAAY,KAAK,CAAAE,MACfD,EAAa,IAAI,CAAAE,MACfT,GAAUQ,GAAIC,CAAE,CACxB,CACF;AAAA,EAAA,GAEGC,KAAW,CAACrG,GAAW+F,GAAWC,MAC/BF,GAAU9F,GAAW+F,GAAWC,CAAU,EAAE,KAAK,CAAA1H,MAC/CiH,GAAcvF,GAAW1B,CAAM,CACvC,GAGGgI,KAAS,CAACpH,GAAOqH,GAAOrS,MAAS;AACrC,UAAM8L,IAAYwG,GAAatH,CAAK;AACpC,WAAOmH,GAASrG,GAAWuG,GAAOrS,CAAI;AAAA,EAAA,GAElCsS,KAAe7E,EAAU,WAEzB8E,KAAS,CAACC,GAAQnR,MAAY;AAElC,IADiBuB,GAAO4P,CAAM,EACrB,KAAK,CAAA7Y,MAAK;AACjB,MAAAA,EAAE,IAAI,aAAa0H,EAAQ,KAAKmR,EAAO,GAAG;AAAA,IAAA,CAC3C;AAAA,EAAA,GAEGC,KAAU,CAACD,GAAQnR,MAAY;AAEnC,IADgB+B,GAAYoP,CAAM,EAC1B,KAAK,MAAM;AAEjB,MADiB5P,GAAO4P,CAAM,EACrB,KAAK,CAAA7Y,MAAK;AACjB,QAAA+Y,GAAS/Y,GAAG0H,CAAO;AAAA,MAAA,CACpB;AAAA,IAAA,GACA,CAAA1H,MAAK;AACN,MAAA4Y,GAAO5Y,GAAG0H,CAAO;AAAA,IAAA,CAClB;AAAA,EAAA,GAEGsR,KAAU,CAAC/P,GAAQvB,MAAY;AAEnC,IADqBoC,GAAWb,CAAM,EACzB,KAAK,MAAM;AACtB,MAAA8P,GAAS9P,GAAQvB,CAAO;AAAA,IAAA,GACvB,CAAA1H,MAAK;AACNiJ,MAAAA,EAAO,IAAI,aAAavB,EAAQ,KAAK1H,EAAE,GAAG;AAAA,IAAA,CAC3C;AAAA,EAAA,GAEG+Y,KAAW,CAAC9P,GAAQvB,MAAY;AACpCuB,IAAAA,EAAO,IAAI,YAAYvB,EAAQ,GAAG;AAAA,EAAA,GAE9BuR,KAAO,CAACvR,GAASwR,MAAY;AACjC,IAAAN,GAAOlR,GAASwR,CAAO,GACvBH,GAASG,GAASxR,CAAO;AAAA,EAAA,GAGrByR,KAAQ,CAACN,GAAQO,MAAa;AAClC,IAAAjU,EAAKiU,GAAU,CAAC/Y,GAAGmD,MAAM;AACvB,YAAMqF,IAAIrF,MAAM,IAAIqV,IAASO,EAAS5V,IAAI,CAAC;AAC3C,MAAAsV,GAAQjQ,GAAGxI,CAAC;AAAA,IAAA,CACb;AAAA,EAAA,GAEGgZ,KAAS,CAACpQ,GAAQmQ,MAAa;AACnC,IAAAjU,EAAKiU,GAAU,CAAA/Y,MAAK;AAClB,MAAA0Y,GAAS9P,GAAQ5I,CAAC;AAAA,IAAA,CACnB;AAAA,EAAA,GAGGiZ,KAAS,CAAA5R,MAAW;AACxB,UAAME,IAAMF,EAAQ;AACpB,IAAIE,EAAI,eAAe,QACrBA,EAAI,WAAW,YAAYA,CAAG;AAAA,EAChC,GAEI2R,KAAS,CAAAL,MAAW;AACxB,UAAMM,IAAW9P,GAAWwP,CAAO;AACnC,IAAIM,EAAS,SAAS,KACpBL,GAAMD,GAASM,CAAQ,GAEzBF,GAAOJ,CAAO;AAAA,EAAA,GAwBVO,MArBY,CAACnP,GAAIrG,MAAS;AAC9B,UAAMyV,IAAM,CAAAhS,MAAW;AACrB,UAAI,CAAC4C,EAAG5C,CAAO;AACb,cAAM,IAAI,MAAM,kBAAkBzD,IAAO,iBAAiBA,IAAO,OAAO;AAE1E,aAAO0V,EAAUjS,CAAO,EAAE,MAAM,EAAE;AAAA,IAAA,GAE9BiS,IAAY,CAAAjS,MAAW4C,EAAG5C,CAAO,IAAInF,EAAS,KAAKmF,EAAQ,IAAI,SAAS,IAAInF,EAAS,KAAA;AAO3F,WAAO;AAAA,MACL,KAAAmX;AAAAA,MACA,WAAAC;AAAA,MACA,KATU,CAACjS,GAASjH,MAAU;AAC9B,YAAI,CAAC6J,EAAG5C,CAAO;AACb,gBAAM,IAAI,MAAM,sBAAsBzD,IAAO,iBAAiBA,IAAO,OAAO;AAE9E,QAAAyD,EAAQ,IAAI,YAAYjH;AAAA,MAAA;AAAA,IAKxB;AAAA,EACF,GAGoBgI,IAAQ,MAAM,GAC9BiR,KAAM,CAAAhS,MAAW+R,GAAI,IAAI/R,CAAO,GAChCkS,KAAM,CAAClS,GAASjH,MAAUgZ,GAAI,IAAI/R,GAASjH,CAAK;AAEtD,MAAIoZ,KAAgB;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAGEC,KAAc,MAAM;AACtB,UAAMC,IAAU,CAAArS,MACPJ,EAAa,QAAQI,EAAQ,IAAI,UAAU,EAAK,CAAC,GAEpDsS,IAAW,CAAAtS,MAAWqB,GAAgBrB,CAAO,EAAE,KAC/CuS,IAAa,CAAAvS,MACZc,EAAUd,CAAO,IAGlBzD,EAAKyD,CAAO,MAAM,SACb,KAEF7C,EAASgV,IAAe5V,EAAKyD,CAAO,CAAC,IALnC,IAOLwS,IAAa,CAAAxS,MACZc,EAAUd,CAAO,IAGf7C,EAAS;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,GACCZ,EAAKyD,CAAO,CAAC,IAPP,IASLyS,IAAgB,OAAW3R,EAAUd,CAAO,KAAKiF,GAAMjF,GAAS,iBAAiB,MAAM,SACvF0S,IAAkB,CAAC1S,GAAS2S,MACzB3S,EAAQ,IAAI,wBAAwB2S,EAAM,GAAG,GAEhDC,IAAmB,CAACC,GAAQC,MAAgB;AAChD,YAAMC,IAAK3N,GAAMyN,CAAM;AACvB,MAAA9N,GAAO+N,GAAaC,CAAE;AAAA,IAAA,GAElBC,IAAY,CAAAhT,MAAW;AAC3B,YAAMlF,IAAMyB,EAAKyD,CAAO;AACxB,aAAO7C,EAAS;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA,GACCrC,CAAG;AAAA,IAAA,GAEFmY,IAAc,CAAAjT,MAAWc,EAAUd,CAAO,IAAIkF,GAAOlF,GAAS,MAAM,IAAInF,EAAS,KAAA;AACvF,WAAO;AAAA,MACL,IAAIb,EAAS;AAAA,QACX,UAAU6I;AAAA,QACV,SAASS;AAAA,QACT,WAAWR;AAAA,QACX,KAAKtB;AAAA,MAAA,CACN;AAAA,MACD,MAAMxH,EAAS;AAAA,QACb,UAAU4K;AAAA,QACV,WAAWH;AAAA,MAAA,CACZ;AAAA,MACD,QAAQzK,EAAS;AAAA,QACf,KAAKsN;AAAA,QACL,QAAAE;AAAA,QACA,KAAKH;AAAA,QACL,QAAQK;AAAA,MAAA,CACT;AAAA,MACD,OAAO1N,EAAS;AAAA,QACd,KAAKiL;AAAA,QACL,KAAKH;AAAA,QACL,QAAQK;AAAA,QACR,QAAQyN;AAAA,MAAA,CACT;AAAA,MACD,QAAQ5Y,EAAS;AAAA,QACf,QAAAkX;AAAA,QACA,OAAOE;AAAA,QACP,UAAUK;AAAA,QACV,QAAQJ;AAAA,QACR,WAAWM;AAAA,QACX,SAAAL;AAAA,QACA,MAAAC;AAAA,MAAA,CACD;AAAA,MACD,QAAQvX,EAAS;AAAA,QACf,QAAA6X;AAAA,QACA,QAAAD;AAAA,MAAA,CACD;AAAA,MACD,QAAQ5X,EAAS;AAAA,QACf,IAAI4F,EAAa;AAAA,QACjB,OAAOyS;AAAA,QACP,MAAMzS,EAAa;AAAA,MAAA,CACpB;AAAA,MACD,OAAO5F,EAAS;AAAA,QACd,iBAAA0Y;AAAA,QACA,aAAA5Q;AAAA,QACA,aAAAC;AAAA,MAAA,CACD;AAAA,MACD,UAAU/H,EAAS;AAAA,QACjB,UAAUgI;AAAA,QACV,MAAAzF;AAAA,QACA,QAAAgF;AAAA,QACA,UAAA+Q;AAAAA,QACA,QAAAvR;AAAA,QACA,WAAAF;AAAA,QACA,WAAAC;AAAA,QACA,WAAAkS;AAAA,QACA,aAAAC;AAAA,QACA,SAASjB;AAAA,QACT,SAASE;AAAA,QACT,YAAAK;AAAA,QACA,YAAAC;AAAA,QACA,eAAAC;AAAA,MAAA,CACD;AAAA,MACD,IAAAjS;AAAA,MACA,IAAIG;AAAA,IAAA;AAAA,EACN;AAGF,QAAMnG,KAAM,CAAC0Y,GAAUC,GAAMzB,GAAUhX,MAAM;AAC3C,UAAMgE,IAAOgT,EAAS,CAAC,GACjB0B,IAAO1B,EAAS,MAAM,CAAC;AAC7B,WAAOhX,EAAEwY,GAAUC,GAAMzU,GAAM0U,CAAI;AAAA,EAAA,GAE/BC,KAAS,CAACH,GAAUC,GAAMzB,MACvBA,EAAS,SAAS,IAAIlX,GAAI0Y,GAAUC,GAAMzB,GAAU4B,EAAS,IAAIzY,EAAS,KAAA,GAE7EyY,KAAY,CAACJ,GAAUC,GAAMzU,GAAM0U,MAAS;AAChD,UAAM7M,IAAQ4M,EAAKD,GAAUxU,CAAI;AACjC,WAAOX,GAAMqV,GAAM,CAACjZ,GAAGhB,MAAM;AAC3B,YAAM0S,IAAUsH,EAAKD,GAAU/Z,CAAC;AAChC,aAAOoa,GAAcL,GAAU/Y,GAAG0R,CAAO;AAAA,IAAA,GACxCtF,CAAK;AAAA,EAAA,GAEJgN,KAAgB,CAACL,GAAU3M,GAAOiN,MAC/BjN,EAAM,KAAK,CAAAtD,MACTuQ,EAAI,OAAOpZ,EAAM8Y,EAAS,IAAIjQ,CAAC,CAAC,CACxC,GAGGwQ,KAAcJ,IAEdH,KAAWd,GAAA,GACXsB,KAAY,CAACP,GAAMzB,MAChB+B,GAAYP,IAAU,CAACS,GAAW3T,MAChCmT,EAAKnT,CAAO,GAClB0R,CAAQ,GAGPkC,KAAc,CAAAC,MACXhR,EAASgR,GAAW,OAAO,GAE9BC,KAAa,CAACD,GAAW5T,MAAa;AAC1C,UAAM8T,IAAOnP,GAAYiP,GAAW5T,CAAQ;AAC5C,WAAO8T,EAAK,SAAS,IAAIlZ,EAAS,KAAKkZ,CAAI,IAAIlZ,EAAS,KAAA;AAAA,EAAK,GAEzDmZ,KAAW,CAACH,GAAWI,GAAuBC,MAC3C7Q,GAAWwQ,GAAWI,CAAqB,EAAE,KAAK,CAAAjD,MAChD3N,GAAWwQ,GAAWK,CAAoB,EAAE,KAAK,CAAAvV,MAC/C+U,GAAUE,IAAa;AAAA,IAC5B5C;AAAA,IACArS;AAAAA,EAAA,CACD,EAAE,IAAI,CAAAgL,OACE;AAAA,IACL,OAAAqH;AAAA,IACA,MAAArS;AAAAA,IACA,OAAAgL;AAAAA,EAAA,EAEH,CACF,CACF,GAGGwK,KAAW,CAACN,GAAW5T,MACpB6T,GAAWD,GAAW5T,CAAQ,GAEjCmU,KAAc,CAACP,GAAWI,GAAuBC,MAC9CF,GAASH,GAAWI,GAAuBC,CAAoB,EAAE,KAAK,CAAAG,MAAS;AACpF,UAAM5S,IAAS,CAAAoB,MACNrC,EAAGqT,GAAWhR,CAAQ,GAEzByR,IAAkB,2BAClBC,IAAgB1R,EAASwR,EAAM,OAAOC,GAAiB7S,CAAM,GAC7D+S,IAAe3R,EAASwR,EAAM,MAAMC,GAAiB7S,CAAM;AACjE,WAAO8S,EAAc,KAAK,CAAAE,MACjBD,EAAa,KAAK,CAAAE,MAChBlU,EAAGiU,GAAIC,CAAE,IAAI3D,GAAOsD,EAAM,OAAOA,EAAM,OAAOA,EAAM,IAAI,IAAIxZ,EAAS,KAAA,CAC7E,CACF;AAAA,EAAA,CACF,GAGG8Z,KAAU,CAAAC,MAASpX,EAAIoX,GAAOhV,EAAa,OAAO,GAElDiV,KAAc,qBAEdC,KAAmB,2BACnBC,KAA2B,QAAQD,KAAmB,UAAUA,KAAmB,KACnFE,KAAkB,0BAClBC,KAA0B,QAAQD,KAAkB,UAAUA,KAAkB,KAChFE,KAAW;AAAA,IACf,UAAUL;AAAA,IAGV,uBAAuBE;AAAA,IAEvB,sBAAsBE;AAAA,EAAA,GAGlBE,KAA2B,OAAWxL,EAAM3J,CAAO,EAAE,KAAK,CAAA2J,MAASwK,GAASxK,GAAOuL,GAAS,qBAAqB,CAAC,EAAE,KAAKlb,EAASgG,CAAO,GAAG,CAAA6I,MAASA,EAAM,CAAC,CAAC,GAC7JuM,KAA2B,CAAAnV,MAAY,CAACoV,GAAU5T,MAAW;AACjE,UAAM6T,IAAW/Y,EAAK8Y,CAAQ,GACxB9Q,IAAO+Q,MAAa,SAASA,MAAa,aAAaH,GAAyBE,CAAQ,IAAIA;AAClG,WAAO/R,GAAUiB,GAAMtE,GAAUwB,CAAM;AAAA,EAAA,GAEnC8T,KAA4BH,GAAyB,eAAe,GACpEI,KAAmBJ,GAAyB,OAAO,GACnDK,KAAwB,CAAAzR,MAAU2Q,GAAQ3Q,EAAO,MAAM,MAAM,kBAAkB,GAC/E0R,KAAuB,CAACC,GAAU1V,MAAa;AACnD,UAAM2V,IAAUJ,GAAiBG,CAAQ,GACnCE,IAAUD,EAAQ,KAAK,CAAArR,MAAQoF,EAAMpF,CAAI,CAAC,EAAE,IAAI,CAAAoF,MAASxB,GAAKwB,CAAK,CAAC;AAC1E,WAAO/D,GAAMgQ,GAASC,GAAS,CAACtR,GAAM4D,MAASrK,EAAOqK,GAAM,CAAAM,MAAOpL,GAAOsX,GAAQlM,EAAI,IAAI,KAAK,GAAG,CAAAmD,MAAW3G,GAAM2G,GAAS3L,CAAQ,MAAM,OAAOO,EAAGoL,GAASrH,CAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAA,CAAE;AAAA,EAAA,GAG1KuR,KAAsB;AAAA,IAC1B;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,EACT,GAGIC,KAAY,CAAAhd,OAAU,EAAE,OAAOid,GAAajd,CAAK,MACjDkd,KAAiB,oCACjBC,KAAgB,6CAChBC,KAAc,OAAOF,GAAe,KAAKG,CAAG,KAAKF,GAAc,KAAKE,CAAG,GACvEJ,KAAe,CAAAI,MAAO5P,GAAc4P,GAAK,GAAG,EAAE,YAAA,GAC9CC,KAAe,CAAAD,MAAOD,GAAYC,CAAG,IAAIvb,EAAS,KAAK,EAAE,OAAOmb,GAAaI,CAAG,EAAA,CAAG,IAAIvb,EAAS,KAAA,GAChGyb,KAAQ,CAAAC,MAAa;AACzB,UAAMH,IAAMG,EAAU,SAAS,EAAE;AACjC,YAAQH,EAAI,WAAW,IAAI,MAAMA,IAAMA,GAAK,YAAA;AAAA,EAAY,GAEpDI,KAAW,CAAAC,MAAc;AAC7B,UAAM1d,IAAQud,GAAMG,EAAW,GAAG,IAAIH,GAAMG,EAAW,KAAK,IAAIH,GAAMG,EAAW,IAAI;AACrF,WAAOV,GAAUhd,CAAK;AAAA,EAAA,GAGlB2d,KAAW,0DACXC,KAAY,iFACZF,KAAa,CAACG,GAAKC,GAAOC,GAAMC,OAAW;AAAA,IAC/C,KAAAH;AAAA,IACA,OAAAC;AAAA,IACA,MAAAC;AAAA,IACA,OAAAC;AAAA,EAAA,IAEIC,KAAmB,CAACJ,GAAKC,GAAOC,GAAMC,MAAU;AACpD,UAAM/a,IAAI,SAAS4a,GAAK,EAAE,GACpBK,IAAI,SAASJ,GAAO,EAAE,GACtB1c,IAAI,SAAS2c,GAAM,EAAE,GACrB3d,IAAI,WAAW4d,CAAK;AAC1B,WAAON,GAAWza,GAAGib,GAAG9c,GAAGhB,CAAC;AAAA,EAAA,GAExB+d,KAAa,CAAAC,MAAc;AAC/B,QAAIA,MAAe;AACjB,aAAOtc,EAAS,KAAK4b,GAAW,GAAG,GAAG,GAAG,CAAC,CAAC;AAE7C,UAAMW,IAAWV,GAAS,KAAKS,CAAU;AACzC,QAAIC,MAAa;AACf,aAAOvc,EAAS,KAAKmc,GAAiBI,EAAS,CAAC,GAAGA,EAAS,CAAC,GAAGA,EAAS,CAAC,GAAG,GAAG,CAAC;AAEnF,UAAMC,IAAYV,GAAU,KAAKQ,CAAU;AAC3C,WAAIE,MAAc,OACTxc,EAAS,KAAKmc,GAAiBK,EAAU,CAAC,GAAGA,EAAU,CAAC,GAAGA,EAAU,CAAC,GAAGA,EAAU,CAAC,CAAC,CAAC,IAExFxc,EAAS,KAAA;AAAA,EAAK,GAGjByc,KAAW,CAAAC,MAASlB,GAAakB,CAAK,EAAE,QAAQ,MAAML,GAAWK,CAAK,EAAE,IAAIf,EAAQ,CAAC,EAAE,WAAW,MAAM;AAC5G,UAAMgB,IAAS,SAAS,cAAc,QAAQ;AAC9C,IAAAA,EAAO,SAAS,GAChBA,EAAO,QAAQ;AACf,UAAMC,IAAgBD,EAAO,WAAW,IAAI;AAC5C,IAAAC,EAAc,UAAU,GAAG,GAAGD,EAAO,OAAOA,EAAO,MAAM,GACzDC,EAAc,YAAY,WAC1BA,EAAc,YAAYF,GAC1BE,EAAc,SAAS,GAAG,GAAG,GAAG,CAAC;AACjC,UAAMC,IAAOD,EAAc,aAAa,GAAG,GAAG,GAAG,CAAC,EAAE,MAC9Czb,IAAI0b,EAAK,CAAC,GACVT,IAAIS,EAAK,CAAC,GACVvd,IAAIud,EAAK,CAAC,GACVve,IAAIue,EAAK,CAAC;AAChB,WAAOlB,GAASC,GAAWza,GAAGib,GAAG9c,GAAGhB,CAAC,CAAC;AAAA,EAAA,CACvC,GACKwe,KAAkB,CAAAJ,MAASL,GAAWK,CAAK,EAAE,IAAIf,EAAQ,EAAE,IAAI,OAAK,MAAMoB,EAAE,KAAK,EAAE,MAAML,CAAK,GAE9FM,KAAO,CAAAC,MAAW;AACtB,QAAI/e,IAAQ+e;AAOZ,WAAO;AAAA,MACL,KAPU,MACH/e;AAAA,MAOP,KALU,CAAAT,MAAK;AACf,QAAAS,IAAQT;AAAA,MAAA;AAAA,IAIR;AAAA,EACF,GAGIyf,KAAY,CAAAC,MAAY;AAC5B,UAAMC,IAAUJ,GAAKhd,EAAS,KAAA,CAAM,GAC9Bqd,IAAS,MAAMD,EAAQ,IAAA,EAAM,KAAKD,CAAQ;AAWhD,WAAO;AAAA,MACL,OAXY,MAAM;AAClB,QAAAE,EAAA,GACAD,EAAQ,IAAIpd,EAAS,MAAM;AAAA,MAAA;AAAA,MAU3B,OARY,MAAMod,EAAQ,IAAA,EAAM,OAAA;AAAA,MAShC,KARU,MAAMA,EAAQ,IAAA;AAAA,MASxB,KARU,CAAAhV,MAAK;AACf,QAAAiV,EAAA,GACAD,EAAQ,IAAIpd,EAAS,KAAKoI,CAAC,CAAC;AAAA,MAAA;AAAA,IAM5B;AAAA,EACF,GAEIkV,KAAa,MAAMJ,GAAU,CAAA9U,MAAKA,EAAE,QAAQ,GAE5CmV,KAAgB,CAACpU,GAAQqU,GAAYC,MAClC,CAAAvG,MAAO;AACZ,UAAMwG,IAAgBJ,GAAA,GAChBK,IAAS3R,GAAQyR,CAAW,GAC5BG,IAAO,MAAM;AACjB,YAAMC,IAAgBjD,GAAsBzR,CAAM,GAC5C2U,IAAY,CAAApU,MAAQP,EAAO,UAAU,MAAMqU,GAAY,EAAE,OAAOC,EAAA,GAAe/T,EAAK,KAAKiU,CAAM;AACrG,MAAIA,KACFzG,EAAI,UAAU,CAAC1U,GAAOqb,GAAeC,CAAS,CAAC,GAC/CJ,EAAc,IAAIvU,EAAO,UAAU,cAAcqU,GAAY,CAAAO,MAAS7G,EAAI,UAAU,CAAC6G,CAAK,GAAG,EAAI,CAAC,MAElG7G,EAAI,UAAUxT,GAAOma,GAAeC,CAAS,CAAC,GAC9CJ,EAAc,IAAIvU,EAAO,UAAU,cAAcqU,GAAYtG,EAAI,WAAW,IAAO,EAAE,OAAOuG,EAAA,CAAa,CAAC;AAAA,IAC5G;AAEF,WAAAtU,EAAO,cAAcyU,EAAA,IAASzU,EAAO,GAAG,QAAQyU,CAAI,GAC7CF,EAAc;AAAA,EAAA,GAGnBM,KAAc,CAAAlO,MAAQ9N,GAAkB8N,GAAM,MAAM,GACpDmO,KAAiB,CAAAC,MAASvb,EAAIub,GAAO,CAAApO,MAAQ;AACjD,UAAMhL,IAAOgL,EAAK,QAAQA,EAAK,SAAS;AACxC,WAAIkO,GAAYlO,CAAI,IACX;AAAA,MACL,MAAAhL;AAAA,MACA,OAAOmZ,GAAenO,EAAK,IAAI;AAAA,IAAA,IAG1B;AAAA,MACL,MAAAhL;AAAA,MACA,OAAOgL,EAAK;AAAA,IAAA;AAAA,EAEhB,CACD,GACKqO,IAAiB,CAAChV,GAAQ+U,GAAOE,GAAQC,MAAa1b,EAAIub,GAAO,CAAApO,MAAQ;AAC7E,UAAMhL,IAAOgL,EAAK,QAAQA,EAAK;AAC/B,WAAIkO,GAAYlO,CAAI,IACX;AAAA,MACL,MAAM;AAAA,MACN,MAAAhL;AAAA,MACA,iBAAiB,MAAMqZ,EAAehV,GAAQ2G,EAAK,MAAMsO,GAAQC,CAAQ;AAAA,IAAA,IAGpE;AAAA,MACL,MAAAvZ;AAAA,MACA,MAAM;AAAA,MACN,UAAU,MAAMuZ,EAASvO,EAAK,KAAK;AAAA,MACnC,SAASyN,GAAcpU,GAAQiV,GAAQtO,EAAK,KAAK;AAAA,IAAA;AAAA,EAErD,CACD,GACKwO,IAAsB,CAACnV,GAAQoV,MAAU,CAAArgB,MAAS;AACtD,IAAAiL,EAAO,YAAY,0BAA0B,IAAO,EAAE,CAACoV,CAAK,GAAGrgB,GAAO;AAAA,EAAA,GAElEsgB,KAAiB,CAAAjO,MAAQ9M,GAAK8M,GAAM,CAAAT,MACpCkO,GAAYlO,CAAI,IACX,CAAC;AAAA,IACJ,GAAGA;AAAA,IACH,MAAM0O,GAAe1O,EAAK,IAAI;AAAA,EAAA,CAC/B,IAEI/D,GAAW+D,EAAK,KAAK,IAAI,CAACA,CAAI,IAAI,CAAA,CAE5C,GACK2O,KAA4B,CAACtV,GAAQ+U,GAAOE,GAAQC,MAAa,CAAAK,MAAYA,EAASP,EAAehV,GAAQ+U,GAAOE,GAAQC,CAAQ,CAAC,GACrIM,KAAiB,CAACxV,GAAQyV,GAAWL,MAAU;AACnD,UAAMM,IAAWlc,EAAIic,GAAW,CAAAE,OAAU;AAAA,MACxC,MAAMA,EAAM;AAAA,MACZ,OAAO,MAAMrC,GAASqC,EAAM,KAAK,EAAE;AAAA,MACnC,MAAM;AAAA,IAAA,EACN;AACF,WAAO,CAAC;AAAA,MACJ,MAAM;AAAA,MACN,WAAW;AAAA,MACX,UAAU;AAAA,QACR,QAAQD,EAAS,SAAS,IAAIA,IAAW;AAAA,QACzC,mBAAmB;AAAA,MAAA;AAAA,MAErB,UAAU,CAAA5M,MAAQ;AAChB,cAAM/T,IAAQ+T,EAAK,UAAU,WAAW,KAAKA,EAAK;AAClD,QAAA9I,EAAO,YAAY,0BAA0B,IAAO,EAAE,CAACoV,CAAK,GAAGrgB,GAAO;AAAA,MAAA;AAAA,IACxE,CACD;AAAA,EAAA,GAEC6gB,KAAkB,OAAU,MAAM;AAEtC,UAAMC,IADc7V,EAAO,kBAAkB,iBAAiB,MAC9B,WAAW,SAAS;AACpD,IAAAA,EAAO,YAAY,mBAAmB,IAAO,EAAE,MAAM6V,GAAS;AAAA,EAAA,GAE1DC,KAAqB,OAAU,MAAM;AAEzC,UAAMD,IADc7V,EAAO,kBAAkB,iBAAiB,MAC9B,OAAO,OAAO;AAC9C,IAAAA,EAAO,YAAY,mBAAmB,IAAO,EAAE,MAAM6V,GAAS;AAAA,EAAA,GAG1DE,KAAiB,CAAA/V,MAAU;AAC/B,UAAMgW,IAAUlB,GAAexJ,GAAiBtL,CAAM,CAAC;AACvD,WAAIgW,EAAQ,SAAS,IACZnf,EAAS,KAAK;AAAA,MACnB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAOmf;AAAA,IAAA,CACR,IAEInf,EAAS,KAAA;AAAA,EAAK,GAEjBiX,KAAW;AAAA,IACf;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IAAA;AAAA,IAET;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAOgE;AAAA,IAAA;AAAA,EACT,GAEImE,KAAa,OAAUnI,GAAS,OAAOiI,GAAe/V,CAAM,EAAE,SAAS,GAEvEkW,KAAiB,CAAClW,GAAQmW,MAAe;AAK7C,UAAMC,IAAc;AAAA,MAClB;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OATqB,CAAC;AAAA,UACtB,MAAM;AAAA,UACN,OAAO;AAAA,QAAA,CACR,EAMyB,OAAOtB,GAAe9J,GAAqBhL,CAAM,CAAC,CAAC;AAAA,MAAA;AAAA,MAE7E;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA;AAAA,MAET;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA;AAAA,IACT;AAQF,WAAO;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,MACN,OAJYmW,MAAe,SAAS,CALlB;AAAA,QAClB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA,CAEyC,EAAE,OAAOC,CAAW,IAAIA;AAAA,IAIxE;AAAA,EACF,GAwBIC,KAAc,EAAE,QArBP,CAACrW,GAAQhE,MAAY;AAClC,UAAME,IAAM8D,EAAO;AAcnB,WAAO;AAAA,MACL,WAdgB,CAACqB,GAAMtM,MAAU;AACjC,QAAAmH,EAAI,UAAUF,GAASqF,GAAMtM,CAAK;AAAA,MAAA;AAAA,MAclC,UAZe,CAACuhB,GAAMvhB,MAAU;AAChC,QAAAmH,EAAI,SAASF,GAASsa,GAAMvhB,CAAK;AAAA,MAAA;AAAA,MAYjC,WAVgB,CAACsf,GAAYtf,MAAU;AACvC,QAAIA,MAAU,KACZiL,EAAO,UAAU,OAAOqU,GAAY,EAAE,OAAO,KAAA,GAAQrY,GAAS,EAAI,IAElEgE,EAAO,UAAU,MAAMqU,GAAY,EAAE,OAAAtf,EAAA,GAASiH,CAAO;AAAA,MACvD;AAAA,IAKA;AAAA,EACF,EAEoB,GAEhBua,KAAerZ,GAAM,IAAI,GACzBsZ,KAAmB,CAACC,GAAaC,MACjCD,KAAeC,IACV,iBACED,IACF,YAEA,SAGLE,KAAe,CAAAlS,MAAO;AAC1B,UAAMgS,IAAchS,EAAI,YAAY,SAC9BiS,IAAgB9X,GAAGgY,GAAmBnS,EAAI,KAAK,GAAG,IAAI;AAC5D,WAAIA,EAAI,YAAY,UACX,EAAE,MAAM,SAAA,IACNgS,KAAeC,IACjB;AAAA,MACL,MAAM;AAAA,MACN,SAASF,GAAiBC,GAAaC,CAAa;AAAA,IAAA,IAG/C,EAAE,MAAM,OAAA;AAAA,EACjB,GAEIE,KAAqB,CAAA/R,MAAS;AAClC,UAAMgS,IAAc/c,EAAO+K,GAAO,CAAAtE,MAAQgW,GAAahW,EAAK,OAAO,CAAC;AACpE,WAAIsW,EAAY,WAAW,IAClBhgB,EAAS,KAAK,IAAI,IAChBggB,EAAY,WAAWhS,EAAM,SAC/BhO,EAAS,KAAK,IAAI,IAElBA,EAAS,KAAA;AAAA,EAClB,GAEIigB,KAAoB,CAAA3S,MAAQ;AAChC,UAAM4S,IAAWvd,EAAI2K,GAAM,OAAOwS,GAAalS,CAAG,EAAE,IAAI,GAClDuS,IAAY7d,EAAS4d,GAAU,QAAQ,GACvCE,IAAY9d,EAAS4d,GAAU,QAAQ;AAC7C,QAAI,CAACC,KAAa,CAACC;AACjB,aAAOpgB,EAAS,KAAK,MAAM;AACtB;AACL,YAAMqgB,IAAU/d,EAAS4d,GAAU,MAAM;AACzC,aAAIC,KAAa,CAACE,KAAW,CAACD,IACrBpgB,EAAS,KAAK,QAAQ,IACpB,CAACmgB,KAAa,CAACE,KAAWD,IAC5BpgB,EAAS,KAAK,QAAQ,IAEtBA,EAAS,KAAA;AAAA,IAClB;AAAA,EACF,GAGIsgB,KAAS,CAAAzgB,MAAK;AAClB,QAAI0gB,IAAS,IACTpf;AACJ,WAAO,IAAIqf,OACJD,MACHA,IAAS,IACTpf,IAAItB,EAAE,MAAM,MAAM2gB,CAAI,IAEjBrf;AAAA,EACT,GAGIsf,KAAkB,CAAC7Q,GAAWzK,MAAYpB,GAAQ6L,EAAU,KAAK,CAAAzO,MAAKoC,GAAKpC,EAAE,OAAO,CAAAmF,MAAKX,EAAGR,GAASmB,EAAE,OAAO,CAAC,CAAC,GAChHoa,KAAe,CAAC9Q,GAAWjH,GAAQhL,MAAc;AACrD,UAAMgjB,IAAUhe,EAAIgG,EAAO,WAAW,CAAAiY,MAC7BlX,GAAKkX,CAAM,EAAE,KAAK,CAAAC,MAAMJ,GAAgB7Q,GAAWiR,CAAE,CAAC,EAAE,OAAOljB,CAAS,CAChF,GACKqQ,IAAQnD,GAAI8V,CAAO;AACzB,WAAOvV,GAAO4C,EAAM,SAAS,GAAGA,CAAK;AAAA,EAAA,GAEjC8S,KAAa,CAACC,GAAYpY,MAAWA,EAAO,UAC5CqY,KAAe,CAACD,GAAYpY,MAAWA,EAAO,YAC9CsY,KAAU,CAACrR,GAAWjH,MAAW+X,GAAa9Q,GAAWjH,GAAQ5I,EAAM,GACvEmhB,KAAsB,CAACtR,GAAWlG,MAAS+W,GAAgB7Q,GAAWlG,CAAI,EAAE,OAAO,CAAA8D,MAAU,CAACA,EAAO,QAAQ,GAC7G2T,KAAc,CAACvR,GAAW5B,MAAUtK,GAAOsK,GAAO,CAAAtE,MAAQwX,GAAoBtR,GAAWlG,CAAI,CAAC,GAC9F0X,KAAqB,CAACxR,GAAWjH,MAAWmY,GAAWlR,GAAWjH,CAAM,EAAE,OAAO,CAAA0Y,MAAaF,GAAYvR,GAAWyR,EAAU,KAAK,CAAC,GACrIC,KAAuB,CAAC1R,GAAWjH,MAAWqY,GAAapR,GAAWjH,CAAM,EAAE,OAAO,CAAAqF,MAASmT,GAAYvR,GAAW5B,CAAK,CAAC;AA0FjI,GAAC,EAAE,GAzBS,EAAE,UA/DG,CAAAuT,MAAS;AACxB,QAAI,CAAC/iB,GAAQ+iB,CAAK;AAChB,YAAM,IAAI,MAAM,wBAAwB;AAE1C,QAAIA,EAAM,WAAW;AACnB,YAAM,IAAI,MAAM,iCAAiC;AAEnD,UAAMC,IAAe,CAAA,GACfC,IAAM,CAAA;AACZ,WAAA7e,EAAK2e,GAAO,CAACG,GAAOC,MAAU;AAC5B,YAAMC,IAASlhB,EAAKghB,CAAK;AACzB,UAAIE,EAAO,WAAW;AACpB,cAAM,IAAI,MAAM,gCAAgC;AAElD,YAAM9f,IAAM8f,EAAO,CAAC,GACd1jB,IAAQwjB,EAAM5f,CAAG;AACvB,UAAI2f,EAAI3f,CAAG,MAAM;AACf,cAAM,IAAI,MAAM,4BAA4BA,CAAG;AACjD,UAAWA,MAAQ;AACjB,cAAM,IAAI,MAAM,uCAAuC;AACzD,UAAW,CAACtD,GAAQN,CAAK;AACvB,cAAM,IAAI,MAAM,iCAAiC;AAEnD,MAAAsjB,EAAa,KAAK1f,CAAG,GACrB2f,EAAI3f,CAAG,IAAI,IAAI0e,MAAS;AACtB,cAAMqB,IAAYrB,EAAK;AACvB,YAAIqB,MAAc3jB,EAAM;AACtB,gBAAM,IAAI,MAAM,uCAAuC4D,IAAM,gBAAgB5D,EAAM,SAAS,OAAOA,IAAQ,YAAY2jB,CAAS;AAelI,eAAO;AAAA,UACL,MAAM,IAAIC,MAAa;AACrB,gBAAIA,EAAS,WAAWP,EAAM;AAC5B,oBAAM,IAAI,MAAM,iDAAiDA,EAAM,SAAS,WAAWO,EAAS,MAAM;AAG5G,mBADeA,EAASH,CAAK,EACf,MAAM,MAAMnB,CAAI;AAAA,UAAA;AAAA,UAEhC,OArBY,CAAAuB,MAAY;AACxB,kBAAMC,IAAathB,EAAKqhB,CAAQ;AAChC,gBAAIP,EAAa,WAAWQ,EAAW;AACrC,oBAAM,IAAI,MAAM,mDAAmDR,EAAa,KAAK,GAAG,IAAI;AAAA,YAAeQ,EAAW,KAAK,GAAG,CAAC;AAKjI,gBAAI,CAHYte,GAAO8d,GAAc,CAAAS,MAC5B3f,EAAS0f,GAAYC,CAAM,CACnC;AAEC,oBAAM,IAAI,MAAM,kEAAkED,EAAW,KAAK,IAAI,IAAI;AAAA,cAAiBR,EAAa,KAAK,IAAI,CAAC;AAEpJ,mBAAOO,EAASjgB,CAAG,EAAE,MAAM,MAAM0e,CAAI;AAAA,UAAA;AAAA,UAWrC,KAAK,CAAA0B,MAAS;AACZ,oBAAQ,IAAIA,GAAO;AAAA,cACjB,cAAAV;AAAA,cACA,aAAa1f;AAAAA,cACb,QAAQ0e;AAAA,YAAA,CACT;AAAA,UAAA;AAAA,QACH;AAAA,MACF;AAAA,IACF,CACD,GACMiB;AAAAA,EAAA,EAEK,EAEE,SAAS;AAAA,IACvB,EAAE,MAAM,CAAA,EAAC;AAAA,IACT,EAAE,MAAM,CAAC,OAAO,EAAA;AAAA,IAChB;AAAA,MACE,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,IAEF;AAAA,MACE,QAAQ;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,IAEF;AAAA,MACE,OAAO;AAAA,QACL;AAAA,QACA;AAAA,MAAA;AAAA,IACF;AAAA,EACF,CACD,EACK;AAaN,QAAMU,KAXgB,CAACrT,GAAOnG,MAAW;AACvC,UAAMyZ,IAAQ7Q,EAAU,UAAUzC,CAAK;AAEvC,WADgBmS,GAAQmB,GAAOzZ,CAAM,EACtB,KAAK,CAAAkV,MAAiB;AACnC,YAAMwE,IAAmBxE,EAAcA,EAAc,SAAS,CAAC,GACzDyE,IAAczE,EAAc,CAAC,EAAE,KAC/B0E,IAAcF,EAAiB,MAAMA,EAAiB,SACtDG,IAAeJ,EAAM,IAAI,MAAME,GAAaC,CAAW;AAC7D,aAAOtC,GAAkBuC,CAAY;AAAA,IAAA,CACtC,EAAE,MAAM,EAAE;AAAA,EAAA,GAIPC,KAAW,OAAS5W,GAAW3N,GAAO,KAAK,IAAI4e,GAAgB5e,CAAK,IAAIA,GACxEwkB,KAAwB,CAAAzZ,MAAO;AACnC,UAAM9D,IAAUJ,EAAa,QAAQkE,CAAG;AACxC,WAAO;AAAA,MACL,aAAa0D,EAAOxH,GAAS,cAAc,EAAE,MAAM,EAAE;AAAA,MACrD,aAAawH,EAAOxH,GAAS,cAAc,EAAE,MAAM,EAAE;AAAA,MACrD,aAAawH,EAAOxH,GAAS,cAAc,EAAE,IAAIsd,EAAQ,EAAE,MAAM,EAAE;AAAA,MACnE,iBAAiB9V,EAAOxH,GAAS,kBAAkB,EAAE,IAAIsd,EAAQ,EAAE,MAAM,EAAE;AAAA,IAAA;AAAA,EAC7E,GAEIE,KAAkB,CAAA1Q,MAAQ;AAC9B,UAAM2Q,IAAW3Q,EAAK,CAAC,GACjB4Q,IAAiB5Q,EAAK,MAAM,CAAC;AACnC,WAAArP,EAAKigB,GAAgB,CAAA3E,MAAS;AAC5B,MAAAtb,EAAKlC,EAAKkiB,CAAQ,GAAG,CAAA9gB,MAAO;AAC1B,QAAAlB,GAAOsd,GAAO,CAAC4E,GAAWC,MAAY;AACpC,gBAAMC,IAAkBJ,EAAS9gB,CAAG;AACpC,UAAIkhB,MAAoB,MAAMlhB,MAAQihB,KAChCC,MAAoBF,MACtBF,EAAS9gB,CAAG,IAAI;AAAA,QAEpB,CACD;AAAA,MAAA,CACF;AAAA,IAAA,CACF,GACM8gB;AAAA,EAAA,GAEHK,KAAe,CAACC,GAAS1F,GAAYrU,GAAQF,MAAQ1F,GAAK2f,GAAS,CAAAxhB,MAAQ,CAAChD,GAAYyK,EAAO,UAAU,UAAUF,GAAKuU,IAAa9b,CAAI,CAAC,CAAC,EAAE,MAAM,EAAE,GACrJyhB,KAAgB5jB,EAAM0jB,IAAc;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GACC,OAAO,GACJG,KAAgB7jB,EAAM0jB,IAAc;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GACC,QAAQ,GACLI,KAA0B,CAACla,GAAQma,MAAmB;AAC1D,UAAM/E,IAAQxJ,GAAiB5L,CAAM,GAC/BgB,IAAQ8K,GAAqB9L,CAAM,GACnCoa,IAA2B,OAAO;AAAA,MACtC,aAAa1hB,EAAM0c,GAAO,cAAc,EAAE,MAAM,EAAE;AAAA,MAClD,aAAakE,GAAS5gB,EAAM0c,GAAO,cAAc,EAAE,MAAM,EAAE,CAAC;AAAA,MAC5D,iBAAiBkE,GAAS5gB,EAAM0c,GAAO,kBAAkB,EAAE,MAAM,EAAE,CAAC;AAAA,IAAA,IAEhEiF,IAAc;AAAA,MAClB,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,aAAa;AAAA,MACb,aAAa;AAAA,MACb,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,GAEJC,IAAY,MAAM;AACtB,YAAMC,IAAcnF,EAAM,cAAc;AACxC,aAAI7K,EAAmBvK,CAAM,KAAKua,IACzB,EAAE,QAAQA,EAAA,IAEZ7hB,EAAMsI,GAAO,QAAQ,EAAE,KAAK,OAAO,CAAA,IAAK,CAAAwZ,OAAW,EAAE,QAAAA,EAAA,EAAS;AAAA,IAAA,GAEjEC,IAAWN,IAAiBC,EAAA,IAA6B,CAAA,GACzDM,IAA4B,MAAM;AACtC,YAAMC,IAAUjiB,EAAM0c,GAAO,gBAAgB,EAAE,GAAG1c,EAAMsI,GAAO,aAAa,CAAC,EAAE,KAAK,OAAO,CAAA,IAAK,CAAA4Z,OAAgB,EAAE,aAAAA,IAAc,GAC1HC,IAAUniB,EAAM0c,GAAO,gBAAgB,EAAE,GAAG1c,EAAMsI,GAAO,aAAa,CAAC,EAAE,KAAK,OAAO,CAAA,IAAK,CAAA8Z,OAAgB,EAAE,aAAAA,IAAc;AAChI,aAAO;AAAA,QACL,GAAGH;AAAA,QACH,GAAGE;AAAA,MAAA;AAAA,IACL;AAUF,WARa;AAAA,MACX,GAAGR;AAAA,MACH,GAAGjF;AAAA,MACH,GAAGpU;AAAA,MACH,GAAGyZ;AAAA,MACH,GAAGH,EAAA;AAAA,MACH,GAAGI,EAAA;AAAA,IAA0B;AAAA,EAExB,GAEHK,KAAa,CAAAjb,MAAO6F,EAAM/J,EAAa,QAAQkE,CAAG,CAAC,EAAE,IAAI,CAAA6F,MAAS;AACtE,UAAMnG,IAAS,EAAE,WAAWmR,GAAQ7Q,EAAI,KAAK,EAAA;AAC7C,WAAOkZ,GAAYrT,GAAOnG,CAAM;AAAA,EAAA,CACjC,EAAE,MAAM,EAAE,GACLwb,KAA8B,CAAChb,GAAQF,GAAKqa,MAAmB;AACnE,UAAMG,IAAY,CAACpe,GAAK4D,MAAQ;AAC9B,YAAMmb,IAAiBzX,EAAO5H,EAAa,QAAQkE,CAAG,GAAG,cAAc;AACvE,aAAIyK,EAAmBvK,CAAM,KAAKib,EAAe,WACxCA,EAAe,MAAM,EAAE,IAEzB/e,EAAI,UAAU4D,GAAK,QAAQ,KAAKyI,GAAoBvI,EAAO,KAAKF,GAAK,cAAc,KAAKyI,GAAoBvI,EAAO,KAAKF,GAAK,QAAQ,KAAK;AAAA,IAAA,GAE7I5D,IAAM8D,EAAO,KACb4a,IAAcrQ,EAAmBvK,CAAM,IAAI9D,EAAI,SAAS4D,GAAK,gBAAgB,KAAK5D,EAAI,UAAU4D,GAAK,aAAa,IAAI5D,EAAI,UAAU4D,GAAK,aAAa,KAAK5D,EAAI,SAAS4D,GAAK,gBAAgB,GAC7Lgb,IAAcvQ,EAAmBvK,CAAM,IAAIuI,GAAoBrM,GAAK4D,GAAK,SAAS,KAAK5D,EAAI,UAAU4D,GAAK,aAAa,IAAI5D,EAAI,UAAU4D,GAAK,aAAa,KAAKyI,GAAoBrM,GAAK4D,GAAK,SAAS;AAC7M,WAAO;AAAA,MACL,OAAO5D,EAAI,SAAS4D,GAAK,OAAO,KAAK5D,EAAI,UAAU4D,GAAK,OAAO;AAAA,MAC/D,QAAQ5D,EAAI,SAAS4D,GAAK,QAAQ,KAAK5D,EAAI,UAAU4D,GAAK,QAAQ;AAAA,MAClE,aAAa8a,KAA+D;AAAA,MAC5E,aAAaE,KAA+D;AAAA,MAC5E,QAAQR,EAAUpe,GAAK4D,CAAG;AAAA,MAC1B,SAAS,CAAC,CAAC5D,EAAI,OAAO,WAAW4D,CAAG,EAAE,CAAC;AAAA,MACvC,OAAO5D,EAAI,UAAU4D,GAAK,SAAS,EAAE;AAAA,MACrC,OAAOka,GAAcha,GAAQF,CAAG;AAAA,MAChC,GAAGqa,IAAiBZ,GAAsBzZ,CAAG,IAAI,CAAA;AAAA,IAAC;AAAA,EACpD,GAEIob,KAA4B,CAAClb,GAAQF,GAAKoL,MAAsB;AACpE,UAAMhP,IAAM8D,EAAO;AACnB,WAAO;AAAA,MACL,QAAQ9D,EAAI,SAAS4D,GAAK,QAAQ,KAAK5D,EAAI,UAAU4D,GAAK,QAAQ;AAAA,MAClE,OAAO5D,EAAI,UAAU4D,GAAK,SAAS,EAAE;AAAA,MACrC,MAAMib,GAAWjb,CAAG;AAAA,MACpB,OAAOka,GAAcha,GAAQF,CAAG;AAAA,MAChC,GAAGoL,IAAoBqO,GAAsBzZ,CAAG,IAAI,CAAA;AAAA,IAAC;AAAA,EACvD,GAEIqb,KAA6B,CAACnb,GAAQO,GAAM0K,GAAoBvG,MAAW;AAC/E,UAAMxI,IAAM8D,EAAO,KACbob,IAAS1W,EAAO,MAAMnE,CAAI,GAC1B8a,IAAW,CAACrf,GAASoZ,MAAUlZ,EAAI,SAASF,GAASoZ,CAAK,KAAKlZ,EAAI,UAAUF,GAASoZ,CAAK;AACjG,WAAO;AAAA,MACL,OAAOiG,EAASD,GAAQ,OAAO;AAAA,MAC/B,QAAQC,EAAS9a,GAAM,QAAQ;AAAA,MAC/B,OAAOrE,EAAI,UAAUqE,GAAM,OAAO;AAAA,MAClC,UAAUV,GAAYU,CAAI;AAAA,MAC1B,OAAOrE,EAAI,UAAUqE,GAAM,SAAS,EAAE;AAAA,MACtC,QAAQyZ,GAAcha,GAAQO,CAAI;AAAA,MAClC,QAAQ0Z,GAAcja,GAAQO,CAAI;AAAA,MAClC,GAAG0K,IAAqBsO,GAAsBhZ,CAAI,IAAI,CAAA;AAAA,IAAC;AAAA,EACzD,GAGI+a,KAAmB,CAAC3V,GAAOd,MAAU;AACzC,UAAM4B,IAAY2B,EAAU,UAAUzC,CAAK,GACrC4V,IAAWnT,EAAU,UAAU3B,CAAS,GACxCG,IAAW9M,EAAOyhB,GAAU,CAAAC,MAASniB,GAAOwL,GAAO,CAAA4W,MAASjf,EAAGgf,EAAM,SAASC,CAAK,CAAC,CAAC;AAC3F,WAAOjiB,EAAIoN,GAAU,CAAArG,OAAS;AAAA,MAC5B,SAASA,EAAK,QAAQ;AAAA,MACtB,QAAQ6H,EAAU,YAAY3B,GAAWlG,EAAK,MAAM,EAAE,IAAI,CAAAmb,MAAOA,EAAI,QAAQ,GAAG;AAAA,IAAA,EAChF;AAAA,EAAA,GAEEC,KAAsB,CAACC,GAAUC,GAAa/S,GAAMgT,MAAiB;AACzE,IAAIA,EAAa,OAAO,KACtBF,EAAS,UAAU,SAAS9S,EAAK,KAAK,GAEpCgT,EAAa,OAAO,KACtBF,EAAS,UAAU,SAAS9S,EAAK,KAAK,GAEpCgT,EAAa,QAAQ,KACvBF,EAAS,SAAS,UAAUzb,EAAY2I,EAAK,MAAM,CAAC,GAElDgT,EAAa,OAAO,KACtBD,EAAY,SAAS,SAAS1b,EAAY2I,EAAK,KAAK,CAAC;AAAA,EACvD,GAEIiT,KAAwB,CAACH,GAAU9S,GAAMgT,MAAiB;AAC9D,IAAIA,EAAa,iBAAiB,KAChCF,EAAS,UAAU,4BAA4B9S,EAAK,eAAe,GAEjEgT,EAAa,aAAa,KAC5BF,EAAS,UAAU,wBAAwB9S,EAAK,WAAW,GAEzDgT,EAAa,aAAa,KAC5BF,EAAS,UAAU,wBAAwB9S,EAAK,WAAW,GAEzDgT,EAAa,aAAa,KAC5BF,EAAS,UAAU,wBAAwBzb,EAAY2I,EAAK,WAAW,CAAC;AAAA,EAC1E,GAEIkT,KAAmB,CAAChc,GAAQ6E,GAAOiE,GAAMmT,MAAe;AAC5D,UAAMC,IAAerX,EAAM,WAAW;AACtC,IAAApL,EAAKoL,GAAO,CAAA8B,MAAQ;AAClB,YAAMwV,IAAUxV,EAAK,SACfyV,IAA6BF,IAAetlB,KAASqlB,GACrDL,IAAWvF,GAAY,OAAOrW,GAAQmc,CAAO,GAC7CN,IAAclV,EAAK,OAAO,IAAI,CAAA+U,MAAOrF,GAAY,OAAOrW,GAAQ0b,CAAG,CAAC,EAAE,MAAME,CAAQ;AAC1F,MAAAD,GAAoBC,GAAUC,GAAa/S,GAAMsT,CAA0B,GACvEnR,GAAmBjL,CAAM,KAC3B+b,GAAsBH,GAAU9S,GAAMsT,CAA0B,GAE9DH,EAAW,QAAQ,KACrBvT,GAAS1I,GAAQmc,GAASrT,EAAK,MAAM,GAEnCmT,EAAW,QAAQ,KACrBrT,GAAU5I,GAAQmc,GAASrT,EAAK,MAAM;AAAA,IACxC,CACD;AAAA,EAAA,GAEGuT,KAAuB,CAACrc,GAAQ8I,MAAS;AAC7C,IAAA9I,EAAO,YAAY,oBAAoB,IAAO;AAAA,MAC5C,MAAM8I,EAAK;AAAA,MACX,WAAW;AAAA,IAAA,CACZ;AAAA,EAAA,GAEGwT,KAAgB,CAACtc,GAAQ6E,GAAO0X,GAASzT,MAAS;AACtD,UAAM0T,IAAenkB,GAASyQ,GAAM,CAAC/T,GAAO4D,MAAQ4jB,EAAQ5jB,CAAG,MAAM5D,CAAK;AAC1E,IAAI0D,EAAK+jB,CAAY,IAAI,KAAK3X,EAAM,UAAU,KAC5Cc,EAAMd,EAAM,CAAC,CAAC,EAAE,KAAK,CAAAc,MAAS;AAC5B,YAAM+O,IAAgB4G,GAAiB3V,GAAOd,CAAK,GAC7C4X,IAAgBhkB,EAAKJ,GAASmkB,GAAc,CAACE,GAAQ/jB,MAAQA,MAAQ,WAAWA,MAAQ,UAAU,CAAC,IAAI,GACvGgkB,IAAoB/jB,EAAI4jB,GAAc,UAAU;AACtD,OAAIC,KAAiB7jB,EAAI4jB,GAAc,OAAO,MAC5CR,GAAiBhc,GAAQ0U,GAAe5L,GAAM1S,EAAMwC,GAAK4jB,CAAY,CAAC,GAEpEG,KACFN,GAAqBrc,GAAQ8I,CAAI,GAEnCD,GAAkB7I,GAAQ2F,EAAM,KAAK;AAAA,QACnC,WAAWgX;AAAA,QACX,OAAOF;AAAA,MAAA,CACR;AAAA,IAAA,CACF;AAAA,EACH,GAEIG,KAAmB,CAAC5c,GAAQ6E,GAAO0X,GAASxO,MAAQ;AACxD,UAAMjF,IAAOiF,EAAI,QAAA;AACjBA,IAAAA,EAAI,MAAA,GACJ/N,EAAO,YAAY,SAAS,MAAM;AAChC,MAAAsc,GAActc,GAAQ6E,GAAO0X,GAASzT,CAAI,GAC1C9I,EAAO,MAAA;AAAA,IAAM,CACd;AAAA,EAAA,GAEG6c,KAAY,CAAC7c,GAAQ6E,MAAU;AACnC,UAAMiY,IAAYnX,EAAMd,EAAM,CAAC,CAAC,EAAE,IAAI,CAAAc,MAASnM,EAAI8hB,GAAiB3V,GAAOd,CAAK,GAAG,CAAA8B,MAAQwU,GAA2Bnb,GAAQ2G,EAAK,SAASsE,GAAmBjL,CAAM,GAAG2G,EAAK,MAAM,CAAC,CAAC;AACrL,WAAO6S,GAAgBsD,EAAU,UAAU;AAAA,EAAA,GAEvCC,KAAS,CAAA/c,MAAU;AACvB,UAAM6E,IAAQ4M,GAAsBzR,CAAM;AAC1C,QAAI6E,EAAM,WAAW;AACnB;AAEF,UAAMiE,IAAO+T,GAAU7c,GAAQ6E,CAAK,GAC9BmY,IAAiB;AAAA,MACrB,MAAM;AAAA,MACN,MAAM;AAAA,QACJ;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,OAAO/G,GAAWjW,CAAM;AAAA,QAAA;AAAA,QAE1BkW,GAAelW,GAAQ,MAAM;AAAA,MAAA;AAAA,IAC/B,GAEIid,IAAc;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,CAAC;AAAA,QACJ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAOhH,GAAWjW,CAAM;AAAA,MAAA,CACzB;AAAA,IAAA;AAEL,IAAAA,EAAO,cAAc,KAAK;AAAA,MACxB,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAMiL,GAAmBjL,CAAM,IAAIgd,IAAiBC;AAAA,MACpD,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,QAAA;AAAA,QAER;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,MAEF,aAAanU;AAAA,MACb,UAAU1S,EAAMwmB,IAAkB5c,GAAQ6E,GAAOiE,CAAI;AAAA,IAAA,CACtD;AAAA,EAAA,GAGGoU,KAAe,CAAAld,MAAU;AAC7B,UAAMgW,IAAUlB,GAAevJ,GAAgBvL,CAAM,CAAC;AACtD,WAAIgW,EAAQ,SAAS,IACZnf,EAAS,KAAK;AAAA,MACnB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAOmf;AAAA,IAAA,CACR,IAEInf,EAAS,KAAA;AAAA,EAAK,GAEjBsmB,KAAe;AAAA,IACna,OAAUD,GAAa,OAAOD,GAAald,CAAM,EAAE,SAAS,GAEzEqd,KAAoB,CAACzB,GAAU9S,GAAMgT,MAAiB;AAC1D,IAAIA,EAAa,OAAO,KACtBF,EAAS,UAAU,SAAS9S,EAAK,KAAK,GAEpCgT,EAAa,QAAQ,KACvBF,EAAS,SAAS,UAAUzb,EAAY2I,EAAK,MAAM,CAAC;AAAA,EACtD,GAEIwU,KAAsB,CAAC1B,GAAU9S,GAAMgT,MAAiB;AAC5D,IAAIA,EAAa,iBAAiB,KAChCF,EAAS,SAAS,oBAAoB9S,EAAK,eAAe,GAExDgT,EAAa,aAAa,KAC5BF,EAAS,SAAS,gBAAgB9S,EAAK,WAAW,GAEhDgT,EAAa,aAAa,KAC5BF,EAAS,SAAS,gBAAgB9S,EAAK,WAAW;AAAA,EACpD,GAEIyU,KAAiB,CAACvd,GAAQmE,GAAM2E,GAAMmT,MAAe;AAEzD,UAAMG,IADcjY,EAAK,WAAW,IACavN,KAASqlB;AAC1D,IAAAxiB,EAAK0K,GAAM,CAAAqZ,MAAU;AACnB,YAAM5B,IAAWvF,GAAY,OAAOrW,GAAQwd,CAAM;AAClD,MAAAH,GAAkBzB,GAAU9S,GAAMsT,CAA0B,GACxDlR,GAAkBlL,CAAM,KAC1Bsd,GAAoB1B,GAAU9S,GAAMsT,CAA0B,GAE5DH,EAAW,OAAO,KACpBvT,GAAS1I,GAAQwd,GAAQ1U,EAAK,KAAK;AAAA,IACrC,CACD;AAAA,EAAA,GAEG2U,KAAqB,CAACzd,GAAQ8I,MAAS;AAC3C,IAAA9I,EAAO,YAAY,mBAAmB,IAAO;AAAA,MAC3C,MAAM8I,EAAK;AAAA,MACX,WAAW;AAAA,IAAA,CACZ;AAAA,EAAA,GAEG4U,KAAe,CAAC1d,GAAQmE,GAAMoY,GAASzT,MAAS;AACpD,UAAM0T,IAAenkB,GAASyQ,GAAM,CAAC/T,GAAO4D,MAAQ4jB,EAAQ5jB,CAAG,MAAM5D,CAAK;AAC1E,QAAI0D,EAAK+jB,CAAY,IAAI,GAAG;AAC1B,YAAMmB,IAAe/kB,EAAI4jB,GAAc,MAAM,GACvCC,IAAgBkB,IAAellB,EAAK+jB,CAAY,IAAI,IAAI;AAC9D,MAAIC,KACFc,GAAevd,GAAQmE,GAAM2E,GAAM1S,EAAMwC,GAAK4jB,CAAY,CAAC,GAEzDmB,KACFF,GAAmBzd,GAAQ8I,CAAI,GAEjCnD,EAAM/J,EAAa,QAAQuI,EAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAAwB,MAASkD,GAAkB7I,GAAQ2F,EAAM,KAAK;AAAA,QACtF,WAAWgY;AAAA,QACX,OAAOlB;AAAA,MAAA,CACR,CAAC;AAAA,IAAA;AAAA,EACJ,GAEImB,KAAkB,CAAC5d,GAAQmE,GAAMoY,GAASxO,MAAQ;AACtD,UAAMjF,IAAOiF,EAAI,QAAA;AACjBA,IAAAA,EAAI,MAAA,GACJ/N,EAAO,YAAY,SAAS,MAAM;AAChC,MAAA0d,GAAa1d,GAAQmE,GAAMoY,GAASzT,CAAI,GACxC9I,EAAO,MAAA;AAAA,IAAM,CACd;AAAA,EAAA,GAEG6d,KAAS,CAAA7d,MAAU;AACvB,UAAMmE,IAAOuN,GAAqBtR,GAAkBJ,CAAM,GAAGkR,GAAS,QAAQ;AAC9E,QAAI/M,EAAK,WAAW;AAClB;AAEF,UAAM2Z,IAAWtkB,EAAI2K,GAAM,CAAAqZ,MAAUtC,GAA0Blb,GAAQwd,EAAO,KAAKtS,GAAkBlL,CAAM,CAAC,CAAC,GACvG8I,IAAO0Q,GAAgBsE,CAAQ,GAC/Bd,IAAiB;AAAA,MACrB,MAAM;AAAA,MACN,MAAM;AAAA,QACJ;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,OAAOI,GAAWpd,CAAM;AAAA,QAAA;AAAA,QAE1BkW,GAAelW,GAAQ,KAAK;AAAA,MAAA;AAAA,IAC9B,GAEIid,IAAc;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,CAAC;AAAA,QACJ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAOG,GAAWpd,CAAM;AAAA,MAAA,CACzB;AAAA,IAAA;AAEL,IAAAA,EAAO,cAAc,KAAK;AAAA,MACxB,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAMkL,GAAkBlL,CAAM,IAAIgd,IAAiBC;AAAA,MACnD,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,QAAA;AAAA,QAER;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,MAEF,aAAanU;AAAA,MACb,UAAU1S,EAAMwnB,IAAiB5d,GAAQxG,EAAI2K,GAAM,CAAAnM,MAAKA,EAAE,GAAG,GAAG8Q,CAAI;AAAA,IAAA,CACrE;AAAA,EAAA,GAGGiV,KAAW,CAAC/d,GAAQgW,GAASgI,MAAmB;AACpD,UAAMC,IAAoBD,IAAsB;AAAA,MAC9C;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,MAEb;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,IACb,IAZyC,IAcrCE,IAAc;AAAA,MAClB;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA;AAAA,MAET;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA;AAAA,IACT,GAEIC,IAAkB/S,GAAqBpL,CAAM,IAAI;AAAA,MACrD;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,MAEb;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,WAAW;AAAA,MAAA;AAAA,MAEb;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MAAA;AAAA,MAET;AAAA,QACE,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO,CAAC;AAAA,UACJ,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QAAA,CACR;AAAA,MAAA;AAAA,IACL,IACE,CAAA,GACEoe,IAAgB,CAAC;AAAA,MACnB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,QACL;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,QAET;AAAA,UACE,MAAM;AAAA,UACN,OAAO;AAAA,QAAA;AAAA,MACT;AAAA,IACF,CACD,GACGC,IAAgBrI,EAAQ,SAAS,IAAI,CAAC;AAAA,MACxC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAOA;AAAA,IAAA,CACR,IAAI,CAAA;AACP,WAAOiI,EAAiB,OAAOC,CAAW,EAAE,OAAOC,CAAe,EAAE,OAAOC,CAAa,EAAE,OAAOC,CAAa;AAAA,EAAA,GAG1GC,KAAY,CAACpiB,GAAK4D,GAAKvH,GAAMxD,MAAU;AAC3C,QAAI+K,EAAI,YAAY,QAAQA,EAAI,YAAY;AAC1C,MAAI1K,GAASmD,CAAI,KAAK9C,GAAcV,CAAK,IACvCmH,EAAI,SAAS4D,GAAKvH,GAAMxD,CAAK,IAE7BmH,EAAI,UAAU4D,GAAKvH,CAAI;AAAA,aAGrBuH,EAAI;AACN,eAAShI,IAAI,GAAGA,IAAIgI,EAAI,SAAS,QAAQhI;AACvC,QAAAwmB,GAAUpiB,GAAK4D,EAAI,SAAShI,CAAC,GAAGS,GAAMxD,CAAK;AAAA,EAGjD,GAEIwpB,KAAqB,CAACve,GAAQwe,GAAU1V,GAAM2V,MAAsB;AACxE,UAAMviB,IAAM8D,EAAO,KACbgB,IAAQ,CAAA,GACR0d,IAAS,CAAA,GACTC,IAAuBpU,EAAmBvK,CAAM,GAChD4e,IAAwBzT,EAAoBnL,CAAM;AAkBxD,QAjBKzK,GAAYuT,EAAK,KAAK,MACzB9H,EAAM,QAAQ8H,EAAK,QAErB4V,EAAO,SAASve,EAAY2I,EAAK,MAAM,GACnC6V,IACFD,EAAO,QAAQve,EAAY2I,EAAK,KAAK,IAC5B5M,EAAI,UAAUsiB,GAAU,OAAO,MACxCxd,EAAM,QAAQd,GAAe4I,EAAK,KAAK,IAErC6V,KACFD,EAAO,cAAc,IAAIve,EAAY2I,EAAK,MAAM,GAChD4V,EAAO,gBAAgB,IAAIve,EAAY2I,EAAK,WAAW,MAEvD9H,EAAM,SAAS8H,EAAK,QACpB9H,EAAM,cAAc8H,EAAK,aACzB9H,EAAM,cAAc8H,EAAK,cAEvB6V,KAAwBH,EAAS,UAAU;AAC7C,YAAMK,IAAa,CAAA;AAUnB,UATIJ,EAAkB,WACpBI,EAAW,cAAc,IAAI1e,EAAY2I,EAAK,MAAM,IAElD2V,EAAkB,gBACpBI,EAAW,UAAU1e,EAAY2I,EAAK,WAAW,IAE/C8V,KAAyBH,EAAkB,gBAC7CI,EAAW,cAAc,IAAI/V,EAAK,cAEhC,CAAChQ,GAAU+lB,CAAU;AACvB,iBAAS/mB,IAAI,GAAGA,IAAI0mB,EAAS,SAAS,QAAQ1mB;AAC5C,UAAAwmB,GAAUpiB,GAAKsiB,EAAS,SAAS1mB,CAAC,GAAG+mB,CAAU;AAAA,IAEnD;AAEF,QAAID,GAAuB;AACzB,YAAME,IAAUhW;AAChB,MAAA4V,EAAO,kBAAkB,IAAII,EAAQ,iBACrCJ,EAAO,cAAc,IAAII,EAAQ,aACjCJ,EAAO,cAAc,IAAII,EAAQ;AAAA,IAAA;AAEnC,IAAA5iB,EAAI,UAAUsiB,GAAU;AAAA,MACtB,GAAG5S,GAAiB5L,CAAM;AAAA,MAC1B,GAAG0e;AAAA,IAAA,CACJ,GACDxiB,EAAI,WAAWsiB,GAAU;AAAA,MACvB,GAAG1S,GAAqB9L,CAAM;AAAA,MAC9B,GAAGgB;AAAA,IAAA,CACJ;AAAA,EAAA,GAEG+d,KAAoB,CAAC/e,GAAQwe,GAAUjC,GAASxO,MAAQ;AAC5D,UAAM7R,IAAM8D,EAAO,KACb8I,IAAOiF,EAAI,QAAA,GACXyO,IAAenkB,GAASyQ,GAAM,CAAC/T,GAAO4D,MAAQ4jB,EAAQ5jB,CAAG,MAAM5D,CAAK;AAC1EgZ,IAAAA,EAAI,MAAA,GACAjF,EAAK,UAAU,MACjB,OAAOA,EAAK,OAEd9I,EAAO,YAAY,SAAS,MAAM;AAChC,UAAI,CAACwe,GAAU;AACb,cAAMQ,IAAOlc,GAAMgG,EAAK,IAAI,EAAE,MAAM,CAAC,GAC/B3E,IAAOrB,GAAMgG,EAAK,IAAI,EAAE,MAAM,CAAC;AACrC,QAAA9I,EAAO,YAAY,kBAAkB,IAAO;AAAA,UAC1C,MAAAmE;AAAAA,UACA,SAAS6a;AAAA,QAAA,CACV,GACDR,IAAWhN,GAAiBpR,GAAkBJ,CAAM,GAAGC,GAAUD,CAAM,CAAC,EAAE,KAAK,CAAAO,MAAQoF,EAAMpF,GAAMN,GAAUD,CAAM,CAAC,CAAC,EAAE,IAAI,CAAA2F,MAASA,EAAM,GAAG,EAAE,SAAA;AAAA,MAAS;AAE1J,UAAIlN,EAAK+jB,CAAY,IAAI,GAAG;AAC1B,cAAMyC,IAA2B;AAAA,UAC/B,QAAQrmB,EAAI4jB,GAAc,QAAQ;AAAA,UAClC,aAAa5jB,EAAI4jB,GAAc,aAAa;AAAA,UAC5C,aAAa5jB,EAAI4jB,GAAc,aAAa;AAAA,QAAA;AAE9C,QAAA+B,GAAmBve,GAAQwe,GAAU1V,GAAMmW,CAAwB;AACnE,cAAMC,IAAahjB,EAAI,OAAO,WAAWsiB,CAAQ,EAAE,CAAC;AACpD,SAAIU,KAAc,CAACpW,EAAK,WAAW,CAACoW,KAAcpW,EAAK,YACrD9I,EAAO,YAAY,uBAAuB,GAE5C0I,GAAS1I,GAAQwe,GAAU1V,EAAK,KAAK;AAAA,MAAA;AAIvC,UAFA9I,EAAO,MAAA,GACPA,EAAO,UAAA,GACHvH,EAAK+jB,CAAY,IAAI,GAAG;AAC1B,cAAM2C,IAAkBvmB,EAAI4jB,GAAc,SAAS,GAC7CC,IAAgB0C,IAAkB1mB,EAAK+jB,CAAY,IAAI,IAAI;AACjE,QAAA3T,GAAkB7I,GAAQwe,GAAU;AAAA,UAClC,WAAWW;AAAA,UACX,OAAO1C;AAAA,QAAA,CACR;AAAA,MAAA;AAAA,IACH,CACD;AAAA,EAAA,GAEG2C,KAAO,CAACpf,GAAQge,MAAmB;AACvC,UAAM9hB,IAAM8D,EAAO;AACnB,QAAIwe,GACA1V,IAAOoR,GAAwBla,GAAQmL,EAAoBnL,CAAM,CAAC;AACtE,IAAIge,KACFlV,EAAK,OAAO,KACZA,EAAK,OAAO,KACRqC,EAAoBnL,CAAM,MAC5B8I,EAAK,cAAc,IACnBA,EAAK,cAAc,IACnBA,EAAK,kBAAkB,QAGzB0V,IAAWtiB,EAAI,UAAU8D,EAAO,UAAU,YAAY,SAASA,EAAO,SAAS,GAC3Ewe,IACF1V,IAAOkS,GAA4Bhb,GAAQwe,GAAUrT,EAAoBnL,CAAM,CAAC,IAE5EmL,EAAoBnL,CAAM,MAC5B8I,EAAK,cAAc,IACnBA,EAAK,cAAc,IACnBA,EAAK,kBAAkB;AAI7B,UAAMkN,IAAUlB,GAAetJ,GAAkBxL,CAAM,CAAC;AACxD,IAAIgW,EAAQ,SAAS,KACflN,EAAK,UACPA,EAAK,QAAQA,EAAK,MAAM,QAAQ,2BAA2B,EAAE;AAGjE,UAAMuW,IAAe;AAAA,MACnB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOtB,GAAS/d,GAAQgW,GAASgI,CAAc;AAAA,IAAA,GAE3CsB,IAAkB,OAAO;AAAA,MAC7B,MAAM;AAAA,MACN,OAAO,CAACD,CAAY;AAAA,IAAA,IAEhBE,IAAe,OAAO;AAAA,MAC1B,MAAM;AAAA,MACN,MAAM;AAAA,QACJ;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,OAAO,CAACF,CAAY;AAAA,QAAA;AAAA,QAEtBnJ,GAAelW,GAAQ,OAAO;AAAA,MAAA;AAAA,IAChC,IAEIwf,IAAarU,EAAoBnL,CAAM,IAAIuf,EAAA,IAAiBD,EAAA;AAClE,IAAAtf,EAAO,cAAc,KAAK;AAAA,MACxB,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAMwf;AAAA,MACN,UAAUppB,EAAM2oB,IAAmB/e,GAAQwe,GAAU1V,CAAI;AAAA,MACzD,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,QAAA;AAAA,QAER;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,MAEF,aAAaA;AAAA,IAAA,CACd;AAAA,EAAA,GAGG2W,KAAmB,CAAAzf,MAAU;AACjC,UAAM0f,IAAY,CAAAhpB,MAAK;AACrB,MAAI4J,GAAoBF,GAAkBJ,CAAM,CAAC,KAC/CtJ,EAAA;AAAA,IACF;AAEF,IAAAe,GAAO;AAAA,MACL,eAAerB,EAAMgpB,IAAMpf,GAAQ,EAAK;AAAA,MACxC,kBAAkB5J,EAAMynB,IAAQ7d,CAAM;AAAA,MACtC,mBAAmB5J,EAAM2mB,IAAQ/c,CAAM;AAAA,MACvC,sBAAsB5J,EAAMgpB,IAAMpf,GAAQ,EAAI;AAAA,IAAA,GAC7C,CAAC2f,GAAMpnB,MAASyH,EAAO,WAAWzH,GAAM,MAAMmnB,EAAUC,CAAI,CAAC,CAAC;AAAA,EAAA,GAG7DC,KAAQ,CAACvkB,GAAOY,MAAamD,GAAQ/D,GAAOY,CAAQ,EAAE,OAAA,GAEtD4jB,KAAY5pB,IACZ6pB,KAAa,CAAApL,MAAiB;AAClC,UAAMqL,IAAU,CAAC5jB,GAAMrH,MAASoM,GAAO/E,GAAMrH,CAAI,EAAE,OAAO,CAAAkrB,MAAQ,SAASA,GAAM,EAAE,IAAI,CAAC,GAClFC,IAAkB,OAAQF,EAAQ5jB,GAAM,SAAS,KAAK4jB,EAAQ5jB,GAAM,SAAS;AACnF,WAAOuY,EAAc,SAAS,KAAKna,GAAOma,GAAeuL,CAAe,IAAIppB,EAAS,KAAK6d,CAAa,IAAI7d,EAAS,KAAA;AAAA,EAAK,GAErHqpB,KAAW,CAACva,GAAO+O,GAAexD,MAClCwD,EAAc,UAAU,IACnB7d,EAAS,KAAA,IAETuZ,GAAYzK,GAAOuL,EAAS,uBAAuBA,EAAS,oBAAoB,EAAE,IAAI,CAAAnM,OAAW;AAAA,IACtG,QAAAA;AAAAA,IACA,OAAO2P;AAAA,EAAA,EACP,GAIAyL,KAAS,CAAA5f,OAAS;AAAA,IACtB,SAASA;AAAAA,IACT,UAAU1J,EAAS,KAAA;AAAA,IACnB,YAAYA,EAAS,KAAA;AAAA,IACrB,WAAW,CAAC0J,CAAI;AAAA,EAAA,IAEZ6f,KAAU,CAAC1L,GAAe/O,GAAOpF,OAAU;AAAA,IAC/C,SAASA;AAAAA,IACT,UAAU2f,GAASva,GAAO+O,GAAexD,EAAQ;AAAA,IACjD,YAAY4O,GAAWpL,CAAa;AAAA,IACpC,WAAWmL,GAAUnL,CAAa;AAAA,EAAA,IAG9B2L,KAAsB,CAAArgB,MAAU;AACpC,UAAMsgB,IAAUzM,GAAKhd,EAAS,KAAA,CAAM,GAC9B0pB,IAAiB1M,GAAK,EAAE;AAC9B,QAAI2M,IAAmB3pB,EAAS,KAAA;AAChC,UAAM4pB,IAAYvjB,GAAM,SAAS,GAC3BwjB,IAAyB,CAAA/nB,MAAO6nB,EAAiB,OAAO,CAAAhJ,MAAW,CAACA,EAAQ7e,CAAG,CAAC,GAChFgoB,IAAW,MAAMpP,GAA0BnR,GAAkBJ,CAAM,GAAGC,GAAUD,CAAM,CAAC,GACvF4gB,IAAS,MAAMrP,GAA0BlR,GAAgBL,CAAM,GAAGC,GAAUD,CAAM,CAAC,GACnF6gB,IAAc,MAAMF,EAAA,EAAW,KAAK,CAAAG,MAAsB/e,GAAQH,GAAM+D,EAAMmb,CAAkB,GAAGF,IAAS,KAAKjb,CAAK,GAAG,CAACob,GAAYC,MACtIxkB,EAAGukB,GAAYC,CAAQ,IACrBP,EAAUK,CAAkB,IACvBjqB,EAAS,KAAKspB,GAAOW,CAAkB,CAAC,IAExCjqB,EAAS,KAAKupB,GAAQ3O,GAAsBzR,CAAM,GAAG+gB,GAAYD,CAAkB,CAAC,IAGxFjqB,EAAS,KAAA,CACjB,CAAC,CAAC,GACGoqB,IAAsB,CAAAX,MACT3a,EAAM2a,EAAQ,OAAO,EACtB,IAAI,CAAA3a,MAAS;AAC3B,YAAMc,IAAY2B,EAAU,UAAUzC,CAAK,GACrC+O,KAAgBoD,GAAQrR,GAAW6Z,CAAO,EAAE,MAAM,EAAE,GACpDY,KAASjnB,GAAMya,IAAe,CAAC1a,IAAKuG,QACpCA,GAAK,aACPvG,GAAI,QAAQ,IACRuG,GAAK,WAAW,IAClBvG,GAAI,UAAU,KACLuG,GAAK,SAASA,GAAK,WAAWkG,EAAU,KAAK,YACtDzM,GAAI,SAAS,MAGVA,KACN;AAAA,QACD,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,MAAA,CACT;AACD,aAAO;AAAA,QACL,WAAWie,GAAmBxR,GAAW6Z,CAAO,EAAE,OAAA;AAAA,QAClD,aAAanI,GAAqB1R,GAAW6Z,CAAO,EAAE,OAAA;AAAA,QACtD,QAAAY;AAAA,MAAA;AAAA,IACF,CACD,GAEGC,IAAe,MAAM;AACzB,MAAAb,EAAQ,IAAInJ,GAAO0J,CAAW,EAAA,CAAG,GACjCL,IAAmBF,EAAQ,MAAM,KAAKW,CAAmB,GACzDxnB,EAAK8mB,EAAe,IAAA,GAAO9pB,EAAI;AAAA,IAAA,GAE3B2qB,IAAe,CAAAC,OACnBA,EAAA,GACAd,EAAe,IAAIA,EAAe,IAAA,EAAM,OAAO,CAACc,CAAO,CAAC,CAAC,GAClD,MAAM;AACX,MAAAd,EAAe,IAAIzmB,EAAOymB,EAAe,IAAA,GAAO,CAAA3M,MAAKA,MAAMyN,CAAO,CAAC;AAAA,IAAA,IAGjEC,IAAU,CAACvT,GAAKwT,MAAeH,EAAa,MAAMd,EAAQ,MAAM,KAAK,MAAM;AAC/EvS,MAAAA,EAAI,WAAW,EAAK;AAAA,IAAA,GACnB,CAAAuS,MAAW;AACZvS,MAAAA,EAAI,WAAW,CAACwT,EAAWjB,CAAO,KAAKtgB,EAAO,UAAU,YAAY;AAAA,IAAA,CACrE,CAAC,GACIwhB,IAAoB,CAACzT,GAAKwT,GAAYE,MAAaL,EAAa,MAAMd,EAAQ,MAAM,KAAK,MAAM;AACnGvS,MAAAA,EAAI,WAAW,EAAK,GACpBA,EAAI,UAAU,EAAK;AAAA,IAAA,GAClB,CAAAuS,MAAW;AACZvS,MAAAA,EAAI,WAAW,CAACwT,EAAWjB,CAAO,KAAKtgB,EAAO,UAAU,YAAY,GACpE+N,EAAI,UAAU0T,EAASnB,CAAO,CAAC;AAAA,IAAA,CAChC,CAAC,GACIoB,IAAuB,OAAiBlB,EAAiB,OAAO,OAAWhJ,EAAQ,OAAOmK,CAAa,CAAC,GACxGC,IAAe,CAAA7T,MAAOuT,EAAQvT,GAAK,OAAK,EAAK,GAC7C8T,IAAmB,CAAA9T,MAAOuT,EAAQvT,GAAK,CAAAuS,MAAWG,EAAUH,EAAQ,OAAO,CAAC,GAC5EwB,KAAgB,CAAAH,MAAiB,CAAA5T,MAAOuT,EAAQvT,GAAK,CAAAuS,MAAWG,EAAUH,EAAQ,OAAO,KAAKoB,EAAqBC,CAAa,CAAC,GACjII,KAAmB,CAAAC,MAAoB,CAAAjU,MAAOuT,EAAQvT,GAAK,CAAAuS,MAAWG,EAAUH,EAAQ,OAAO,KAAK0B,EAAA,EAAmB,QAAQ,GAC/HC,KAAyB,CAACD,GAAkBL,MAAkB,CAAA5T,MAAOuT,EAAQvT,GAAK,CAAAuS,MAAWG,EAAUH,EAAQ,OAAO,KAAK0B,EAAA,EAAmB,YAAYN,EAAqBC,CAAa,CAAC,GAC7LO,KAAmB,CAAAnU,MAAOuT,EAAQvT,GAAK,CAAAoU,MAAYzB,EAAuB,WAAW,CAAC,GACtF0B,KAAqB,CAAArU,MAAOuT,EAAQvT,GAAK,CAAAoU,MAAYzB,EAAuB,aAAa,CAAC,GAC1F2B,KAA0B,CAAAtU,MACvByT,EAAkBzT,GAAKpX,GAAO,CAAA2pB,MAClB3a,EAAM2a,EAAQ,SAASrgB,GAAUD,CAAM,CAAC,EACzC,OAAO,CAAA2F,MAASia,GAAMja,GAAO,SAAS,CAAC,CACxD,GAEG2c,KAAsB,CAACC,GAASC,MAAe,CAAAzU,MAC5CyT,EAAkBzT,GAAK,CAAAuS,MAAWG,EAAUH,EAAQ,OAAO,GAAG,MAAMtgB,EAAO,kBAAkBuiB,CAAO,MAAMC,CAAU,GAEvHC,KAAyBH,GAAoB,mBAAmB,QAAQ,GACxEI,KAA4BJ,GAAoB,mBAAmB,IAAI;AAC7E,WAAAtiB,EAAO,GAAG,8CAA8CmhB,CAAY,GAC7D;AAAA,MACL,cAAAS;AAAA,MACA,kBAAAC;AAAA,MACA,eAAAC;AAAA,MACA,kBAAAC;AAAA,MACA,wBAAAE;AAAA,MACA,kBAAAC;AAAA,MACA,oBAAAE;AAAA,MACA,cAAAjB;AAAA,MACA,yBAAAkB;AAAA,MACA,wBAAAI;AAAA,MACA,2BAAAC;AAAA,MACA,SAASpC,EAAQ;AAAA,IAAA;AAAA,EACnB;AAGF,MAAIqC,KAAS,QAAQ,KAAK,MAAM,QAAQ,uBAAuB;AAE/D,QAAMC,KAAgB,wBAChBC,KAAeD,KAAgB,QAC/BE,KAAkBF,KAAgB,WAClCG,KAAU,CAAAjuB,MAAQ;AACtB,QAAIL;AACJ,UAAMsgB,KAAStgB,IAAKkuB,GAAO,YAAY,QAAQluB,MAAO,SAASA,IAAK,CAAA;AACpE,WAAOmG,GAAQma,GAAO,CAAApO,MAAQ9P,EAAS,KAAK8P,EAAK,QAAQ7R,CAAI,CAAC,CAAC;AAAA,EAAA,GAE3DkuB,KAAU,MAAMD,GAAQF,EAAY,GACpCI,KAAa,MAAMF,GAAQD,EAAe,GAE1CI,KAAoB,CAAAljB,MAAU,CAAA+N,MAAO;AACzC,UAAMoV,IAAc,MAAM;AACxBpV,MAAAA,EAAI,WAAW/N,EAAO,UAAU,YAAY;AAAA,IAAA;AAE9C,WAAAA,EAAO,GAAG,cAAcmjB,CAAW,GACnCA,EAAA,GACO,MAAM;AACX,MAAAnjB,EAAO,IAAI,cAAcmjB,CAAW;AAAA,IAAA;AAAA,EACtC,GAEIC,KAAa,CAACpjB,GAAQqjB,MAAqB;AAC/C,IAAArjB,EAAO,GAAG,SAAS,cAAc,SAAS;AAAA,MACxC,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASkjB,GAAkBljB,CAAM;AAAA,MACjC,OAAO,CAAAuV,MAAYA,EAAS,uEAAuE;AAAA,IAAA,CACpG;AACD,UAAM+N,IAAM,CAAAf,MAAW,MAAMviB,EAAO,YAAYuiB,CAAO,GACjDgB,IAAwB,CAAChrB,GAAMirB,MAAS;AAC5C,MAAIxjB,EAAO,sBAAsBwjB,EAAK,OAAO,KAC3CxjB,EAAO,GAAG,SAAS,UAAUzH,GAAM;AAAA,QACjC,GAAGirB;AAAA,QACH,UAAU9tB,EAAW8tB,EAAK,QAAQ,IAAIA,EAAK,WAAWF,EAAIE,EAAK,OAAO;AAAA,MAAA,CACvE;AAAA,IACH,GAEIC,IAA8B,CAAClrB,GAAMirB,MAAS;AAClD,MAAIxjB,EAAO,sBAAsBwjB,EAAK,OAAO,KAC3CxjB,EAAO,GAAG,SAAS,gBAAgBzH,GAAM;AAAA,QACvC,GAAGirB;AAAA,QACH,UAAU9tB,EAAW8tB,EAAK,QAAQ,IAAIA,EAAK,WAAWF,EAAIE,EAAK,OAAO;AAAA,MAAA,CACvE;AAAA,IACH;AAEF,IAAAD,EAAsB,cAAc;AAAA,MAClC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,eAAe;AAAA,MACnC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,kBAAkB;AAAA,MACtC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,mBAAmB;AAAA,MACvC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,mBAAmB;AAAA,MACvC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,wBAAwB;AAAA,MAC5C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,uBAAuB;AAAA,MAC3C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,kBAAkB;AAAA,MACtC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,iBAAiB;AAAA,MACrC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,wBAAwB;AAAA,MAC5C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,cAAc,SAAS;AAAA,IAAA,CAClD,GACDE,EAAsB,uBAAuB;AAAA,MAC3C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,cAAc,QAAQ;AAAA,IAAA,CACjD,GACDE,EAAsB,kBAAkB;AAAA,MACtC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,cAAc,OAAO;AAAA,IAAA,CAChD,GACDE,EAAsB,eAAe;AAAA,MACnC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,gBAAgB;AAAA,MACpC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB;AAAA,IAAA,CAC3B,GACDE,EAAsB,uBAAuB;AAAA,MAC3C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,iBAAiBL,EAAO;AAAA,IAAA,CACnD,GACDO,EAAsB,sBAAsB;AAAA,MAC1C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,iBAAiBL,EAAO;AAAA,IAAA,CACnD,GACDO,EAAsB,eAAe;AAAA,MACnC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,cAAc,OAAO;AAAA,IAAA,CAChD,GACDE,EAAsB,gBAAgB;AAAA,MACpC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,cAAc,OAAO;AAAA,IAAA,CAChD,GACDE,EAAsB,uBAAuB;AAAA,MAC3C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,uBAAuBJ,IAAY,SAAS;AAAA,IAAA,CACvE,GACDM,EAAsB,sBAAsB;AAAA,MAC1C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASF,EAAiB,uBAAuBJ,IAAY,QAAQ;AAAA,IAAA,CACtE,GACDM,EAAsB,qBAAqB;AAAA,MACzC,SAAS;AAAA,MACT,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAASL,GAAkBljB,CAAM;AAAA,IAAA,CAClC;AACD,UAAM0jB,IAAiBrO,GAAe7J,GAAkBxL,CAAM,CAAC;AAC/D,IAAI0jB,EAAe,WAAW,KAAK1jB,EAAO,sBAAsB,qBAAqB,KACnFA,EAAO,GAAG,SAAS,cAAc,cAAc;AAAA,MAC7C,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOsV,GAA0BtV,GAAQ0jB,GAAgB,cAAc,CAAA3uB,MAASiL,EAAO,YAAY,uBAAuB,IAAOjL,CAAK,CAAC;AAAA,MACvI,SAASsuB,EAAiB;AAAA,IAAA,CAC3B;AAEH,UAAMM,IAAqBtO,GAAe/J,GAAiBtL,CAAM,CAAC;AAClE,IAAI2jB,EAAmB,WAAW,KAAK3jB,EAAO,sBAAsB,yBAAyB,KAC3FA,EAAO,GAAG,SAAS,cAAc,kBAAkB;AAAA,MACjD,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOsV,GAA0BtV,GAAQ2jB,GAAoB,kBAAkB,CAAA5uB,MAASiL,EAAO,YAAY,2BAA2B,IAAOjL,CAAK,CAAC;AAAA,MACnJ,SAASsuB,EAAiB;AAAA,IAAA,CAC3B,GAECrjB,EAAO,sBAAsB,wBAAwB,MACvDA,EAAO,GAAG,SAAS,cAAc,mBAAmB;AAAA,MAClD,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOsV,GAA0BtV,GAAQ8R,IAAqB,0BAA0BqD,EAAoBnV,GAAQ,gBAAgB,CAAC;AAAA,MACrI,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,cAAc,wBAAwB;AAAA,MACvD,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOsV,GAA0BtV,GAAQ+K,GAAqB/K,CAAM,GAAG,wBAAwBmV,EAAoBnV,GAAQ,cAAc,CAAC;AAAA,MAC1I,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,cAAc,wBAAwB;AAAA,MACvD,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAOsV,GAA0BtV,GAAQgL,GAAqBhL,CAAM,GAAG,wBAAwBmV,EAAoBnV,GAAQ,cAAc,CAAC;AAAA,MAC1I,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,cAAc,4BAA4B;AAAA,MAC3D,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO,OAAYuV,EAASC,GAAexV,GAAQ0L,GAA2B1L,CAAM,GAAG,kBAAkB,CAAC;AAAA,MAC1G,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,cAAc,wBAAwB;AAAA,MACvD,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO,OAAYuV,EAASC,GAAexV,GAAQ2L,GAAuB3L,CAAM,GAAG,cAAc,CAAC;AAAA,MAClG,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,IAEHI,EAA4B,gBAAgB;AAAA,MAC1C,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAASJ,EAAiB;AAAA,IAAA,CAC3B,GACDI,EAA4B,kBAAkB;AAAA,MAC5C,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU7N,GAAgB5V,CAAM;AAAA,MAChC,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDI,EAA4B,kBAAkB;AAAA,MAC5C,SAAS;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAU3N,GAAmB9V,CAAM;AAAA,MACnC,SAASqjB,EAAiB;AAAA,IAAA,CAC3B;AAAA,EAAA,GAEGO,KAAc,CAAA5jB,MAAU;AAC5B,UAAM6jB,IAAkB,CAAAle,MAAS3F,EAAO,IAAI,GAAG2F,GAAO,OAAO,KAAK3F,EAAO,UAAU,SAAS2F,CAAK,KAAK3F,EAAO,IAAI,WAAW2F,EAAM,UAAU,GACtIme,IAAUrY,GAAWzL,CAAM;AACjC,IAAI8jB,EAAQ,SAAS,KACnB9jB,EAAO,GAAG,SAAS,kBAAkB,SAAS;AAAA,MAC5C,WAAW6jB;AAAA,MACX,OAAOC;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,IAAA,CACX;AAAA,EACH,GAGIC,KAAkB,CAAA/jB,MAAU,CAAA+N,MAAO;AACvC,UAAMoV,IAAc,MAAM;AACxBpV,MAAAA,EAAI,WAAW/N,EAAO,UAAU,YAAY;AAAA,IAAA;AAE9C,WAAAA,EAAO,GAAG,cAAcmjB,CAAW,GACnCA,EAAA,GACO,MAAM;AACX,MAAAnjB,EAAO,IAAI,cAAcmjB,CAAW;AAAA,IAAA;AAAA,EACtC,GAEIa,KAAe,CAAChkB,GAAQqjB,MAAqB;AACjD,UAAMC,IAAM,CAAAf,MAAW,MAAMviB,EAAO,YAAYuiB,CAAO,GACjD0B,IAAsB,CAAC1rB,GAAMirB,MAC7BxjB,EAAO,sBAAsBwjB,EAAK,OAAO,KAC3CxjB,EAAO,GAAG,SAAS,YAAYzH,GAAM;AAAA,MACnC,GAAGirB;AAAA,MACH,UAAU9tB,EAAW8tB,EAAK,QAAQ,IAAIA,EAAK,WAAWF,EAAIE,EAAK,OAAO;AAAA,IAAA,CACvE,GACM,MAEA,IAGLU,IAA4B,CAAC3rB,GAAMirB,MAAS;AAChD,MAAIxjB,EAAO,sBAAsBwjB,EAAK,OAAO,KAC3CxjB,EAAO,GAAG,SAAS,kBAAkBzH,GAAM;AAAA,QACzC,GAAGirB;AAAA,QACH,UAAU9tB,EAAW8tB,EAAK,QAAQ,IAAIA,EAAK,WAAWF,EAAIE,EAAK,OAAO;AAAA,MAAA,CACvE;AAAA,IACH,GAEIW,IAAoB,CAAArb,MAAQ;AAChC,MAAA9I,EAAO,YAAY,kBAAkB,IAAO;AAAA,QAC1C,MAAM8I,EAAK;AAAA,QACX,SAASA,EAAK;AAAA,MAAA,CACf;AAAA,IAAA,GAEGsb,IAAkB;AAAA,MACtBH,EAAoB,wBAAwB;AAAA,QAC1C,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,uBAAuB;AAAA,QACzC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,kBAAkB;AAAA,QACpC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,iBAAiB;AAAA,QACnC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,eAAe;AAAA,QACjC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,gBAAgB;AAAA,QAClC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,uBAAuB;AAAA,QACzC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,iBAAiBL,EAAO;AAAA,MAAA,CACnD;AAAA,MACDiB,EAAoB,sBAAsB;AAAA,QACxC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,iBAAiBL,EAAO;AAAA,MAAA,CACnD;AAAA,IAAA,GAEGqB,IAAqB;AAAA,MACzBJ,EAAoB,2BAA2B;AAAA,QAC7C,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,cAAc,SAAS;AAAA,MAAA,CAClD;AAAA,MACDY,EAAoB,0BAA0B;AAAA,QAC5C,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,cAAc,QAAQ;AAAA,MAAA,CACjD;AAAA,MACDY,EAAoB,qBAAqB;AAAA,QACvC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,cAAc,OAAO;AAAA,MAAA,CAChD;AAAA,MACDY,EAAoB,kBAAkB;AAAA,QACpC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,cAAc,OAAO;AAAA,MAAA,CAChD;AAAA,MACDY,EAAoB,mBAAmB;AAAA,QACrC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,cAAc,OAAO;AAAA,MAAA,CAChD;AAAA,MACDY,EAAoB,0BAA0B;AAAA,QAC5C,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,uBAAuBJ,IAAY,SAAS;AAAA,MAAA,CACvE;AAAA,MACDgB,EAAoB,yBAAyB;AAAA,QAC3C,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB,uBAAuBJ,IAAY,QAAQ;AAAA,MAAA,CACtE;AAAA,IAAA,GAEGqB,IAAmB;AAAA,MACvBL,EAAoB,kBAAkB;AAAA,QACpC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,mBAAmB;AAAA,QACrC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,MACDY,EAAoB,mBAAmB;AAAA,QACrC,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAASZ,EAAiB;AAAA,MAAA,CAC3B;AAAA,IAAA;AAEH,IAAKhY,GAAarL,CAAM,IAQtBA,EAAO,GAAG,SAAS,kBAAkB,eAAe;AAAA,MAClD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAM,CAAC;AAAA,QACpB,MAAM;AAAA,QACN,WAAW;AAAA,QACX,UAAUmkB;AAAA,MAAA,CACX;AAAA,MACH,SAASJ,GAAgB/jB,CAAM;AAAA,IAAA,CAChC,IAhBDA,EAAO,GAAG,SAAS,YAAY,eAAe;AAAA,MAC5C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAUsjB,EAAI,sBAAsB;AAAA,MACpC,SAASS,GAAgB/jB,CAAM;AAAA,IAAA,CAChC,GAaHA,EAAO,GAAG,SAAS,YAAY,qBAAqB;AAAA,MAClD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAUsjB,EAAI,sBAAsB;AAAA,MACpC,SAASS,GAAgB/jB,CAAM;AAAA,IAAA,CAChC,GACDikB,EAAoB,cAAc;AAAA,MAChC,MAAM;AAAA,MACN,SAASZ,EAAiB;AAAA,MAC1B,SAAS;AAAA,IAAA,CACV,GACDY,EAAoB,eAAe;AAAA,MACjC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAASZ,EAAiB;AAAA,MAC1B,SAAS;AAAA,IAAA,CACV,GACGlqB,EAASirB,GAAiB,EAAI,KAChCpkB,EAAO,GAAG,SAAS,kBAAkB,OAAO;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiBhK,EAAS,yIAAyI;AAAA,IAAA,CACpK,GAECmD,EAASkrB,GAAoB,EAAI,KACnCrkB,EAAO,GAAG,SAAS,kBAAkB,UAAU;AAAA,MAC7C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiBhK,EAAS,gJAAgJ;AAAA,IAAA,CAC3K,GAECmD,EAASmrB,GAAkB,EAAI,KACjCtkB,EAAO,GAAG,SAAS,kBAAkB,QAAQ;AAAA,MAC3C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiBhK,EAAS,gDAAgD;AAAA,IAAA,CAC3E,GAEHgK,EAAO,GAAG,SAAS,eAAe,SAAS;AAAA,MACzC,QAAQ,OACNqjB,EAAiB,aAAA,GACVA,EAAiB,UAAU,KAAKrtB,EAAS,EAAE,GAAG,CAAAsqB,MAC/C/nB,EAAK+nB,EAAQ,OAAO,MAAM,YACrB,2BAEA,yDAEV;AAAA,IACH,CACD;AACD,UAAMoD,IAAiBrO,GAAe7J,GAAkBxL,CAAM,CAAC;AAC/D,IAAI0jB,EAAe,WAAW,KAAK1jB,EAAO,sBAAsB,qBAAqB,KACnFA,EAAO,GAAG,SAAS,kBAAkB,cAAc;AAAA,MACjD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMgV,EAAehV,GAAQ0jB,GAAgB,cAAc,CAAA3uB,MAASiL,EAAO,YAAY,uBAAuB,IAAOjL,CAAK,CAAC;AAAA,MAC5I,SAASsuB,EAAiB;AAAA,IAAA,CAC3B;AAEH,UAAMM,IAAqBtO,GAAe/J,GAAiBtL,CAAM,CAAC;AAClE,IAAI2jB,EAAmB,WAAW,KAAK3jB,EAAO,sBAAsB,yBAAyB,KAC3FA,EAAO,GAAG,SAAS,kBAAkB,kBAAkB;AAAA,MACrD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMgV,EAAehV,GAAQ2jB,GAAoB,kBAAkB,CAAA5uB,MAASiL,EAAO,YAAY,2BAA2B,IAAOjL,CAAK,CAAC;AAAA,MACxJ,SAASsuB,EAAiB;AAAA,IAAA,CAC3B,GAECrjB,EAAO,sBAAsB,wBAAwB,MACvDA,EAAO,GAAG,SAAS,kBAAkB,mBAAmB;AAAA,MACtD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMgV,EAAehV,GAAQ8R,IAAqB,0BAA0BqD,EAAoBnV,GAAQ,gBAAgB,CAAC;AAAA,MAC1I,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,kBAAkB,wBAAwB;AAAA,MAC3D,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMgV,EAAehV,GAAQ+K,GAAqB/K,CAAM,GAAG,wBAAwBmV,EAAoBnV,GAAQ,cAAc,CAAC;AAAA,MAC/I,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,kBAAkB,wBAAwB;AAAA,MAC3D,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMgV,EAAehV,GAAQgL,GAAqBhL,CAAM,GAAG,wBAAwBmV,EAAoBnV,GAAQ,cAAc,CAAC;AAAA,MAC/I,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,kBAAkB,4BAA4B;AAAA,MAC/D,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMwV,GAAexV,GAAQ0L,GAA2B1L,CAAM,GAAG,kBAAkB;AAAA,MACpG,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDrjB,EAAO,GAAG,SAAS,kBAAkB,wBAAwB;AAAA,MAC3D,MAAM;AAAA,MACN,MAAM;AAAA,MACN,iBAAiB,MAAMwV,GAAexV,GAAQ2L,GAAuB3L,CAAM,GAAG,cAAc;AAAA,MAC5F,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,IAEHa,EAA0B,gBAAgB;AAAA,MACxC,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAASb,EAAiB;AAAA,IAAA,CAC3B,GACDa,EAA0B,kBAAkB;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAUtO,GAAgB5V,CAAM;AAAA,MAChC,SAASqjB,EAAiB;AAAA,IAAA,CAC3B,GACDa,EAA0B,kBAAkB;AAAA,MAC1C,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,UAAUpO,GAAmB9V,CAAM;AAAA,MACnC,SAASqjB,EAAiB;AAAA,IAAA,CAC3B;AAAA,EAAA,GAGGkB,KAAS,CAAAvkB,MAAU;AACvB,UAAMqjB,IAAmBhD,GAAoBrgB,CAAM;AACnD,IAAA4K,GAAS5K,CAAM,GACfyf,GAAiBzf,CAAM,GACvBgkB,GAAahkB,GAAQqjB,CAAgB,GACrCD,GAAWpjB,GAAQqjB,CAAgB,GACnCO,GAAY5jB,CAAM;AAAA,EAAA;AAEpB,MAAIwkB,KAAW,MAAM;AACnB,IAAApwB,EAAS,IAAI,SAASmwB,EAAM;AAAA,EAAA;AAG9B,EAAAC,GAAA;AAEJ,GAAA;;;;;","x_google_ignoreList":[0]}