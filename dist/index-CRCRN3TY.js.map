{"version":3,"file":"index-CRCRN3TY.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/charmap/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const fireInsertCustomChar = (editor, chr) => {\n      return editor.dispatch('insertCustomChar', { chr });\n    };\n\n    const insertChar = (editor, chr) => {\n      const evtChr = fireInsertCustomChar(editor, chr).chr;\n      editor.execCommand('mceInsertContent', false, evtChr);\n    };\n\n    const hasProto = (v, constructor, predicate) => {\n      var _a;\n      if (predicate(v, constructor.prototype)) {\n        return true;\n      } else {\n        return ((_a = v.constructor) === null || _a === void 0 ? void 0 : _a.name) === constructor.name;\n      }\n    };\n    const typeOf = x => {\n      const t = typeof x;\n      if (x === null) {\n        return 'null';\n      } else if (t === 'object' && Array.isArray(x)) {\n        return 'array';\n      } else if (t === 'object' && hasProto(x, String, (o, proto) => proto.isPrototypeOf(o))) {\n        return 'string';\n      } else {\n        return t;\n      }\n    };\n    const isType = type => value => typeOf(value) === type;\n    const isSimpleType = type => value => typeof value === type;\n    const eq = t => a => t === a;\n    const isArray$1 = isType('array');\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n    const isFunction = isSimpleType('function');\n\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const nativePush = Array.prototype.push;\n    const map = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n    const findUntil = (xs, pred, until) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return Optional.some(x);\n        } else if (until(x, i)) {\n          break;\n        }\n      }\n      return Optional.none();\n    };\n    const find = (xs, pred) => {\n      return findUntil(xs, pred, never);\n    };\n    const flatten = xs => {\n      const r = [];\n      for (let i = 0, len = xs.length; i < len; ++i) {\n        if (!isArray$1(xs[i])) {\n          throw new Error('Arr.flatten item ' + i + ' was not an array, input: ' + xs);\n        }\n        nativePush.apply(r, xs[i]);\n      }\n      return r;\n    };\n    const bind = (xs, f) => flatten(map(xs, f));\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      const charMapProcessor = value => isFunction(value) || isArray$1(value);\n      registerOption('charmap', { processor: charMapProcessor });\n      registerOption('charmap_append', { processor: charMapProcessor });\n    };\n    const getCharMap$1 = option('charmap');\n    const getCharMapAppend = option('charmap_append');\n\n    const isArray = global.isArray;\n    const UserDefined = 'User Defined';\n    const getDefaultCharMap = () => {\n      return [\n        {\n          name: 'Currency',\n          characters: [\n            [\n              36,\n              'dollar sign'\n            ],\n            [\n              162,\n              'cent sign'\n            ],\n            [\n              8364,\n              'euro sign'\n            ],\n            [\n              163,\n              'pound sign'\n            ],\n            [\n              165,\n              'yen sign'\n            ],\n            [\n              164,\n              'currency sign'\n            ],\n            [\n              8352,\n              'euro-currency sign'\n            ],\n            [\n              8353,\n              'colon sign'\n            ],\n            [\n              8354,\n              'cruzeiro sign'\n            ],\n            [\n              8355,\n              'french franc sign'\n            ],\n            [\n              8356,\n              'lira sign'\n            ],\n            [\n              8357,\n              'mill sign'\n            ],\n            [\n              8358,\n              'naira sign'\n            ],\n            [\n              8359,\n              'peseta sign'\n            ],\n            [\n              8360,\n              'rupee sign'\n            ],\n            [\n              8361,\n              'won sign'\n            ],\n            [\n              8362,\n              'new sheqel sign'\n            ],\n            [\n              8363,\n              'dong sign'\n            ],\n            [\n              8365,\n              'kip sign'\n            ],\n            [\n              8366,\n              'tugrik sign'\n            ],\n            [\n              8367,\n              'drachma sign'\n            ],\n            [\n              8368,\n              'german penny symbol'\n            ],\n            [\n              8369,\n              'peso sign'\n            ],\n            [\n              8370,\n              'guarani sign'\n            ],\n            [\n              8371,\n              'austral sign'\n            ],\n            [\n              8372,\n              'hryvnia sign'\n            ],\n            [\n              8373,\n              'cedi sign'\n            ],\n            [\n              8374,\n              'livre tournois sign'\n            ],\n            [\n              8375,\n              'spesmilo sign'\n            ],\n            [\n              8376,\n              'tenge sign'\n            ],\n            [\n              8377,\n              'indian rupee sign'\n            ],\n            [\n              8378,\n              'turkish lira sign'\n            ],\n            [\n              8379,\n              'nordic mark sign'\n            ],\n            [\n              8380,\n              'manat sign'\n            ],\n            [\n              8381,\n              'ruble sign'\n            ],\n            [\n              20870,\n              'yen character'\n            ],\n            [\n              20803,\n              'yuan character'\n            ],\n            [\n              22291,\n              'yuan character, in hong kong and taiwan'\n            ],\n            [\n              22278,\n              'yen/yuan character variant one'\n            ]\n          ]\n        },\n        {\n          name: 'Text',\n          characters: [\n            [\n              169,\n              'copyright sign'\n            ],\n            [\n              174,\n              'registered sign'\n            ],\n            [\n              8482,\n              'trade mark sign'\n            ],\n            [\n              8240,\n              'per mille sign'\n            ],\n            [\n              181,\n              'micro sign'\n            ],\n            [\n              183,\n              'middle dot'\n            ],\n            [\n              8226,\n              'bullet'\n            ],\n            [\n              8230,\n              'three dot leader'\n            ],\n            [\n              8242,\n              'minutes / feet'\n            ],\n            [\n              8243,\n              'seconds / inches'\n            ],\n            [\n              167,\n              'section sign'\n            ],\n            [\n              182,\n              'paragraph sign'\n            ],\n            [\n              223,\n              'sharp s / ess-zed'\n            ]\n          ]\n        },\n        {\n          name: 'Quotations',\n          characters: [\n            [\n              8249,\n              'single left-pointing angle quotation mark'\n            ],\n            [\n              8250,\n              'single right-pointing angle quotation mark'\n            ],\n            [\n              171,\n              'left pointing guillemet'\n            ],\n            [\n              187,\n              'right pointing guillemet'\n            ],\n            [\n              8216,\n              'left single quotation mark'\n            ],\n            [\n              8217,\n              'right single quotation mark'\n            ],\n            [\n              8220,\n              'left double quotation mark'\n            ],\n            [\n              8221,\n              'right double quotation mark'\n            ],\n            [\n              8218,\n              'single low-9 quotation mark'\n            ],\n            [\n              8222,\n              'double low-9 quotation mark'\n            ],\n            [\n              60,\n              'less-than sign'\n            ],\n            [\n              62,\n              'greater-than sign'\n            ],\n            [\n              8804,\n              'less-than or equal to'\n            ],\n            [\n              8805,\n              'greater-than or equal to'\n            ],\n            [\n              8211,\n              'en dash'\n            ],\n            [\n              8212,\n              'em dash'\n            ],\n            [\n              175,\n              'macron'\n            ],\n            [\n              8254,\n              'overline'\n            ],\n            [\n              164,\n              'currency sign'\n            ],\n            [\n              166,\n              'broken bar'\n            ],\n            [\n              168,\n              'diaeresis'\n            ],\n            [\n              161,\n              'inverted exclamation mark'\n            ],\n            [\n              191,\n              'turned question mark'\n            ],\n            [\n              710,\n              'circumflex accent'\n            ],\n            [\n              732,\n              'small tilde'\n            ],\n            [\n              176,\n              'degree sign'\n            ],\n            [\n              8722,\n              'minus sign'\n            ],\n            [\n              177,\n              'plus-minus sign'\n            ],\n            [\n              247,\n              'division sign'\n            ],\n            [\n              8260,\n              'fraction slash'\n            ],\n            [\n              215,\n              'multiplication sign'\n            ],\n            [\n              185,\n              'superscript one'\n            ],\n            [\n              178,\n              'superscript two'\n            ],\n            [\n              179,\n              'superscript three'\n            ],\n            [\n              188,\n              'fraction one quarter'\n            ],\n            [\n              189,\n              'fraction one half'\n            ],\n            [\n              190,\n              'fraction three quarters'\n            ]\n          ]\n        },\n        {\n          name: 'Mathematical',\n          characters: [\n            [\n              402,\n              'function / florin'\n            ],\n            [\n              8747,\n              'integral'\n            ],\n            [\n              8721,\n              'n-ary sumation'\n            ],\n            [\n              8734,\n              'infinity'\n            ],\n            [\n              8730,\n              'square root'\n            ],\n            [\n              8764,\n              'similar to'\n            ],\n            [\n              8773,\n              'approximately equal to'\n            ],\n            [\n              8776,\n              'almost equal to'\n            ],\n            [\n              8800,\n              'not equal to'\n            ],\n            [\n              8801,\n              'identical to'\n            ],\n            [\n              8712,\n              'element of'\n            ],\n            [\n              8713,\n              'not an element of'\n            ],\n            [\n              8715,\n              'contains as member'\n            ],\n            [\n              8719,\n              'n-ary product'\n            ],\n            [\n              8743,\n              'logical and'\n            ],\n            [\n              8744,\n              'logical or'\n            ],\n            [\n              172,\n              'not sign'\n            ],\n            [\n              8745,\n              'intersection'\n            ],\n            [\n              8746,\n              'union'\n            ],\n            [\n              8706,\n              'partial differential'\n            ],\n            [\n              8704,\n              'for all'\n            ],\n            [\n              8707,\n              'there exists'\n            ],\n            [\n              8709,\n              'diameter'\n            ],\n            [\n              8711,\n              'backward difference'\n            ],\n            [\n              8727,\n              'asterisk operator'\n            ],\n            [\n              8733,\n              'proportional to'\n            ],\n            [\n              8736,\n              'angle'\n            ]\n          ]\n        },\n        {\n          name: 'Extended Latin',\n          characters: [\n            [\n              192,\n              'A - grave'\n            ],\n            [\n              193,\n              'A - acute'\n            ],\n            [\n              194,\n              'A - circumflex'\n            ],\n            [\n              195,\n              'A - tilde'\n            ],\n            [\n              196,\n              'A - diaeresis'\n            ],\n            [\n              197,\n              'A - ring above'\n            ],\n            [\n              256,\n              'A - macron'\n            ],\n            [\n              198,\n              'ligature AE'\n            ],\n            [\n              199,\n              'C - cedilla'\n            ],\n            [\n              200,\n              'E - grave'\n            ],\n            [\n              201,\n              'E - acute'\n            ],\n            [\n              202,\n              'E - circumflex'\n            ],\n            [\n              203,\n              'E - diaeresis'\n            ],\n            [\n              274,\n              'E - macron'\n            ],\n            [\n              204,\n              'I - grave'\n            ],\n            [\n              205,\n              'I - acute'\n            ],\n            [\n              206,\n              'I - circumflex'\n            ],\n            [\n              207,\n              'I - diaeresis'\n            ],\n            [\n              298,\n              'I - macron'\n            ],\n            [\n              208,\n              'ETH'\n            ],\n            [\n              209,\n              'N - tilde'\n            ],\n            [\n              210,\n              'O - grave'\n            ],\n            [\n              211,\n              'O - acute'\n            ],\n            [\n              212,\n              'O - circumflex'\n            ],\n            [\n              213,\n              'O - tilde'\n            ],\n            [\n              214,\n              'O - diaeresis'\n            ],\n            [\n              216,\n              'O - slash'\n            ],\n            [\n              332,\n              'O - macron'\n            ],\n            [\n              338,\n              'ligature OE'\n            ],\n            [\n              352,\n              'S - caron'\n            ],\n            [\n              217,\n              'U - grave'\n            ],\n            [\n              218,\n              'U - acute'\n            ],\n            [\n              219,\n              'U - circumflex'\n            ],\n            [\n              220,\n              'U - diaeresis'\n            ],\n            [\n              362,\n              'U - macron'\n            ],\n            [\n              221,\n              'Y - acute'\n            ],\n            [\n              376,\n              'Y - diaeresis'\n            ],\n            [\n              562,\n              'Y - macron'\n            ],\n            [\n              222,\n              'THORN'\n            ],\n            [\n              224,\n              'a - grave'\n            ],\n            [\n              225,\n              'a - acute'\n            ],\n            [\n              226,\n              'a - circumflex'\n            ],\n            [\n              227,\n              'a - tilde'\n            ],\n            [\n              228,\n              'a - diaeresis'\n            ],\n            [\n              229,\n              'a - ring above'\n            ],\n            [\n              257,\n              'a - macron'\n            ],\n            [\n              230,\n              'ligature ae'\n            ],\n            [\n              231,\n              'c - cedilla'\n            ],\n            [\n              232,\n              'e - grave'\n            ],\n            [\n              233,\n              'e - acute'\n            ],\n            [\n              234,\n              'e - circumflex'\n            ],\n            [\n              235,\n              'e - diaeresis'\n            ],\n            [\n              275,\n              'e - macron'\n            ],\n            [\n              236,\n              'i - grave'\n            ],\n            [\n              237,\n              'i - acute'\n            ],\n            [\n              238,\n              'i - circumflex'\n            ],\n            [\n              239,\n              'i - diaeresis'\n            ],\n            [\n              299,\n              'i - macron'\n            ],\n            [\n              240,\n              'eth'\n            ],\n            [\n              241,\n              'n - tilde'\n            ],\n            [\n              242,\n              'o - grave'\n            ],\n            [\n              243,\n              'o - acute'\n            ],\n            [\n              244,\n              'o - circumflex'\n            ],\n            [\n              245,\n              'o - tilde'\n            ],\n            [\n              246,\n              'o - diaeresis'\n            ],\n            [\n              248,\n              'o slash'\n            ],\n            [\n              333,\n              'o macron'\n            ],\n            [\n              339,\n              'ligature oe'\n            ],\n            [\n              353,\n              's - caron'\n            ],\n            [\n              249,\n              'u - grave'\n            ],\n            [\n              250,\n              'u - acute'\n            ],\n            [\n              251,\n              'u - circumflex'\n            ],\n            [\n              252,\n              'u - diaeresis'\n            ],\n            [\n              363,\n              'u - macron'\n            ],\n            [\n              253,\n              'y - acute'\n            ],\n            [\n              254,\n              'thorn'\n            ],\n            [\n              255,\n              'y - diaeresis'\n            ],\n            [\n              563,\n              'y - macron'\n            ],\n            [\n              913,\n              'Alpha'\n            ],\n            [\n              914,\n              'Beta'\n            ],\n            [\n              915,\n              'Gamma'\n            ],\n            [\n              916,\n              'Delta'\n            ],\n            [\n              917,\n              'Epsilon'\n            ],\n            [\n              918,\n              'Zeta'\n            ],\n            [\n              919,\n              'Eta'\n            ],\n            [\n              920,\n              'Theta'\n            ],\n            [\n              921,\n              'Iota'\n            ],\n            [\n              922,\n              'Kappa'\n            ],\n            [\n              923,\n              'Lambda'\n            ],\n            [\n              924,\n              'Mu'\n            ],\n            [\n              925,\n              'Nu'\n            ],\n            [\n              926,\n              'Xi'\n            ],\n            [\n              927,\n              'Omicron'\n            ],\n            [\n              928,\n              'Pi'\n            ],\n            [\n              929,\n              'Rho'\n            ],\n            [\n              931,\n              'Sigma'\n            ],\n            [\n              932,\n              'Tau'\n            ],\n            [\n              933,\n              'Upsilon'\n            ],\n            [\n              934,\n              'Phi'\n            ],\n            [\n              935,\n              'Chi'\n            ],\n            [\n              936,\n              'Psi'\n            ],\n            [\n              937,\n              'Omega'\n            ],\n            [\n              945,\n              'alpha'\n            ],\n            [\n              946,\n              'beta'\n            ],\n            [\n              947,\n              'gamma'\n            ],\n            [\n              948,\n              'delta'\n            ],\n            [\n              949,\n              'epsilon'\n            ],\n            [\n              950,\n              'zeta'\n            ],\n            [\n              951,\n              'eta'\n            ],\n            [\n              952,\n              'theta'\n            ],\n            [\n              953,\n              'iota'\n            ],\n            [\n              954,\n              'kappa'\n            ],\n            [\n              955,\n              'lambda'\n            ],\n            [\n              956,\n              'mu'\n            ],\n            [\n              957,\n              'nu'\n            ],\n            [\n              958,\n              'xi'\n            ],\n            [\n              959,\n              'omicron'\n            ],\n            [\n              960,\n              'pi'\n            ],\n            [\n              961,\n              'rho'\n            ],\n            [\n              962,\n              'final sigma'\n            ],\n            [\n              963,\n              'sigma'\n            ],\n            [\n              964,\n              'tau'\n            ],\n            [\n              965,\n              'upsilon'\n            ],\n            [\n              966,\n              'phi'\n            ],\n            [\n              967,\n              'chi'\n            ],\n            [\n              968,\n              'psi'\n            ],\n            [\n              969,\n              'omega'\n            ]\n          ]\n        },\n        {\n          name: 'Symbols',\n          characters: [\n            [\n              8501,\n              'alef symbol'\n            ],\n            [\n              982,\n              'pi symbol'\n            ],\n            [\n              8476,\n              'real part symbol'\n            ],\n            [\n              978,\n              'upsilon - hook symbol'\n            ],\n            [\n              8472,\n              'Weierstrass p'\n            ],\n            [\n              8465,\n              'imaginary part'\n            ]\n          ]\n        },\n        {\n          name: 'Arrows',\n          characters: [\n            [\n              8592,\n              'leftwards arrow'\n            ],\n            [\n              8593,\n              'upwards arrow'\n            ],\n            [\n              8594,\n              'rightwards arrow'\n            ],\n            [\n              8595,\n              'downwards arrow'\n            ],\n            [\n              8596,\n              'left right arrow'\n            ],\n            [\n              8629,\n              'carriage return'\n            ],\n            [\n              8656,\n              'leftwards double arrow'\n            ],\n            [\n              8657,\n              'upwards double arrow'\n            ],\n            [\n              8658,\n              'rightwards double arrow'\n            ],\n            [\n              8659,\n              'downwards double arrow'\n            ],\n            [\n              8660,\n              'left right double arrow'\n            ],\n            [\n              8756,\n              'therefore'\n            ],\n            [\n              8834,\n              'subset of'\n            ],\n            [\n              8835,\n              'superset of'\n            ],\n            [\n              8836,\n              'not a subset of'\n            ],\n            [\n              8838,\n              'subset of or equal to'\n            ],\n            [\n              8839,\n              'superset of or equal to'\n            ],\n            [\n              8853,\n              'circled plus'\n            ],\n            [\n              8855,\n              'circled times'\n            ],\n            [\n              8869,\n              'perpendicular'\n            ],\n            [\n              8901,\n              'dot operator'\n            ],\n            [\n              8968,\n              'left ceiling'\n            ],\n            [\n              8969,\n              'right ceiling'\n            ],\n            [\n              8970,\n              'left floor'\n            ],\n            [\n              8971,\n              'right floor'\n            ],\n            [\n              9001,\n              'left-pointing angle bracket'\n            ],\n            [\n              9002,\n              'right-pointing angle bracket'\n            ],\n            [\n              9674,\n              'lozenge'\n            ],\n            [\n              9824,\n              'black spade suit'\n            ],\n            [\n              9827,\n              'black club suit'\n            ],\n            [\n              9829,\n              'black heart suit'\n            ],\n            [\n              9830,\n              'black diamond suit'\n            ],\n            [\n              8194,\n              'en space'\n            ],\n            [\n              8195,\n              'em space'\n            ],\n            [\n              8201,\n              'thin space'\n            ],\n            [\n              8204,\n              'zero width non-joiner'\n            ],\n            [\n              8205,\n              'zero width joiner'\n            ],\n            [\n              8206,\n              'left-to-right mark'\n            ],\n            [\n              8207,\n              'right-to-left mark'\n            ]\n          ]\n        }\n      ];\n    };\n    const charmapFilter = charmap => {\n      return global.grep(charmap, item => {\n        return isArray(item) && item.length === 2;\n      });\n    };\n    const getCharsFromOption = optionValue => {\n      if (isArray(optionValue)) {\n        return charmapFilter(optionValue);\n      }\n      if (typeof optionValue === 'function') {\n        return optionValue();\n      }\n      return [];\n    };\n    const extendCharMap = (editor, charmap) => {\n      const userCharMap = getCharMap$1(editor);\n      if (userCharMap) {\n        charmap = [{\n            name: UserDefined,\n            characters: getCharsFromOption(userCharMap)\n          }];\n      }\n      const userCharMapAppend = getCharMapAppend(editor);\n      if (userCharMapAppend) {\n        const userDefinedGroup = global.grep(charmap, cg => cg.name === UserDefined);\n        if (userDefinedGroup.length) {\n          userDefinedGroup[0].characters = [\n            ...userDefinedGroup[0].characters,\n            ...getCharsFromOption(userCharMapAppend)\n          ];\n          return charmap;\n        }\n        return charmap.concat({\n          name: UserDefined,\n          characters: getCharsFromOption(userCharMapAppend)\n        });\n      }\n      return charmap;\n    };\n    const getCharMap = editor => {\n      const groups = extendCharMap(editor, getDefaultCharMap());\n      return groups.length > 1 ? [{\n          name: 'All',\n          characters: bind(groups, g => g.characters)\n        }].concat(groups) : groups;\n    };\n\n    const get = editor => {\n      const getCharMap$1 = () => {\n        return getCharMap(editor);\n      };\n      const insertChar$1 = chr => {\n        insertChar(editor, chr);\n      };\n      return {\n        getCharMap: getCharMap$1,\n        insertChar: insertChar$1\n      };\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const last = (fn, rate) => {\n      let timer = null;\n      const cancel = () => {\n        if (!isNull(timer)) {\n          clearTimeout(timer);\n          timer = null;\n        }\n      };\n      const throttle = (...args) => {\n        cancel();\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      };\n      return {\n        cancel,\n        throttle\n      };\n    };\n\n    const contains = (str, substr, start = 0, end) => {\n      const idx = str.indexOf(substr, start);\n      if (idx !== -1) {\n        return isUndefined(end) ? true : idx + substr.length <= end;\n      } else {\n        return false;\n      }\n    };\n    const fromCodePoint = String.fromCodePoint;\n\n    const charMatches = (charCode, name, lowerCasePattern) => {\n      if (contains(fromCodePoint(charCode).toLowerCase(), lowerCasePattern)) {\n        return true;\n      } else {\n        return contains(name.toLowerCase(), lowerCasePattern) || contains(name.toLowerCase().replace(/\\s+/g, ''), lowerCasePattern);\n      }\n    };\n    const scan = (group, pattern) => {\n      const matches = [];\n      const lowerCasePattern = pattern.toLowerCase();\n      each(group.characters, g => {\n        if (charMatches(g[0], g[1], lowerCasePattern)) {\n          matches.push(g);\n        }\n      });\n      return map(matches, m => ({\n        text: m[1],\n        value: fromCodePoint(m[0]),\n        icon: fromCodePoint(m[0])\n      }));\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, charMap) => {\n      const makeGroupItems = () => [\n        {\n          label: 'Search',\n          type: 'input',\n          name: patternName\n        },\n        {\n          type: 'collection',\n          name: 'results'\n        }\n      ];\n      const makeTabs = () => map(charMap, charGroup => ({\n        title: charGroup.name,\n        name: charGroup.name,\n        items: makeGroupItems()\n      }));\n      const makePanel = () => ({\n        type: 'panel',\n        items: makeGroupItems()\n      });\n      const makeTabPanel = () => ({\n        type: 'tabpanel',\n        tabs: makeTabs()\n      });\n      const currentTab = charMap.length === 1 ? Cell(UserDefined) : Cell('All');\n      const scanAndSet = (dialogApi, pattern) => {\n        find(charMap, group => group.name === currentTab.get()).each(f => {\n          const items = scan(f, pattern);\n          dialogApi.setData({ results: items });\n        });\n      };\n      const SEARCH_DELAY = 40;\n      const updateFilter = last(dialogApi => {\n        const pattern = dialogApi.getData().pattern;\n        scanAndSet(dialogApi, pattern);\n      }, SEARCH_DELAY);\n      const body = charMap.length === 1 ? makePanel() : makeTabPanel();\n      const initialData = {\n        pattern: '',\n        results: scan(charMap[0], '')\n      };\n      const bridgeSpec = {\n        title: 'Special Character',\n        size: 'normal',\n        body,\n        buttons: [{\n            type: 'cancel',\n            name: 'close',\n            text: 'Close',\n            primary: true\n          }],\n        initialData,\n        onAction: (api, details) => {\n          if (details.name === 'results') {\n            insertChar(editor, details.value);\n            api.close();\n          }\n        },\n        onTabChange: (dialogApi, details) => {\n          currentTab.set(details.newTabName);\n          updateFilter.throttle(dialogApi);\n        },\n        onChange: (dialogApi, changeData) => {\n          if (changeData.name === patternName) {\n            updateFilter.throttle(dialogApi);\n          }\n        }\n      };\n      const dialogApi = editor.windowManager.open(bridgeSpec);\n      dialogApi.focus(patternName);\n    };\n\n    const register$1 = (editor, charMap) => {\n      editor.addCommand('mceShowCharmap', () => {\n        open(editor, charMap);\n      });\n    };\n\n    const init = (editor, all) => {\n      editor.ui.registry.addAutocompleter('charmap', {\n        trigger: ':',\n        columns: 'auto',\n        minChars: 2,\n        fetch: (pattern, _maxResults) => new Promise((resolve, _reject) => {\n          resolve(scan(all, pattern));\n        }),\n        onAction: (autocompleteApi, rng, value) => {\n          editor.selection.setRng(rng);\n          editor.insertContent(value);\n          autocompleteApi.hide();\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceShowCharmap');\n      editor.ui.registry.addButton('charmap', {\n        icon: 'insert-character',\n        tooltip: 'Special character',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('charmap', {\n        icon: 'insert-character',\n        text: 'Special character...',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('charmap', editor => {\n        register$2(editor);\n        const charMap = getCharMap(editor);\n        register$1(editor, charMap);\n        register(editor);\n        init(editor, charMap[0]);\n        return get(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","fireInsertCustomChar","editor","chr","insertChar","evtChr","hasProto","v","constructor","predicate","_a","typeOf","x","t","o","proto","isType","type","value","isSimpleType","eq","a","isArray$1","isNull","isUndefined","isNullable","isNonNullable","isFunction","never","Optional","tag","onNone","onSome","mapper","binder","replacement","thunk","message","worker","nativePush","map","xs","f","len","r","i","each","findUntil","pred","until","find","flatten","bind","global","option","name","register$2","registerOption","charMapProcessor","getCharMap$1","getCharMapAppend","isArray","UserDefined","getDefaultCharMap","charmapFilter","charmap","item","getCharsFromOption","optionValue","extendCharMap","userCharMap","userCharMapAppend","userDefinedGroup","cg","getCharMap","groups","g","get","Cell","initial","last","fn","rate","timer","cancel","args","contains","str","substr","start","end","idx","fromCodePoint","charMatches","charCode","lowerCasePattern","scan","group","pattern","matches","m","patternName","open","charMap","makeGroupItems","makeTabs","charGroup","makePanel","makeTabPanel","currentTab","scanAndSet","dialogApi","items","updateFilter","body","initialData","bridgeSpec","api","details","changeData","register$1","init","all","_maxResults","resolve","_reject","autocompleteApi","rng","onSetupEditable","nodeChanged","register","onAction","Plugin"],"mappings":";;;;;;;;;;;;;;;;;CAIC,WAAY;AAGT,MAAIA,IAAW,QAAQ,KAAK,MAAM,QAAQ,uBAAuB;AAEjE,QAAMC,IAAuB,CAACC,GAAQC,MAC7BD,EAAO,SAAS,oBAAoB,EAAE,KAAAC,GAAK,GAG9CC,IAAa,CAACF,GAAQC,MAAQ;AAClC,UAAME,IAASJ,EAAqBC,GAAQC,CAAG,EAAE;AACjD,IAAAD,EAAO,YAAY,oBAAoB,IAAOG,CAAM;AAAA,EAAA,GAGhDC,IAAW,CAACC,GAAGC,GAAaC,MAAc;AAC9C,QAAIC;AACJ,WAAID,EAAUF,GAAGC,EAAY,SAAS,IAC7B,OAEEE,IAAKH,EAAE,iBAAiB,QAAQG,MAAO,SAAS,SAASA,EAAG,UAAUF,EAAY;AAAA,EAC7F,GAEIG,IAAS,CAAAC,MAAK;AAClB,UAAMC,IAAI,OAAOD;AACjB,WAAIA,MAAM,OACD,SACEC,MAAM,YAAY,MAAM,QAAQD,CAAC,IACnC,UACEC,MAAM,YAAYP,EAASM,GAAG,QAAQ,CAACE,GAAGC,MAAUA,EAAM,cAAcD,CAAC,CAAC,IAC5E,WAEAD;AAAA,EACT,GAEIG,IAAS,CAAAC,MAAQ,CAAAC,MAASP,EAAOO,CAAK,MAAMD,GAC5CE,IAAe,CAAAF,MAAQ,CAAAC,MAAS,OAAOA,MAAUD,GACjDG,IAAK,CAAA,MAAK,CAAAC,MAAK,MAAMA,GACrBC,IAAYN,EAAO,OAAO,GAC1BO,IAASH,EAAG,IAAI,GAChBI,IAAcJ,EAAG,MAAS,GAC1BK,IAAa,CAAAJ,MAAKA,KAAM,MACxBK,IAAgB,CAAAL,MAAK,CAACI,EAAWJ,CAAC,GAClCM,IAAaR,EAAa,UAAU,GAOpCS,KALW,CAAAV,MACR,MACEA,GAGY,EAAK;AAAA,EAE5B,MAAMW,EAAS;AAAA,IACb,YAAYC,GAAKZ,GAAO;AACtB,WAAK,MAAMY,GACX,KAAK,QAAQZ;AAAA,IAAA;AAAA,IAEf,OAAO,KAAKA,GAAO;AACjB,aAAO,IAAIW,EAAS,IAAMX,CAAK;AAAA,IAAA;AAAA,IAEjC,OAAO,OAAO;AACZ,aAAOW,EAAS;AAAA,IAAA;AAAA,IAElB,KAAKE,GAAQC,GAAQ;AACnB,aAAI,KAAK,MACAA,EAAO,KAAK,KAAK,IAEjBD,EAAA;AAAA,IACT;AAAA,IAEF,SAAS;AACP,aAAO,KAAK;AAAA,IAAA;AAAA,IAEd,SAAS;AACP,aAAO,CAAC,KAAK;AAAA,IAAA;AAAA,IAEf,IAAIE,GAAQ;AACV,aAAI,KAAK,MACAJ,EAAS,KAAKI,EAAO,KAAK,KAAK,CAAC,IAEhCJ,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,KAAKK,GAAQ;AACX,aAAI,KAAK,MACAA,EAAO,KAAK,KAAK,IAEjBL,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,OAAOpB,GAAW;AAChB,aAAO,KAAK,OAAOA,EAAU,KAAK,KAAK;AAAA,IAAA;AAAA,IAEzC,OAAOA,GAAW;AAChB,aAAO,CAAC,KAAK,OAAOA,EAAU,KAAK,KAAK;AAAA,IAAA;AAAA,IAE1C,OAAOA,GAAW;AAChB,aAAI,CAAC,KAAK,OAAOA,EAAU,KAAK,KAAK,IAC5B,OAEAoB,EAAS,KAAA;AAAA,IAClB;AAAA,IAEF,MAAMM,GAAa;AACjB,aAAO,KAAK,MAAM,KAAK,QAAQA;AAAA,IAAA;AAAA,IAEjC,GAAGA,GAAa;AACd,aAAO,KAAK,MAAM,OAAOA;AAAA,IAAA;AAAA,IAE3B,WAAWC,GAAO;AAChB,aAAO,KAAK,MAAM,KAAK,QAAQA,EAAA;AAAA,IAAM;AAAA,IAEvC,QAAQA,GAAO;AACb,aAAO,KAAK,MAAM,OAAOA,EAAA;AAAA,IAAM;AAAA,IAEjC,SAASC,GAAS;AAChB,UAAK,KAAK;AAGR,eAAO,KAAK;AAFZ,YAAM,IAAI,MAAMA,KAAmD,yBAAyB;AAAA,IAG9F;AAAA,IAEF,OAAO,KAAKnB,GAAO;AACjB,aAAOQ,EAAcR,CAAK,IAAIW,EAAS,KAAKX,CAAK,IAAIW,EAAS,KAAA;AAAA,IAAK;AAAA,IAErE,YAAY;AACV,aAAO,KAAK,MAAM,KAAK,QAAQ;AAAA,IAAA;AAAA,IAEjC,iBAAiB;AACf,aAAO,KAAK;AAAA,IAAA;AAAA,IAEd,KAAKS,GAAQ;AACX,MAAI,KAAK,OACPA,EAAO,KAAK,KAAK;AAAA,IACnB;AAAA,IAEF,UAAU;AACR,aAAO,KAAK,MAAM,CAAC,KAAK,KAAK,IAAI,CAAA;AAAA,IAAC;AAAA,IAEpC,WAAW;AACT,aAAO,KAAK,MAAM,QAAS,KAAK,KAAM,MAAM;AAAA,IAAA;AAAA,EAC9C;AAEF,EAAAT,EAAS,gBAAgB,IAAIA,EAAS,EAAK;AAE3C,QAAMU,IAAa,MAAM,UAAU,MAC7BC,IAAM,CAACC,GAAIC,MAAM;AACrB,UAAMC,IAAMF,EAAG,QACTG,IAAI,IAAI,MAAMD,CAAG;AACvB,aAASE,IAAI,GAAGA,IAAIF,GAAKE,KAAK;AAC5B,YAAMjC,IAAI6B,EAAGI,CAAC;AACd,MAAAD,EAAEC,CAAC,IAAIH,EAAE9B,GAAGiC,CAAC;AAAA,IAAA;AAEf,WAAOD;AAAA,EAAA,GAEHE,IAAO,CAACL,GAAIC,MAAM;AACtB,aAASG,IAAI,GAAGF,IAAMF,EAAG,QAAQI,IAAIF,GAAKE,KAAK;AAC7C,YAAMjC,IAAI6B,EAAGI,CAAC;AACd,MAAAH,EAAE9B,GAAGiC,CAAC;AAAA,IAAA;AAAA,EACR,GAEIE,IAAY,CAACN,GAAIO,GAAMC,MAAU;AACrC,aAASJ,IAAI,GAAGF,IAAMF,EAAG,QAAQI,IAAIF,GAAKE,KAAK;AAC7C,YAAMjC,IAAI6B,EAAGI,CAAC;AACd,UAAIG,EAAKpC,GAAGiC,CAAC;AACX,eAAOhB,EAAS,KAAKjB,CAAC;AACxB,UAAWqC,EAAMrC,GAAGiC,CAAC;AACnB;AAAA,IACF;AAEF,WAAOhB,EAAS,KAAA;AAAA,EAAK,GAEjBqB,IAAO,CAACT,GAAIO,MACTD,EAAUN,GAAIO,GAAMpB,CAAK,GAE5BuB,IAAU,CAAAV,MAAM;AACpB,UAAMG,IAAI,CAAA;AACV,aAASC,IAAI,GAAGF,IAAMF,EAAG,QAAQI,IAAIF,GAAK,EAAEE,GAAG;AAC7C,UAAI,CAACvB,EAAUmB,EAAGI,CAAC,CAAC;AAClB,cAAM,IAAI,MAAM,sBAAsBA,IAAI,+BAA+BJ,CAAE;AAE7E,MAAAF,EAAW,MAAMK,GAAGH,EAAGI,CAAC,CAAC;AAAA,IAAA;AAE3B,WAAOD;AAAA,EAAA,GAEHQ,IAAO,CAACX,GAAIC,MAAMS,EAAQX,EAAIC,GAAIC,CAAC,CAAC;AAE1C,MAAIW,IAAS,QAAQ,KAAK,MAAM,QAAQ,oBAAoB;AAE5D,QAAMC,IAAS,CAAAC,MAAQ,CAAArD,MAAUA,EAAO,QAAQ,IAAIqD,CAAI,GAClDC,IAAa,CAAAtD,MAAU;AAC3B,UAAMuD,IAAiBvD,EAAO,QAAQ,UAChCwD,IAAmB,CAAAxC,MAASS,EAAWT,CAAK,KAAKI,EAAUJ,CAAK;AACtE,IAAAuC,EAAe,WAAW,EAAE,WAAWC,EAAA,CAAkB,GACzDD,EAAe,kBAAkB,EAAE,WAAWC,EAAA,CAAkB;AAAA,EAAA,GAE5DC,IAAeL,EAAO,SAAS,GAC/BM,IAAmBN,EAAO,gBAAgB,GAE1CO,IAAUR,EAAO,SACjBS,IAAc,gBACdC,IAAoB,MACjB;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,YAAY;AAAA,QACV;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA;AAAA,QAEF;AAAA,UACE;AAAA,UACA;AAAA,QAAA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","x_google_ignoreList":[0]}