{"version":3,"file":"index-DTlzwK2I.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/emoticons/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    const eq = t => a => t === a;\n    const isNull = eq(null);\n    const isUndefined = eq(undefined);\n    const isNullable = a => a === null || a === undefined;\n    const isNonNullable = a => !isNullable(a);\n\n    const noop = () => {\n    };\n    const constant = value => {\n      return () => {\n        return value;\n      };\n    };\n    const never = constant(false);\n\n    class Optional {\n      constructor(tag, value) {\n        this.tag = tag;\n        this.value = value;\n      }\n      static some(value) {\n        return new Optional(true, value);\n      }\n      static none() {\n        return Optional.singletonNone;\n      }\n      fold(onNone, onSome) {\n        if (this.tag) {\n          return onSome(this.value);\n        } else {\n          return onNone();\n        }\n      }\n      isSome() {\n        return this.tag;\n      }\n      isNone() {\n        return !this.tag;\n      }\n      map(mapper) {\n        if (this.tag) {\n          return Optional.some(mapper(this.value));\n        } else {\n          return Optional.none();\n        }\n      }\n      bind(binder) {\n        if (this.tag) {\n          return binder(this.value);\n        } else {\n          return Optional.none();\n        }\n      }\n      exists(predicate) {\n        return this.tag && predicate(this.value);\n      }\n      forall(predicate) {\n        return !this.tag || predicate(this.value);\n      }\n      filter(predicate) {\n        if (!this.tag || predicate(this.value)) {\n          return this;\n        } else {\n          return Optional.none();\n        }\n      }\n      getOr(replacement) {\n        return this.tag ? this.value : replacement;\n      }\n      or(replacement) {\n        return this.tag ? this : replacement;\n      }\n      getOrThunk(thunk) {\n        return this.tag ? this.value : thunk();\n      }\n      orThunk(thunk) {\n        return this.tag ? this : thunk();\n      }\n      getOrDie(message) {\n        if (!this.tag) {\n          throw new Error(message !== null && message !== void 0 ? message : 'Called getOrDie on None');\n        } else {\n          return this.value;\n        }\n      }\n      static from(value) {\n        return isNonNullable(value) ? Optional.some(value) : Optional.none();\n      }\n      getOrNull() {\n        return this.tag ? this.value : null;\n      }\n      getOrUndefined() {\n        return this.value;\n      }\n      each(worker) {\n        if (this.tag) {\n          worker(this.value);\n        }\n      }\n      toArray() {\n        return this.tag ? [this.value] : [];\n      }\n      toString() {\n        return this.tag ? `some(${ this.value })` : 'none()';\n      }\n    }\n    Optional.singletonNone = new Optional(false);\n\n    const exists = (xs, pred) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        if (pred(x, i)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    const map$1 = (xs, f) => {\n      const len = xs.length;\n      const r = new Array(len);\n      for (let i = 0; i < len; i++) {\n        const x = xs[i];\n        r[i] = f(x, i);\n      }\n      return r;\n    };\n    const each$1 = (xs, f) => {\n      for (let i = 0, len = xs.length; i < len; i++) {\n        const x = xs[i];\n        f(x, i);\n      }\n    };\n\n    const Cell = initial => {\n      let value = initial;\n      const get = () => {\n        return value;\n      };\n      const set = v => {\n        value = v;\n      };\n      return {\n        get,\n        set\n      };\n    };\n\n    const last = (fn, rate) => {\n      let timer = null;\n      const cancel = () => {\n        if (!isNull(timer)) {\n          clearTimeout(timer);\n          timer = null;\n        }\n      };\n      const throttle = (...args) => {\n        cancel();\n        timer = setTimeout(() => {\n          timer = null;\n          fn.apply(null, args);\n        }, rate);\n      };\n      return {\n        cancel,\n        throttle\n      };\n    };\n\n    const insertEmoticon = (editor, ch) => {\n      editor.insertContent(ch);\n    };\n\n    const keys = Object.keys;\n    const hasOwnProperty = Object.hasOwnProperty;\n    const each = (obj, f) => {\n      const props = keys(obj);\n      for (let k = 0, len = props.length; k < len; k++) {\n        const i = props[k];\n        const x = obj[i];\n        f(x, i);\n      }\n    };\n    const map = (obj, f) => {\n      return tupleMap(obj, (x, i) => ({\n        k: i,\n        v: f(x, i)\n      }));\n    };\n    const tupleMap = (obj, f) => {\n      const r = {};\n      each(obj, (x, i) => {\n        const tuple = f(x, i);\n        r[tuple.k] = tuple.v;\n      });\n      return r;\n    };\n    const has = (obj, key) => hasOwnProperty.call(obj, key);\n\n    const shallow = (old, nu) => {\n      return nu;\n    };\n    const baseMerge = merger => {\n      return (...objects) => {\n        if (objects.length === 0) {\n          throw new Error(`Can't merge zero objects`);\n        }\n        const ret = {};\n        for (let j = 0; j < objects.length; j++) {\n          const curObject = objects[j];\n          for (const key in curObject) {\n            if (has(curObject, key)) {\n              ret[key] = merger(ret[key], curObject[key]);\n            }\n          }\n        }\n        return ret;\n      };\n    };\n    const merge = baseMerge(shallow);\n\n    const singleton = doRevoke => {\n      const subject = Cell(Optional.none());\n      const revoke = () => subject.get().each(doRevoke);\n      const clear = () => {\n        revoke();\n        subject.set(Optional.none());\n      };\n      const isSet = () => subject.get().isSome();\n      const get = () => subject.get();\n      const set = s => {\n        revoke();\n        subject.set(Optional.some(s));\n      };\n      return {\n        clear,\n        isSet,\n        get,\n        set\n      };\n    };\n    const value = () => {\n      const subject = singleton(noop);\n      const on = f => subject.get().each(f);\n      return {\n        ...subject,\n        on\n      };\n    };\n\n    const checkRange = (str, substr, start) => substr === '' || str.length >= substr.length && str.substr(start, start + substr.length) === substr;\n    const contains = (str, substr, start = 0, end) => {\n      const idx = str.indexOf(substr, start);\n      if (idx !== -1) {\n        return isUndefined(end) ? true : idx + substr.length <= end;\n      } else {\n        return false;\n      }\n    };\n    const startsWith = (str, prefix) => {\n      return checkRange(str, prefix, 0);\n    };\n\n    var global = tinymce.util.Tools.resolve('tinymce.Resource');\n\n    const DEFAULT_ID = 'tinymce.plugins.emoticons';\n    const option = name => editor => editor.options.get(name);\n    const register$2 = (editor, pluginUrl) => {\n      const registerOption = editor.options.register;\n      registerOption('emoticons_database', {\n        processor: 'string',\n        default: 'emojis'\n      });\n      registerOption('emoticons_database_url', {\n        processor: 'string',\n        default: `${ pluginUrl }/js/${ getEmojiDatabase(editor) }${ editor.suffix }.js`\n      });\n      registerOption('emoticons_database_id', {\n        processor: 'string',\n        default: DEFAULT_ID\n      });\n      registerOption('emoticons_append', {\n        processor: 'object',\n        default: {}\n      });\n      registerOption('emoticons_images_url', {\n        processor: 'string',\n        default: 'https://twemoji.maxcdn.com/v/13.0.1/72x72/'\n      });\n    };\n    const getEmojiDatabase = option('emoticons_database');\n    const getEmojiDatabaseUrl = option('emoticons_database_url');\n    const getEmojiDatabaseId = option('emoticons_database_id');\n    const getAppendedEmoji = option('emoticons_append');\n    const getEmojiImageUrl = option('emoticons_images_url');\n\n    const ALL_CATEGORY = 'All';\n    const categoryNameMap = {\n      symbols: 'Symbols',\n      people: 'People',\n      animals_and_nature: 'Animals and Nature',\n      food_and_drink: 'Food and Drink',\n      activity: 'Activity',\n      travel_and_places: 'Travel and Places',\n      objects: 'Objects',\n      flags: 'Flags',\n      user: 'User Defined'\n    };\n    const translateCategory = (categories, name) => has(categories, name) ? categories[name] : name;\n    const getUserDefinedEmoji = editor => {\n      const userDefinedEmoticons = getAppendedEmoji(editor);\n      return map(userDefinedEmoticons, value => ({\n        keywords: [],\n        category: 'user',\n        ...value\n      }));\n    };\n    const initDatabase = (editor, databaseUrl, databaseId) => {\n      const categories = value();\n      const all = value();\n      const emojiImagesUrl = getEmojiImageUrl(editor);\n      const getEmoji = lib => {\n        if (startsWith(lib.char, '<img')) {\n          return lib.char.replace(/src=\"([^\"]+)\"/, (match, url) => `src=\"${ emojiImagesUrl }${ url }\"`);\n        } else {\n          return lib.char;\n        }\n      };\n      const processEmojis = emojis => {\n        const cats = {};\n        const everything = [];\n        each(emojis, (lib, title) => {\n          const entry = {\n            title,\n            keywords: lib.keywords,\n            char: getEmoji(lib),\n            category: translateCategory(categoryNameMap, lib.category)\n          };\n          const current = cats[entry.category] !== undefined ? cats[entry.category] : [];\n          cats[entry.category] = current.concat([entry]);\n          everything.push(entry);\n        });\n        categories.set(cats);\n        all.set(everything);\n      };\n      editor.on('init', () => {\n        global.load(databaseId, databaseUrl).then(emojis => {\n          const userEmojis = getUserDefinedEmoji(editor);\n          processEmojis(merge(emojis, userEmojis));\n        }, err => {\n          console.log(`Failed to load emojis: ${ err }`);\n          categories.set({});\n          all.set([]);\n        });\n      });\n      const listCategory = category => {\n        if (category === ALL_CATEGORY) {\n          return listAll();\n        }\n        return categories.get().bind(cats => Optional.from(cats[category])).getOr([]);\n      };\n      const listAll = () => all.get().getOr([]);\n      const listCategories = () => [ALL_CATEGORY].concat(keys(categories.get().getOr({})));\n      const waitForLoad = () => {\n        if (hasLoaded()) {\n          return Promise.resolve(true);\n        } else {\n          return new Promise((resolve, reject) => {\n            let numRetries = 15;\n            const interval = setInterval(() => {\n              if (hasLoaded()) {\n                clearInterval(interval);\n                resolve(true);\n              } else {\n                numRetries--;\n                if (numRetries < 0) {\n                  console.log('Could not load emojis from url: ' + databaseUrl);\n                  clearInterval(interval);\n                  reject(false);\n                }\n              }\n            }, 100);\n          });\n        }\n      };\n      const hasLoaded = () => categories.isSet() && all.isSet();\n      return {\n        listCategories,\n        hasLoaded,\n        waitForLoad,\n        listAll,\n        listCategory\n      };\n    };\n\n    const emojiMatches = (emoji, lowerCasePattern) => contains(emoji.title.toLowerCase(), lowerCasePattern) || exists(emoji.keywords, k => contains(k.toLowerCase(), lowerCasePattern));\n    const emojisFrom = (list, pattern, maxResults) => {\n      const matches = [];\n      const lowerCasePattern = pattern.toLowerCase();\n      const reachedLimit = maxResults.fold(() => never, max => size => size >= max);\n      for (let i = 0; i < list.length; i++) {\n        if (pattern.length === 0 || emojiMatches(list[i], lowerCasePattern)) {\n          matches.push({\n            value: list[i].char,\n            text: list[i].title,\n            icon: list[i].char\n          });\n          if (reachedLimit(matches.length)) {\n            break;\n          }\n        }\n      }\n      return matches;\n    };\n\n    const patternName = 'pattern';\n    const open = (editor, database) => {\n      const initialState = {\n        pattern: '',\n        results: emojisFrom(database.listAll(), '', Optional.some(300))\n      };\n      const currentTab = Cell(ALL_CATEGORY);\n      const scan = dialogApi => {\n        const dialogData = dialogApi.getData();\n        const category = currentTab.get();\n        const candidates = database.listCategory(category);\n        const results = emojisFrom(candidates, dialogData[patternName], category === ALL_CATEGORY ? Optional.some(300) : Optional.none());\n        dialogApi.setData({ results });\n      };\n      const updateFilter = last(dialogApi => {\n        scan(dialogApi);\n      }, 200);\n      const searchField = {\n        label: 'Search',\n        type: 'input',\n        name: patternName\n      };\n      const resultsField = {\n        type: 'collection',\n        name: 'results'\n      };\n      const getInitialState = () => {\n        const body = {\n          type: 'tabpanel',\n          tabs: map$1(database.listCategories(), cat => ({\n            title: cat,\n            name: cat,\n            items: [\n              searchField,\n              resultsField\n            ]\n          }))\n        };\n        return {\n          title: 'Emojis',\n          size: 'normal',\n          body,\n          initialData: initialState,\n          onTabChange: (dialogApi, details) => {\n            currentTab.set(details.newTabName);\n            updateFilter.throttle(dialogApi);\n          },\n          onChange: updateFilter.throttle,\n          onAction: (dialogApi, actionData) => {\n            if (actionData.name === 'results') {\n              insertEmoticon(editor, actionData.value);\n              dialogApi.close();\n            }\n          },\n          buttons: [{\n              type: 'cancel',\n              text: 'Close',\n              primary: true\n            }]\n        };\n      };\n      const dialogApi = editor.windowManager.open(getInitialState());\n      dialogApi.focus(patternName);\n      if (!database.hasLoaded()) {\n        dialogApi.block('Loading emojis...');\n        database.waitForLoad().then(() => {\n          dialogApi.redial(getInitialState());\n          updateFilter.throttle(dialogApi);\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        }).catch(_err => {\n          dialogApi.redial({\n            title: 'Emojis',\n            body: {\n              type: 'panel',\n              items: [{\n                  type: 'alertbanner',\n                  level: 'error',\n                  icon: 'warning',\n                  text: 'Could not load emojis'\n                }]\n            },\n            buttons: [{\n                type: 'cancel',\n                text: 'Close',\n                primary: true\n              }],\n            initialData: {\n              pattern: '',\n              results: []\n            }\n          });\n          dialogApi.focus(patternName);\n          dialogApi.unblock();\n        });\n      }\n    };\n\n    const register$1 = (editor, database) => {\n      editor.addCommand('mceEmoticons', () => open(editor, database));\n    };\n\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addAttributeFilter('data-emoticon', nodes => {\n          each$1(nodes, node => {\n            node.attr('data-mce-resize', 'false');\n            node.attr('data-mce-placeholder', '1');\n          });\n        });\n      });\n    };\n\n    const init = (editor, database) => {\n      editor.ui.registry.addAutocompleter('emoticons', {\n        trigger: ':',\n        columns: 'auto',\n        minChars: 2,\n        fetch: (pattern, maxResults) => database.waitForLoad().then(() => {\n          const candidates = database.listAll();\n          return emojisFrom(candidates, pattern, Optional.some(maxResults));\n        }),\n        onAction: (autocompleteApi, rng, value) => {\n          editor.selection.setRng(rng);\n          editor.insertContent(value);\n          autocompleteApi.hide();\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceEmoticons');\n      editor.ui.registry.addButton('emoticons', {\n        tooltip: 'Emojis',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n      editor.ui.registry.addMenuItem('emoticons', {\n        text: 'Emojis...',\n        icon: 'emoji',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$1.add('emoticons', (editor, pluginUrl) => {\n        register$2(editor, pluginUrl);\n        const databaseUrl = getEmojiDatabaseUrl(editor);\n        const databaseId = getEmojiDatabaseId(editor);\n        const database = initDatabase(editor, databaseUrl, databaseId);\n        register$1(editor, database);\n        register(editor);\n        init(editor, database);\n        setup(editor);\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$1","eq","t","a","isNull","isUndefined","isNullable","isNonNullable","noop","never","value","Optional","tag","onNone","onSome","mapper","binder","predicate","replacement","thunk","message","worker","exists","xs","pred","i","len","x","map$1","f","r","each$1","Cell","initial","v","last","fn","rate","timer","cancel","args","insertEmoticon","editor","ch","keys","hasOwnProperty","each","obj","props","k","map","tupleMap","tuple","has","key","merge","merger","objects","ret","j","curObject","old","nu","singleton","doRevoke","subject","revoke","s","checkRange","str","substr","start","contains","end","idx","startsWith","prefix","global","DEFAULT_ID","option","name","register$2","pluginUrl","registerOption","getEmojiDatabase","getEmojiDatabaseUrl","getEmojiDatabaseId","getAppendedEmoji","getEmojiImageUrl","ALL_CATEGORY","categoryNameMap","translateCategory","categories","getUserDefinedEmoji","userDefinedEmoticons","initDatabase","databaseUrl","databaseId","all","emojiImagesUrl","getEmoji","lib","match","url","processEmojis","emojis","cats","everything","title","entry","current","userEmojis","err","listCategory","category","listAll","listCategories","waitForLoad","hasLoaded","resolve","reject","numRetries","interval","emojiMatches","emoji","lowerCasePattern","emojisFrom","list","pattern","maxResults","matches","reachedLimit","max","size","patternName","open","database","initialState","currentTab","scan","dialogApi","dialogData","candidates","results","updateFilter","searchField","resultsField","getInitialState","cat","details","actionData","_err","register$1","setup","nodes","node","init","autocompleteApi","rng","onSetupEditable","api","nodeChanged","register","onAction","Plugin"],"mappings":"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","x_google_ignoreList":[0]}