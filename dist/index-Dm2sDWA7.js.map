{"version":3,"file":"index-Dm2sDWA7.js","sources":["../node_modules/.pnpm/tinymce@6.8.6/node_modules/tinymce/plugins/anchor/plugin.js"],"sourcesContent":["/**\n * TinyMCE version 6.8.6 (TBD)\n */\n\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.RangeUtils');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    const option = name => editor => editor.options.get(name);\n    const register$2 = editor => {\n      const registerOption = editor.options.register;\n      registerOption('allow_html_in_named_anchor', {\n        processor: 'boolean',\n        default: false\n      });\n    };\n    const allowHtmlInNamedAnchor = option('allow_html_in_named_anchor');\n\n    const namedAnchorSelector = 'a:not([href])';\n    const isEmptyString = str => !str;\n    const getIdFromAnchor = elm => {\n      const id = elm.getAttribute('id') || elm.getAttribute('name');\n      return id || '';\n    };\n    const isAnchor = elm => elm.nodeName.toLowerCase() === 'a';\n    const isNamedAnchor = elm => isAnchor(elm) && !elm.getAttribute('href') && getIdFromAnchor(elm) !== '';\n    const isEmptyNamedAnchor = elm => isNamedAnchor(elm) && !elm.firstChild;\n\n    const removeEmptyNamedAnchorsInSelection = editor => {\n      const dom = editor.dom;\n      global$1(dom).walk(editor.selection.getRng(), nodes => {\n        global.each(nodes, node => {\n          if (isEmptyNamedAnchor(node)) {\n            dom.remove(node, false);\n          }\n        });\n      });\n    };\n    const isValidId = id => /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    const getNamedAnchor = editor => editor.dom.getParent(editor.selection.getStart(), namedAnchorSelector);\n    const getId = editor => {\n      const anchor = getNamedAnchor(editor);\n      if (anchor) {\n        return getIdFromAnchor(anchor);\n      } else {\n        return '';\n      }\n    };\n    const createAnchor = (editor, id) => {\n      editor.undoManager.transact(() => {\n        if (!allowHtmlInNamedAnchor(editor)) {\n          editor.selection.collapse(true);\n        }\n        if (editor.selection.isCollapsed()) {\n          editor.insertContent(editor.dom.createHTML('a', { id }));\n        } else {\n          removeEmptyNamedAnchorsInSelection(editor);\n          editor.formatter.remove('namedAnchor', undefined, undefined, true);\n          editor.formatter.apply('namedAnchor', { value: id });\n          editor.addVisual();\n        }\n      });\n    };\n    const updateAnchor = (editor, id, anchorElement) => {\n      anchorElement.removeAttribute('name');\n      anchorElement.id = id;\n      editor.addVisual();\n      editor.undoManager.add();\n    };\n    const insert = (editor, id) => {\n      const anchor = getNamedAnchor(editor);\n      if (anchor) {\n        updateAnchor(editor, id, anchor);\n      } else {\n        createAnchor(editor, id);\n      }\n      editor.focus();\n    };\n\n    const insertAnchor = (editor, newId) => {\n      if (!isValidId(newId)) {\n        editor.windowManager.alert('ID should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return false;\n      } else {\n        insert(editor, newId);\n        return true;\n      }\n    };\n    const open = editor => {\n      const currentId = getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        size: 'normal',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'id',\n              type: 'input',\n              label: 'ID',\n              placeholder: 'example'\n            }]\n        },\n        buttons: [\n          {\n            type: 'cancel',\n            name: 'cancel',\n            text: 'Cancel'\n          },\n          {\n            type: 'submit',\n            name: 'save',\n            text: 'Save',\n            primary: true\n          }\n        ],\n        initialData: { id: currentId },\n        onSubmit: api => {\n          if (insertAnchor(editor, api.getData().id)) {\n            api.close();\n          }\n        }\n      });\n    };\n\n    const register$1 = editor => {\n      editor.addCommand('mceAnchor', () => {\n        open(editor);\n      });\n    };\n\n    const isNamedAnchorNode = node => isEmptyString(node.attr('href')) && !isEmptyString(node.attr('id') || node.attr('name'));\n    const isEmptyNamedAnchorNode = node => isNamedAnchorNode(node) && !node.firstChild;\n    const setContentEditable = state => nodes => {\n      for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (isEmptyNamedAnchorNode(node)) {\n          node.attr('contenteditable', state);\n        }\n      }\n    };\n    const setup = editor => {\n      editor.on('PreInit', () => {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n\n    const registerFormats = editor => {\n      editor.formatter.register('namedAnchor', {\n        inline: 'a',\n        selector: namedAnchorSelector,\n        remove: 'all',\n        split: true,\n        deep: true,\n        attributes: { id: '%value' },\n        onmatch: (node, _fmt, _itemName) => {\n          return isNamedAnchor(node);\n        }\n      });\n    };\n\n    const onSetupEditable = editor => api => {\n      const nodeChanged = () => {\n        api.setEnabled(editor.selection.isEditable());\n      };\n      editor.on('NodeChange', nodeChanged);\n      nodeChanged();\n      return () => {\n        editor.off('NodeChange', nodeChanged);\n      };\n    };\n    const register = editor => {\n      const onAction = () => editor.execCommand('mceAnchor');\n      editor.ui.registry.addToggleButton('anchor', {\n        icon: 'bookmark',\n        tooltip: 'Anchor',\n        onAction,\n        onSetup: buttonApi => {\n          const unbindSelectorChanged = editor.selection.selectorChangedWithUnbind('a:not([href])', buttonApi.setActive).unbind;\n          const unbindEditableChanged = onSetupEditable(editor)(buttonApi);\n          return () => {\n            unbindSelectorChanged();\n            unbindEditableChanged();\n          };\n        }\n      });\n      editor.ui.registry.addMenuItem('anchor', {\n        icon: 'bookmark',\n        text: 'Anchor...',\n        onAction,\n        onSetup: onSetupEditable(editor)\n      });\n    };\n\n    var Plugin = () => {\n      global$2.add('anchor', editor => {\n        register$2(editor);\n        setup(editor);\n        register$1(editor);\n        register(editor);\n        editor.on('PreInit', () => {\n          registerFormats(editor);\n        });\n      });\n    };\n\n    Plugin();\n\n})();\n"],"names":["global$2","global$1","global","option","name","editor","register$2","registerOption","allowHtmlInNamedAnchor","namedAnchorSelector","isEmptyString","str","getIdFromAnchor","elm","isAnchor","isNamedAnchor","isEmptyNamedAnchor","removeEmptyNamedAnchorsInSelection","dom","nodes","node","isValidId","id","getNamedAnchor","getId","anchor","createAnchor","updateAnchor","anchorElement","insert","insertAnchor","newId","open","currentId","api","register$1","isNamedAnchorNode","isEmptyNamedAnchorNode","setContentEditable","i","state","setup","registerFormats","_fmt","_itemName","onSetupEditable","nodeChanged","register","onAction","buttonApi","unbindSelectorChanged","unbindEditableChanged","Plugin"],"mappings":"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","x_google_ignoreList":[0]}